settings
{
	main
	{
		Description: " Find friends and have fun!\n\n Last version: February, 2025\n\n Contact us: bit.ly/ow2friendly \n\n Made with ♡ by: Warloy et al.\n Community managed with ♡ by: kwally"
		Mode Name: "♥ Friendly ♥ Updated ♥"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Spectators: 6
		Max Team 1 Players: 6
		Max Team 2 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Assault

		Capture the Flag
		{
			Flag Carrier Abilities: All
			Flag Dropped Lock Time: 5.0
			Flag Return Time: 4.0
			Flag Score Respawn Time: 20.0
			Score To Win: 9

			enabled maps
			{
				Ayutthaya 972777519512063901
			}
		}

		Escort
		{
			disabled maps
			{
				Junkertown
			}
		}

		Hybrid
		{
			disabled maps
			{
				Blizzard World
				Eichenwalde
				Hollywood
				King's Row
			}
		}

		Skirmish
		{
			Limit Valid Control Points: Second

			enabled maps
			{
				Colosseo 972777519512068292
				Esperança 972777519512068154
				Hanaoka
				New Junk City 972777519512068154
				New Queen Street 972777519512068197
				Runasapi 972777519512068154
				Suravasa 972777519512068154
				Throne of Anubis 972777519512068154
				Antarctic Peninsula 972777519512068153
				Busan 972777519512068153
				Ilios 972777519512068292
				Lijiang Tower 972777519512068153
				Nepal 972777519512068292
				Oasis 972777519512068153
				Samoa 972777519512068154
				Blizzard World Winter 972777519512063901
				Eichenwalde Halloween 972777519512063901
				Hollywood Halloween 972777519512063901
				King's Row Winter 972777519512063901
				Midtown 972777519512068153
				Numbani 972777519512068154
				Paraíso 972777519512068292
				Circuit royal 972777519512068153
				Dorado 972777519512068153
				Havana 972777519512068153
				Rialto 972777519512068292
				Route 66 972777519512068153
				Shambali Monastery 972777519512068153
				Watchpoint: Gibraltar 972777519512068292
			}
		}

		Team Deathmatch
		{
			Self Initiated Respawn: Off

			enabled maps
			{
				Black Forest 972777519512063901
				Castillo 972777519512063901
				Château Guillard Halloween 972777519512063901
				Ecopoint: Antarctica Winter 972777519512063901
				Kanezaka 972777519512063901
				Malevento 972777519512063901
				Necropolis 972777519512068153
				Petra 972777519512068154
			}
		}

		General
		{
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Health Pack Respawn Time Scalar: 10%
			Hero Limit: Off
			Kill Cam: Off
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 500%
			Ultimate Duration: 350%
			Ultimate Generation - Passive: 500%

			Ana
			{
				Biotic Grenade Cooldown Time: 20%
				Sleep Dart Cooldown Time: 20%
			}

			Ashe
			{
				No Ammunition Requirement: On
				Coach Gun Cooldown Time: 10%
				Coach Gun Knockback Scalar Enemy: 150%
				Coach Gun Knockback Scalar Self: 150%
				Dynamite Cooldown Time: 29%
				Dynamite Fuse Time Scalar: 500%
				Infinite Ultimate Duration: On
			}

			Baptiste
			{
				Immortality Field Cooldown Time: 20%
				Regenerative Burst Cooldown Time: 20%
			}

			Bastion
			{
				A-36 Tactical Grenade Cooldown Time: 30%
				A-36 Tactical Grenade Knockback Scalar: 250%
				Reconfigure Cooldown Time: 0%
				Ultimate Duration: 100%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 1%
				Barrier Shield Recharge Rate: 500%
				Repair Pack Cooldown Time: 1%
				Shield Bash Cooldown Time: 10%
				Shield Bash Knockback Scalar: 150%
				Whip Shot Cooldown Time: 30%
				Whip Shot Knockback Scalar: 150%
			}

			Cassidy
			{
				Combat Roll Cooldown Time: 0%
				Flashbang Cooldown Time: 20%
			}

			D.Va
			{
				Boosters Cooldown Time: 0%
				Defense Matrix Maximum Time: 500%
				Defense Matrix Recharge Rate: 500%
				Micro Missiles Cooldown Time: 15%
				Spawn Without Mech: On
			}

			Doomfist
			{
				Power Block Charge Rate: 500%
				Power Block Cooldown Time: 20%
				Rocket Punch Cooldown Time: 20%
				Rocket Punch Knockback Scalar: 150%
				Seismic Slam Cooldown Time: 20%
				Ultimate Duration: 500%
			}

			Echo
			{
				Flight Cooldown Time: 0%
				Focusing Beam Cooldown Time: 15%
				Sticky Bombs Cooldown Time: 10%
			}

			Genji
			{
				Deflect Cooldown Time: 20%
				No Ammunition Requirement: On
				Swift Strike Cooldown Time: 0%
			}

			Hanzo
			{
				Lunge Cooldown Time: 0%
				Lunge Distance Scalar: 150%
				Sonic Arrow Cooldown Time: 20%
				Storm Arrows Cooldown Time: 20%
			}

			Hazard
			{
				Violent Leap Cooldown Time: 0%
			}

			Illari
			{
				Healing Pylon Cooldown Time: 20%
				No Ammunition Requirement: On
				Outburst Cooldown Time: 15%
				Solar Energy Maximum: 500%
				Solar Energy Recharge Rate: 500%
			}

			Junker Queen
			{
				Carnage Cooldown Time: 10%
				Commanding Shout Cooldown Time: 10%
				Jagged Blade Cooldown Time: 15%
				Jagged Blade Delay Before Automatic Recall: 400%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 10%
				Steel Trap Cooldown Time: 20%
				Ultimate Duration: 500%
			}

			Juno
			{
				Glide Boost Cooldown Time: 0%
				Glide Boost Duration Scalar: 250%
				Hyper Ring Cooldown Time: 0%
				Pulsar Torpedoes Cooldown Time: 150%
			}

			Kiriko
			{
				Protection Suzu Cooldown Time: 15%
				Swift Step Cooldown Time: 10%
				Swift Step Distance Scalar: 300%
			}

			Lifeweaver
			{
				Life Grip Cooldown Time: 50%
				No Ammunition Requirement: On
				Petal Platform Cooldown Time: 99%
				Rejuvenating Dash Cooldown Time: 20%
				Ultimate Generation - Combat Tree of Life: 50%
				Ultimate Generation - Passive Tree of Life: 55%
			}

			Lúcio
			{
				Amp It Up Cooldown Time: 20%
				Soundwave Cooldown Time: 45%
			}

			Mauga
			{
				Cardiac Overdrive Cooldown Time: 35%
				Overrun Cooldown Time: 0%
				Overrun Knockback: 150%
				Ultimate Duration: 25%
			}

			Mei
			{
				No Ammunition Requirement: On
			}

			Mercy
			{
				Guardian Angel Cooldown Time: 0%
				No Ammunition Requirement: On
				Resurrect Cooldown Time: 0%
			}

			Moira
			{
				Biotic Energy Maximum: 300%
				Biotic Energy Recharge Rate: 500%
				Biotic Orb Cooldown Time: 20%
				Fade Cooldown Time: 0%
			}

			Orisa
			{
				Energy Javelin Cooldown Time: 40%
				Fortify Cooldown Time: 25%
				Javelin Spin Cooldown Time: 15%
			}

			Pharah
			{
				Concussive Blast Cooldown Time: 25%
				Hover Jets Unlimited Fuel: On
				Jet Dash Cooldown Time: 0%
				Jump Jet Cooldown Time: 0%
			}

			Ramattra
			{
				Nemesis Form Cooldown Time: 20%
				No Ammunition Requirement: On
				Ravenous Vortex Cooldown Time: 20%
				Void Barrier Omnic Form Cooldown Time: 20%
			}

			Reaper
			{
				Shadow Step Cooldown Time: 10%
				Wraith Form Cooldown Time: 10%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 10%
				Charge Cooldown Time: 15%
				Fire Strike Cooldown Time: 50%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 20%
				Pig Pen Cooldown Time: 20%
				Take a Breather Cooldown Time: 20%
				Take a Breather Maximum Time: 500%
				Take a Breather Recharge Rate: 500%
			}

			Sigma
			{
				Accretion Cooldown Time: 10%
				Experimental Barrier Cooldown Time: 20%
				Kinetic Grasp Cooldown Time: 20%
				Ultimate Generation - Combat Gravitic Flux: 50%
				Ultimate Generation - Passive Gravitic Flux: 75%
			}

			Sojourn
			{
				Disruptor Shot Cooldown Time: 20%
				Power Slide Cooldown Time: 0%
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 10%
				Helix Rockets Cooldown Time: 15%
				Helix Rockets Knockback Scalar: 150%
				No Ammunition Requirement: On
			}

			Sombra
			{
				Hack Cooldown Time: 15%
				Translocator Cooldown Time: 0%
				Virus Cooldown Time: 15%
			}

			Symmetra
			{
				No Ammunition Requirement: On
				Sentry Turret Cooldown Time: 20%
				Teleporter Cooldown Time: 20%
			}

			Torbjörn
			{
				Deploy Turret Cooldown Time: 99%
				Overload Cooldown Time: 25%
			}

			Tracer
			{
				Blink Cooldown Time: 0%
				Recall Cooldown Time: 30%
			}

			Venture
			{
				Burrow Cooldown Time: 0%
				Burrow Duration Scalar: 500%
				Drill Dash Cooldown Time: 0%
				Ultimate Duration: 500%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 0%
				No Ammunition Requirement: On
				Venom Mine Cooldown Time: 45%
			}

			Winston
			{
				Barrier Projector Cooldown Time: 15%
				Jump Pack Cooldown Time: 10%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 20%
				Grappling Claw Cooldown Time: 10%
				Piledriver Cooldown Time: 30%
			}

			Zarya
			{
				No Ammunition Requirement: On
				Particle Barrier Cooldown Time: 25%
				Projected Barrier Cooldown Time: 25%
				Ultimate Generation - Combat Graviton Surge: 50%
				Ultimate Generation - Passive Graviton Surge: 75%
			}

			Zenyatta
			{
				No Ammunition Requirement: On
			}
		}
	}
}

variables
{
	global:
		0: High_Rank
		1: Banned_List
		5: RGB_Vector
		6: Mod_Rank
		7: Temp_Banned
		8: Current_Host
		9: Gravity_Helper
		10: Gravity_Toggle
		11: teleportsAndMoePosition
		12: Drawing_Obj_Storage
		13: Titles_And_Outlines
		14: Jail_List
		15: Jail_Helper
		16: Drawing_Obj_Size
		17: Drawing_Obj_Effects
		18: Modification_Mode_String
		19: Modification_Target_String
		20: Icons_List
		21: Icons_List_For_Menu
		22: Colors
		23: Status_String
		24: Jumppad_Storage
		25: Jumppad_Radius
		26: Kanezaka_Teleports
		27: UNO_Random
		28: Card_Colors
		29: UNO_Players
		30: UNO_Deck
		31: UNO_Help
		32: UNO_Started
		33: UNO_Looper
		34: UNO_Colorblind
		35: UNO_Inworld
		36: UNO_Info
		37: UNO_Timer
		38: Beams
		39: Drawing_Obj_Storage_Beams
		40: Skins_Check
		41: Player_Joined_Queue
		42: Game_Timer
		43: Game_Timer_Helper
		44: Moe_Position
		45: Demoted_List
		46: OffOnString
		47: Rank_Icon
		48: Game_Description
		49: Promoted_List
		50: Credits
		52: TP_Help
		53: teleportsForCurrentMap
		54: Muted_List
		55: Moe_Force
		56: Warning_List
		57: Dice_String
		58: Music_Toggle
		59: Rotate
		60: Main_Chaser
		61: rainbowColoringList
		62: matchTime
		63: actionsLog
		64: actionsLogIndexer
		65: WIP_KB_0


	player:
		0: High_Rank
		1: Mod_Rank
		2: Promoted_Rank
		3: Player_Modification
		4: Verification_Key
		5: Mod_Name_ID
		7: Scale_Prev
		8: Scale_Real
		9: Is_Crouch_On
		10: Is_Flying
		11: Target_Effect
		12: Mode_Cycle
		13: Mode_Headline
		14: Mode_Hud_ID
		15: DMG_Time
		16: Target_Tag_ID
		17: Target_Arrow_ID
		18: Protection
		19: Target_Lock
		20: Camera
		21: Scale_Hud_ID
		22: Progress_Lock
		23: Remote_Scale
		24: Mode_Description
		25: Last_Position_Facing
		26: Restricted
		27: Voice_Pitch
		28: Heaven_Strike_Radius
		29: Heaven_Strike_ID
		30: Icon_ID
		31: Ghost_Mode
		32: Slow_Projectile
		33: Progress_Stop
		34: Drawing_Obj_Info_Array
		35: Player_Title_And_Outline
		36: Player_Nameplates
		37: Is_Title_Given
		38: Index_Help
		39: Modification_Mode_Selector
		40: Modification_Scalar_Selector
		41: Target_Shortcut
		42: Auto_Respawn
		43: Icons_Info_Array
		44: Icons_Info_Copy
		45: Icons_Signal
		46: Regular_Player_Has_Title
		47: M32_Players_Nameplate
		48: NamesAndOutlines_Colors_Selector
		49: Is_Menu_Active
		50: Status_Selector
		51: Jumppad_Helper
		52: Jumppad_Entry
		53: Jumppad_Loop
		54: Jumppad_Info_Array
		55: Jumppad_Preview
		56: Camera_Info_Array
		57: Camera_Helper
		58: Camera_Position
		59: Camera_Smooth
		60: Camera_Loop
		61: Camera_LOS
		62: Camera_Target
		63: Signal
		64: Mode_Cycle_Default
		65: Spam_Cooldown
		66: UNO_Info_Array
		67: UNO_Hand
		68: UNO_Helper
		69: UNO_Ingame
		70: UNO_Loop
		71: UNO_Sorter
		72: Print
		73: Positions_For_Beams
		74: Beams_Preview_ID
		75: Beams_Selector
		76: Is_Invisible
		77: No_CD
		78: Full_Protection
		79: ExtraEffect_ID
		80: Extra10_Player
		81: Comms_Target
		82: Bot_Aggro
		83: Bot_No
		84: Bot_CD
		85: Extra17_Pos
		86: Effect_Storage
		87: Players_Global_Array
		88: Outlines_Toggle
		89: Midtown_Bonus
		90: Leash_List
		91: Leash_To
		92: Leash_Helper
		93: Leash_IDs
		94: Leash_Index
		95: Leash_Spawn
		96: safezone_List
		97: safezone_Info_Array
		98: safezone_Index
		99: safezone_Helper
		100: TP_Index
		106: Target_Select
		107: AFK_Toggle
		108: AddonSkillsToggle
		109: inAction
		110: playersUnderControl
		111: Is_Communicating
		112: WIP_KB_1
		113: WIP_KB_2
		114: WIP_KB_3
		115: WIP_KB_4
		116: WIP_KB_5
		117: WIP_KB_6
		118: WIP_KB_7
		119: WIP_KB_8
		120: WIP_KB_9
		121: WIP_KB_10
		122: WIP_KB_11
		123: WIP_KB_12

}

subroutines
{
	0: Protection
	1: Scale_Progress
	2: Hud_Elements
	3: Drawing_Objects_Preview
	4: Beams_Preview
	5: Give_Custom_Nameplate
	6: Give_Custom_Outline
	7: Jail_Leaver
	8: UNO_Draw
	9: UNO_Update_Deck
	10: UNO_Update_Hand
	11: UNO_End
	12: Info_Page_Default
	13: Info_Page_Mod
	15: Full_Protection_Toggle
	16: Clear_Status
	17: Set_Flying_At_Position
	18: Shortener
	19: ClearLog
	20: Destroy_the_keyboard
}

rule("Friendly server created by: Warloy.")
{
	event
	{
		Ongoing - Global;
	}
}
rule("Special thanks to: kwally (community management), xMaxuss (minigame-UNO), TbyCoLive")
{
	event
	{
		Ongoing - Global;
	}
}
rule("Please, contact us for any questions and lobbies: bit.ly/ow2friendly")
{
	event
	{
		Ongoing - Global;
	}
}
rule("Lastest version: January 2025 (minor code update)")
{
	event
	{
		Ongoing - Global;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load > 200;
	}

	actions
	{
		Wait(3, Abort When False);
		Small Message(All Players(All Teams), Custom String(" Anti Crash System Activated"));
		Set Slow Motion(10);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load < 100;
	}

	actions
	{
		Set Slow Motion(100);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Game_Timer_Helper[0] = Round To Integer(Match Time / 60, Down);
		If(Round To Integer(Match Time % 60, Down) <= 9);
			Global.Game_Timer_Helper[1] = Custom String("0{0}", Round To Integer(Match Time % 60, Down));
		Else;
			Global.Game_Timer_Helper[1] = Round To Integer(Match Time % 60, Down);
		End;
		Global.Game_Timer = Custom String("{0}:{1}", Global.Game_Timer_Helper[0], Global.Game_Timer_Helper[1]);
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Welcome! Thanks for hanging out and have fun! « {0} - {1}",
			Icon String(Heart), Global.Game_Timer), Null, Top, -1, 
			Color(White), 
			Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), 
			Color(White),
			Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Read the info page on your top left for details « {0} - {1}",
			Icon String(Arrow: Left), Global.Game_Timer), Null, Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White),
			Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Roles near player names - {1}", Icon String(Arrow: Right),
			Custom String(" {0} : Automod  |  No Icon: Promoted « {1} - {2}", Icon String(Halo), Icon String(Arrow: Right),
			Global.Game_Timer)), Null, Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To String and Color,
			Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{1} » {0} « {1} - {2}", Global.Credits[0], Icon String(Bolt),
			Global.Game_Timer), Null, Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To String and Color,
			Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{1} » {0} « {1} - {2}", Global.Credits[1], Icon String(Fire),
			Global.Game_Timer), Null, Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To String and Color,
			Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"{0} » Phobic slurs, Racism and Harassment of any kind are prohibited « {0} - {1}", Icon String(Skull), Global.Game_Timer),
			Null, Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"{0} » Unreasonable use of Kick and ban is a punishable offence « {0} - {1}", Icon String(Warning), Global.Game_Timer), Null,
			Top, -1, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Loop;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Music_Toggle = Workshop Setting Toggle(Custom String("Music Lobby"), Custom String("Set this lobby as a music lobby"),
			False, 0);
		Global.Current_Host = Null;
		Global.Player_Joined_Queue = Empty Array;
		"Dev Tools"
		Disable Inspector Recording;
		"Global Default"
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Music;
		Modify Global Variable(Mod_Rank, Remove From Array By Value, 0);
		Modify Global Variable(Temp_Banned, Remove From Array By Value, 0);
		"Another Defaults"
		Global.RGB_Vector = Vector(255, 0, 0);
		Global.Gravity_Helper = 0;
		Global.Gravity_Toggle = False;
		Global.Drawing_Obj_Storage = Empty Array;
		Global.Jail_List = Array(Empty Array, Empty Array, Empty Array, Empty Array);
		Global.Jail_Helper = Null;
		Global.Jumppad_Storage = Empty Array;
		Global.UNO_Players = Empty Array;
		Global.UNO_Deck = Array(Null, Null, Null, Null);
		Global.UNO_Help = Null;
		Global.UNO_Started = False;
		Global.UNO_Looper = 0;
		Global.UNO_Inworld = Array(False, Null, Null, Null);
		Global.UNO_Info = Null;
		Global.UNO_Timer = 0;
		Global.Main_Chaser = 0;
		Global.actionsLog = Empty Array;
		Global.actionsLogIndexer = Empty Array;
		Global.matchTime = Array(0, 0);
		Chase Global Variable At Rate(Main_Chaser, 99999, 0.200, None);
		Global.Promoted_List = Empty Array;
		Wait(5, Ignore Condition);
		"Assembling without skins check"
		Global.Skins_Check[0] = True;
		"Assembling with skins check"
		Global.Skins_Check[1] = False;
		If(Count Of(Global.High_Rank) < 1 || Count Of(Global.Mod_Rank) < 3 || Count Of(Global.Titles_And_Outlines) != 39 || Count Of(Global.Muted_List) < 18 || Count Of(Global.Banned_List) < 23);
			For Global Variable(Gravity_Helper, 0, 12, 1);
				Global.Gravity_Helper -= 1;
			End;
		End;
		If(Global.Music_Toggle);
			Create HUD Text(All Players(All Teams), Null, Custom String("TO MAKE A REQUEST, SEND THE SONG & ARTIST NAME TO THE CHAT"), Custom String("This is a music lobby, so no talking in MVC!"), Top, 0, Color(
				White), Color(Rose), Color(Sky Blue), Visible To, Default Visibility);
		End;
		Call Subroutine(ClearLog);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0}", Hero Icon String(Hero Of(Host Player))), Global.Music_Toggle ? Custom String("Current DJ") : Custom String("Watcher"),
			Custom String("{0} {1}", Host Player, Host Player.High_Rank && !Host Player.Heaven_Strike_ID[3] ? Icon String(Heart) : (
			Host Player.Mod_Rank && !Host Player.Promoted_Rank && !Host Player.Heaven_Strike_ID[3] ? Icon String(Halo) : Custom String(
			""))), Right, -6, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Visible To String and Color,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Global.Music_Toggle ? Custom String("────★ Dancers ★────") : Custom String("────★ Chillers ★────"), Null, Right, -5, Null, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255),
			Null, Visible To and Color, Default Visibility);
		Wait(5, Ignore Condition);
		If(Custom String("{0}", Char In String(Global.Banned_List[0], 2)) != Custom String("a") || String Length(Global.Banned_List[0])
			!= 7);
			For Global Variable(Gravity_Helper, 0, 12, 1);
				Global.Gravity_Helper -= 1;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		(Array Contains(Global.Banned_List, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned, Custom String("{0}",
			Event Player))) == False;
	}

	actions
	{
		Modify Global Variable(Player_Joined_Queue, Append To Array, Event Player);
	}
}

rule("")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Player_Joined_Queue, Event Player) == True;
	}

	actions
	{
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Abort If(Array Contains(Global.Banned_List, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned,
			Custom String("{0}", Event Player)));
		Wait Until(First Of(Global.Player_Joined_Queue) == Event Player, 9999);
		If(Is Dummy Bot(Event Player));
			Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
			Event Player.Voice_Pitch = 1;
			Wait(0.200, Ignore Condition);
			Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Null);
			Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);
			Wait Until(Has Spawned(Event Player), 9999);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On), Custom String("Talk with me"),
				Event Player, 1, Do Not Clip, Visible To Position String and Color, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Default Visibility);
			Event Player.Target_Tag_ID = Last Text ID;
			Abort;
		End;
		"Show names and pages of players"
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On && !Event Player.Is_Invisible),
			Custom String("{0} {1} {2}", Custom String("{0} {1} |", Hero Icon String(Hero Of(Event Player)), Event Player), Event Player.Mode_Cycle != -1 ? (
			Event Player.Heaven_Strike_ID[3] ? 0 : Event Player.Mode_Cycle) : Event Player.Mode_Cycle_Default,
			Event Player.Promoted_Rank ? Icon String(Arrow: Up) : Global.Rank_Icon[Event Player.Verification_Key]), Event Player, 1,
			Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Event Player.Target_Tag_ID = Last Text ID;
		"Default Variables"
		Event Player.Signal = False;
		Event Player.Is_Invisible = False;
		Event Player.High_Rank = False;
		Event Player.Mod_Rank = False;
		If(Array Contains(Global.Promoted_List, Custom String("{0}", Event Player)));
			Event Player.Promoted_Rank = True;
		Else;
			Event Player.Promoted_Rank = False;
		End;
		Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
		Event Player.Verification_Key = 0;
		Event Player.Mod_Name_ID = Array(Null, False);
		Event Player.Scale_Prev = 1;
		Event Player.Scale_Real = 1;
		Event Player.Is_Flying = False;
		Event Player.Target_Effect = Null;
		Event Player.Mode_Cycle = -1;
		Event Player.Mode_Cycle_Default = 0;
		Event Player.Mode_Headline = Custom String("Kill & Resurrection");
		Event Player.Mode_Hud_ID = Null;
		Event Player.DMG_Time = Null;
		Event Player.Target_Arrow_ID = Null;
		Event Player.Target_Lock = Custom String("--- No Target ---");
		Event Player.Camera = 0;
		Event Player.Scale_Hud_ID = Null;
		Event Player.Progress_Lock = False;
		Event Player.Remote_Scale = False;
		Event Player.Mode_Description = Null;
		Event Player.Last_Position_Facing = Array(Null, Null);
		Event Player.Voice_Pitch = 1;
		Event Player.Heaven_Strike_Radius = Null;
		Event Player.Heaven_Strike_ID = Array(Null, Null, False, False);
		Event Player.Ghost_Mode = False;
		Event Player.Slow_Projectile = False;
		Event Player.Progress_Stop = False;
		Event Player.Is_Crouch_On = False;
		Event Player.Modification_Mode_Selector = 1;
		Event Player.Modification_Scalar_Selector = 2;
		Event Player.Icon_ID = Empty Array;
		"Array: Icons_Selector, Icons_Colors_Selector, Icons_Operation"
		Event Player.Icons_Info_Array = Array(0, 11, 0);
		Event Player.Icons_Info_Copy = Array(0, 11, 0);
		Event Player.Status_Selector = 0;
		Event Player.Jumppad_Helper = 0;
		Event Player.Jumppad_Entry = Array(Null, Null, Null, Null, Null);
		Event Player.Jumppad_Loop = 0;
		"Array: Inside_Color_Selector, Outside_Color_Selector, Radius_Selector, Strength_Selector"
		Event Player.Jumppad_Info_Array = Array(8, 7, 1, 3);
		Event Player.Jumppad_Preview = Array(Null, Null);
		"Array: Color_Selector, Size_Selector, Effect_Selector, Effect_ID, Effect_ID2"
		Event Player.Drawing_Obj_Info_Array = Array(0, 0, 0, Null, Null);
		"Array: Started, Placed, ID, Player, Text, Dot, Default, "
		Event Player.Camera_Info_Array = Array(False, False, Null, Null, Null, Null, Null);
		Event Player.Camera_Helper = Null;
		Event Player.Camera_Position = Vector(0, 0, 0);
		Event Player.Camera_Smooth = 0.100;
		Chase Player Variable Over Time(Event Player, Camera_Smooth, 200, 3, None);
		Event Player.Camera_Loop = 0;
		Event Player.Camera_LOS = Empty Array;
		Event Player.Camera_Target = Custom String("Currently No Target");
		Event Player.Spam_Cooldown = 3;
		Chase Player Variable At Rate(Event Player, Spam_Cooldown, 0, 1, None);
		Event Player.UNO_Hand = Empty Array;
		Event Player.UNO_Helper = Array(Null, Null, Null, Null);
		Event Player.UNO_Loop = 0;
		Event Player.UNO_Ingame = False;
		"Array: Arrow_Pos, Draw_Cards, Black_Selector, Is_Turn, Has_Drawn, Restore, Black_Logic, Black Text"
		Event Player.UNO_Info_Array = Array(0, 0, 1, False, False, False, False, Null);
		Event Player.UNO_Sorter = Array(Null, Null, Null, Null, Null);
		Event Player.Print = 0;
		Event Player.No_CD = False;
		Event Player.Full_Protection = False;
		Event Player.AddonSkillsToggle[2] = 0;
		Event Player.Leash_IDs = Empty Array;
		Event Player.Leash_List = Empty Array;
		Event Player.Leash_To = Empty Array;
		Event Player.Leash_Helper = Null;
		Event Player.Leash_Spawn = Null;
		"Array: Position, Radius, ID_Effect, ID_Text"
		Event Player.safezone_Info_Array = Array(Null, 1.500, Null, Null);
		Event Player.safezone_List = Array(Event Player);
		Event Player.Outlines_Toggle = True;
		Event Player.Positions_For_Beams = Array(Null, Null);
		Event Player.Effect_Storage = Null;
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
		"Funky Skills"
		Event Player.AddonSkillsToggle = Array(1, 0);
		"Leash/Grab/Attach"
		Event Player.inAction = Array(False, False, False);
		Event Player.playersUnderControl = Empty Array;
		"Protection Toggle Icon"
		Create In-World Text(Filtered Array(All Players(All Teams), !(
			Current Array Element.Is_Crouch_On || Event Player.Is_Invisible || Event Player.AFK_Toggle)), 
			Custom String(
				"{0}\r\n\r\n", Event Player.Full_Protection ? Ability Icon String(Hero(Kiriko), Button(Ability 2)) : Event Player.Protection ? Ability Icon String(Hero(Baptiste), Button(Ability 2)) : Custom String(" ")
			), 
			Event Player, 0.800, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), (
			Current Array Element.inAction[0] == True || Current Array Element.inAction[1] == True || Current Array Element.inAction[2] == True)
			&& Current Array Element == Event Player), Null, Custom String("Hold {0} to clear leash/grab/attach", Input Binding String(
			Button(Ability 2))), Null, Right, 0, Null, Color(Orange), Null, Visible To String and Color, Default Visibility);
		"Is menu Active"
		Event Player.Is_Menu_Active = True;
		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(
			Player Closest To Reticle(Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)),
			Event Player.Mode_Headline, Left, 0, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Visible To String and Color,
			Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;
		Call Subroutine(Info_Page_Default);
		"Muted list"
		If(Array Contains(Global.Muted_List, Custom String("{0}", Event Player)));
			Disable Text Chat(Event Player);
			Disable Voice Chat(Event Player, True, True, True);
		End;
		Create HUD Text(Event Player, Null, 
			Array Contains(Global.Muted_List, Custom String("{0}", Event Player)) ? Custom String("\nYou are on the muted list!\nPlease Contact bit.ly/ow2friendly (all lowercase!) for further support.") : 
			Array Contains(Global.Demoted_List, Custom String("{0}", Event Player)) ? Custom String("\nYou are on the demoted list!\nPlease Contact bit.ly/ow2friendly (all lowercase!) for further support.") : 
			Array Contains(Global.Warning_List, Custom String("{0}", Event Player)) ? Custom String("\nWARNING! You have been reported in our custom mode.\nPlease Contact bit.ly/ow2friendly (all lowercase!) for further support.") :
			Custom String(" "),
			Null, Right, 15, Null, Color(Yellow), Null, None, Visible Never);
		"Jail handler"
		Wait(0.100, Ignore Condition);
		Event Player.Restricted = Array(False, False);
		If(Array Contains(Global.Jail_List[0], Custom String("{0}", Event Player)));
			Event Player.Restricted[0] = True;
			Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
			Event Player.Restricted[1] = Global.Jail_List[3][Event Player.Index_Help];
			Small Message(All Players(All Teams), Custom String("{0}", Event Player.Restricted[1]));
			Disable Text Chat(Event Player);
			Disable Voice Chat(Event Player, True, True, True);
		End;
		Wait(0.200, Ignore Condition);
		"Queue of players"
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Null);
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);

		"Sequence Completed"
		Wait Until(Has Spawned(Event Player), 99999);
		Create HUD Text(Filtered Array(All Players(All Teams), ((
			Current Array Element == Host Player && Current Array Element.Promoted_Rank) || (
			Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank) || Current Array Element.High_Rank)
			&& Current Array Element == Event Player), Null, Current Game Mode != Game Mode(Skirmish) ? Custom String(
			"Hold crouch and jump for 7 seconds to start changing skins.")
			: Custom String("Skin changer is unavailable at Skirmish Game Mode maps"), Null, Top, 10, Null, Color(Blue), Null, Visible To and String, Visible Never);
		"Set protection on player by default"
		Event Player.Protection = Workshop Setting Toggle(Custom String("Player Damage Protection"), Custom String("Automatic Enabled"),
			True, 1);
		"Set auto resurrection on player by default"
		Event Player.Auto_Respawn = True;
		"Jail handler finds escaped prisoner"
		Wait(0.010, Ignore Condition);
		If(Event Player.Restricted[0]);
			Big Message(All Players(All Teams), Custom String("{0} tried to escape the restriction", Event Player));
			Call Subroutine(Jail_Leaver);
		Else;
			Small Message(All Players(All Teams), Custom String(" Welcome {1} {0}", Event Player, Hero Icon String(Hero Of(Event Player))));
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RGB_Vector == Vector(255, 0, 0);
	}
	
	actions
	{
		Chase Global Variable Over Time(RGB_Vector, Vector(255, 255, 0), 7.5, Destination and Duration);
		Wait Until(Global.RGB_Vector == Vector(255, 255, 0), 99999);
		Chase Global Variable Over Time(RGB_Vector, Vector(0, 255, 0), 7.5, Destination and Duration);
		Wait Until(Global.RGB_Vector == Vector(0, 255, 0), 99999);
		Chase Global Variable Over Time(RGB_Vector, Vector(0, 255, 255), 7.5, Destination and Duration);
		Wait Until(Global.RGB_Vector == Vector(0, 255, 255), 99999);
		Chase Global Variable Over Time(RGB_Vector, Vector(0, 0, 255), 7.5, Destination and Duration);
		Wait Until(Global.RGB_Vector == Vector(0, 0, 255), 99999);
		Chase Global Variable Over Time(RGB_Vector, Vector(255, 0, 255), 7.5, Destination and Duration);
		Wait Until(Global.RGB_Vector == Vector(255, 0, 255), 99999);
		Chase Global Variable Over Time(RGB_Vector, Vector(255, 0, 0), 7.5, Destination and Duration);
	}
}

rule("")
{
	event
	{
		Subroutine;
		Info_Page_Default;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String(
			"         • Basic Functions •\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}",
			Custom String("- Hold Melee : Switch Heroes.\r\n         • How to use the menu •\r\n{0}", Custom String(
			"- Crouch + {0} or {1}", Input Binding String(Button(Jump)), Custom String(
			"{0} : change pages.\r\n- Crouch + shown input : perform action.\r\n         • While on this page •\r\n{1}",
			Input Binding String(Button(Interact)), Custom String("- Crouch + {0} : hide/show menu.\r\n{1}", Input Binding String(Button(
			Melee)), Custom String("- Crouch + Ultimate : set yourself as afk\r\n      (deactivates when moving/crouching).\r\n\n{0}",
			Custom String("Contact us:  bit.ly/ow2friendly  (all lowercase)\n\n"))))))), Null, Left, 1, Color(White), Color(White), Color(
			White), String, Visible Never);
		Event Player.Mode_Description = Last Text ID;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Info_Page_Mod;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Custom String("Hold {0} + {1} on\r\n    this page to hide/show menu.\r\n{2}",
			Input Binding String(Button(Crouch)), Input Binding String(Button(Melee)), Custom String(
			"Press {0} + {1} on\r\n    this page to set yourself as afk\r\n    (deactivates when moving/crouching).\n\n{2}",
			Input Binding String(Button(Crouch)), Input Binding String(Button(Ultimate)), Custom String(
			"Contact us:  bit.ly/ow2friendly  (all lowercase)\n\n"))), Null, Left, 1, Color(White), Color(White), Color(White), String,
			Visible Never);
		Event Player.Mode_Description = Last Text ID;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Credits = Array(Custom String("Coded with {0} by Warloy et al", Icon String(Heart)), Custom String(
			"Community managed with {0} by kwally", Icon String(Heart)));
		Global.Rank_Icon = Array(Custom String(""), Icon String(Halo), Icon String(Heart), Custom String(""));
		Global.OffOnString = Array(Custom String("Off"), Custom String("On"));
		Global.Dice_String = Array(Custom String("Heads"), Custom String("Tails"), Custom String("Rock"), Custom String("Paper"),
			Custom String("Scissors"));
		Global.Modification_Mode_String = Array(Custom String("Damage"), Custom String("Speed"), Custom String("Knockback"), Custom String(
			"Gravity"));
		Global.Modification_Target_String = Array(Custom String("Yourself"), Custom String("Target"));
		Global.Drawing_Obj_Effects = Array(Custom String("Sphere"), Custom String("Sparkles"), Custom String("Light Shaft"), Custom String(
			"Orb"), Custom String("Ring"), Custom String("Cloud"), Custom String("Good Aura"), Custom String("Bad Aura"));
		Global.Drawing_Obj_Size = Array(0.050, 0.070, 0.150, 0.400, 0.700, 1, 1.700, 2, 3, 4, 6, 8, 10);
		Global.Icons_List = Array(Custom String("Bolt"), Custom String("Happy"), Custom String("Moon"), Custom String("Halo"),
			Custom String("Trashcan"), Custom String("Dizzy"), Custom String("Sad"), Custom String("Poison"), Custom String("Warning"),
			Custom String("Stop"), Custom String("Spiral"), Custom String("Radioactive"), Custom String("Skull"), Custom String("Recycle"),
			Custom String("No"), Custom String("Eye"), Custom String("Asterisk"));
		Global.Icons_List_For_Menu = Array(Icon String(Bolt), Icon String(Happy), Icon String(Moon), Icon String(Halo), Icon String(
			Trashcan), Icon String(Dizzy), Icon String(Sad), Icon String(Poison 2), Icon String(Warning), Icon String(Stop), Icon String(
			Spiral), Icon String(Radioactive), Icon String(Skull), Icon String(Recycle), Icon String(No), Icon String(Eye), Icon String(
			Asterisk));
		Global.Colors = Array(Color(White), Color(Black), Color(Gray), Color(Blue), Color(Sky Blue), Color(Turquoise), Color(Aqua), Color(
			Green), Color(Lime Green), Color(Yellow), Color(Orange), Color(Red), Color(Rose), Color(Purple), Color(Violet), Custom Color(
			139, 69, 19, 255));
		Global.Status_String = Array(Custom String("Knocked Down"), Custom String("Stunned"), Custom String("Frozen"), Custom String(
			"Burning"), Custom String("Hacked"));
		Global.Jumppad_Radius = Array(0.750, 1.750, 3, 6);
		Global.Kanezaka_Teleports = Array(Vector(-17.860, 10.500, 17.910), Vector(-1.060, 9, -46.180), Vector(-44.150, 11, -12.760),
			Vector(-28.720, 4, 41.270));
		Global.Beams = Array(Custom String("Good Beam"), Custom String("Bad Beam"), Custom String("Grapple Beam"));
		"Uno Cards colors: 0=black, 1=red, 2=green, 3=blue, 4=yellowUno Cards meaning: 0-9=normal, 10=skip, 11=reverse, 12=draw2, 13=pick, 14=draw4"
		Global.UNO_Random = Array(0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4);
		Global.Card_Colors = Array(Color(Black), Color(Red), Color(Green), Color(Blue), Color(Yellow));
		Global.UNO_Colorblind = Array(Custom String("D"), Custom String("R"), Custom String("G"), Custom String("B"), Custom String("Y"));
		Global.Rotate = Array(Icon String(Arrow: Up), Icon String(Arrow: Right), Icon String(Arrow: Down), Icon String(Arrow: Left));
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Titles_And_Outlines = Array(
			Array(Custom String("Warloy"), 
			Custom Color(235, 153, 0, 255),
			Custom String("Coup de grâce"),
			Custom String("Gott ist code")),
			
			Array(Custom String("kwally"), 
			Custom String("Fading"), 
			80, 0, 0, 255, 0, 0, 
			Custom String("Ｋｗａｌｌｙ"),
			Custom String("PHD in Yapanese"),
			Custom String("ї ∂นҫӄїภғ Һαҭѡ ұσน")),

			Array(Custom String("Bendude1000"),
			Custom Color(155, 1, 63, 255),
			Custom String("")),
			
			Array(Custom String("xskĳ"),
			Custom String("Rainbow"),
			Custom String("ŠKÌJ")),

			Array(Custom String("S0undw4v3"),
			Custom Color(237, 26, 77, 255),
			Custom String("{0} Arc Trooper Soundy {0}", Ability Icon String(Hero(Reaper), Button(Ability 2))),
			Custom String("{0} Enjoyer of Books and Lore {0}", Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)))),
			
			Array(Custom String("Xenolysith"),
			Custom Color(241, 196, 15, 255),
			Custom String("Stargazer"),
			Custom String("Rattenkönig")),
			
			Array(Custom String("Toguro"),
			Color(Black),
			Custom String("L'enfer du dragon volant aux 103 passions"),
			Custom String("Fléau des Astres")),
			
			Array(Custom String("AvatarGod"),
			Color(Red),
			Custom String("ＡｖａｔａｒＧｏｄ")),
			
			Array(Custom String("Moe Szyslak"),
			Custom Color(161, 176, 236, 255),
			Custom String("Moe Szyslak")),

			Array(Custom String("Lostshadow"),
			Custom String("Rainbow"),
			Custom String("♡ Gh0stface's little brother ♡"),
			Custom String("{0} ☆ * .˚ ♡ ㄥӨVΣㄥY ♡ ˚. * ☆ {0}", Ability Icon String(Hero(Illari), Button(Ultimate)))),

			Array(Custom String("Tedz"),
			Custom Color(0, 255, 188, 255),
			Custom String("♡ TEDDY BEAR ♡"),
			Custom String("{0} Spark Gengu Squad {0}", Ability Icon String(Hero(Genji), Button(Ultimate)))),
			
			Array(Custom String("Bratty"),
			Custom String("Rainbow"),
			Custom String("{0} PARTNERS IN CRIME {0}", Icon String(Dizzy)),
			Custom String("☆ BPD BADDIE ☆")),
			
			Array(Custom String("TURBOMURO"),
			Custom Color(255, 255, 255, 255),
			Custom String("{0} HIGHSPEED {0}", Ability Icon String(Hero(Genji), Button(Ability 1))),
			Custom String("{0} ARMY OF TWO {0}", Ability Icon String(Hero(Ramattra), Button(Ability 1)))),

			Array(Custom String("Visual"),
			Color(Black),
			Custom String("† Kwally's kitten †")),
			
			Array(Custom String("Stinky"),
			Custom Color(62, 253, 255, 255),
			Custom String("{0}  PARTNERS IN CRIME  {0}", Icon String(Dizzy)),
			Custom String("{0}  ARMY OF TWO  {0}", Ability Icon String(Hero(Ramattra), Button(Ability 1)))),
			
			Array(Custom String("Leestick"),
			Custom Color(160, 32, 240, 255),
			Custom String("{0} gloom strider {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))),
			Custom String("{0} leafweaver {0}", Ability Icon String(Hero(Lifeweaver), Button(Ability 2)))),
			
			Array(Custom String("Zxtyi"),
			Color(Black),
			Custom String("{0}  Womp Womp  {0}", Icon String(Heart)),
			Custom String("†   RHCP Enjoyer   †", Icon String(Heart))),
			
			Array(Custom String("ĨŹĂŃĂMĨ"),
			Color(Black),
			Custom String("{0} ☆ 天照大御神 ☆ {0}", Ability Icon String(Hero(Kiriko), Button(Secondary Fire)))),
			
			Array(Custom String("Ɛthereal"),
			Custom String("Rainbow"),
			Custom String("{0} Fürchtet euch, fürchtet euch nicht {0}", Ability Icon String(Hero(Reinhardt), Button(Ultimate))),
			Custom String("{0} Sigma's Starlight {0}", Ability Icon String(Hero(Sigma), Button(Ultimate)))),
			
			Array(Custom String("GHOSTIEǃ"),
			Custom String("Rainbow"),
			Custom String("♡ Lostshadow's big sister ♡"),
			Custom String("{0} ﾒ’0 THE WEEKND'S VERSION ﾒ’0 {0}", Ability Icon String(Hero(Lúcio), Button(Ultimate)))),
			
			Array(Custom String("ByeFever"),
			Custom Color(157, 29, 16, 255),
			Custom String("{0} Ｔｈｅ   ｓｗｅｅｔｅｓｔ   ｐｏｉｓｏｎ {0}", Icon String(Poison)),
			Custom String("♡ Ｐａｎｄａｒｉｋｏ ♡")),
			
			Array(Custom String("Alex"),
			Custom Color(139, 0, 0, 255),
			Custom String(" ")),
			
			Array(Custom String("ĴŐĶĔŔ"),
			Color(Black),
			Custom String("{0} ☆ おばけ ☆ {0}", Ability Icon String(Hero(Genji), Button(Ultimate)))),
			
			Array(Custom String("SapphicWitch"),
			Custom Color(255, 182, 193, 255),
			Custom String("{0} Tiny Mercy collector {0}", Ability Icon String(Hero(Moira), Button(Ultimate))),
			Custom String("{0} Moicy on top {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))),

			Array(Custom String("MOOOUSH"),
			Color(Black),
			Custom String("{0} 乂 {0}", Icon String(Ring Thick))),
			
			Array(Custom String("godly"),
			Custom Color(255, 0, 0, 255),
			Custom String("{0} ＢＡＳＥＤ {0}", Ability Icon String(Hero(Reaper), Button(Ultimate))),
			Custom String("† ｓｈａｂｒｉｒｉ †")),

			Array(Custom String("Avaløn"),
			Custom Color(204, 204, 255, 255),
			Custom String("")),

			Array(Custom String("pancakes"),
			Custom String("Rainbow"),
			Custom String("{0} heat + bread + time = toast {0}", Ability Icon String(Hero(Illari), Button(Ultimate))),
			Custom String("{0} Ｗａｋｅ Ｕｐ {0}", Ability Icon String(Hero(Ana), Button(Ability 1)))),
			
			Array(Custom String("Viktorski"),
			Color(Yellow),
			Custom String("Viktorski")),

			Array(Custom String("PurpSkrrt"),
			Custom Color(221, 175, 255, 255),
			Custom String("【‧*.˚•☆『 PurpSkrrt™ 』☆•˚.*‧】")),
			
			Array(Custom String("tsunde"),
			Custom String("Rainbow"),
			Custom String("{0} Follow me ~ . ‧ ˚ ‧ {0}", Ability Icon String(Hero(Ana), Button(Ability 1))),
			Custom String("{0} ŦØƤ500 ΛỮŦØ~ΛŇǤ€Ł Λ฿ỮŞ€Ř ツ {0}", Ability Icon String(Hero(Reinhardt), Button(Ultimate)))),

			Array(Custom String("ÆROLEAƑ"),
			Custom Color(153, 0, 0, 255),
			Custom String("{0} RYŪ GΛ WΛGΛ TΣKI WΘ KURΛU! {0}", Ability Icon String(Hero(Hanzo), Button(Ultimate))),
			Custom String("{0} WHΛT'S YOUR NΣXT MOVΣ? {0}", Ability Icon String(Hero(Genji), Button(Primary Fire)))),

			Array(Custom String("Root"), 
			Custom String("Fading"), 
			18, 10, 143, 244, 0, 0, 
			Custom String("The demon is always in the details"), 
			Custom String("Let's burn this place to the ground")), 

			Array(Custom String("zovha"),
			Custom Color(0, 0, 0, 255),
			Custom String("♡")),

			Array(Custom String("Hoxy"),
			Custom String("Rainbow"),
			Custom String("AYAYA")),

			Array(Custom String("ƑĿUƑƑƔMƐŴ"),
			Custom Color(178, 102, 255, 255),
			Custom String("{0}【Ｗａｌｌ　Ｄｅｍｏｎ】{0}", Ability Icon String(Hero(D.Va), Button(Ability 1))),
			Custom String("{0}【Ｇｕａｒｄｉａｎ　Ａｎｇｅｌ】{0}", Ability Icon String(Hero(Kiriko), Button(Ultimate)))),
			
			Array(Custom String("Shady"),
			Custom String("Rainbow"),
            Custom String("{0} I love when you count me out {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))),
			Custom String("{0} You gon' think about me when i'm gone {0}", Icon String(Dizzy))),

			Array(Custom String("cal"),
			Custom Color(128, 0, 0, 255),
			Custom String("E-girl hunter"),
			Custom String("Looking for a mercy pocket")),

			Array(Custom String("NightShield"),
			Custom String("Rainbow"),
			Custom String("{0} Go push a rock up a hill {0}", Ability Icon String(Hero(Sigma), Button(Ability 2))))
		);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		For Player Variable(Event Player, Players_Global_Array, 0, Count Of(Global.Titles_And_Outlines), 1);
			If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[Event Player.Players_Global_Array][0]);
				If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0]);
					Call Subroutine(Set_Flying_At_Position);
				End;
				If(Global.Titles_And_Outlines[Event Player.Players_Global_Array][1] == Custom String("Fading"));
					Event Player.Player_Title_And_Outline = Array(Global.Titles_And_Outlines[Event Player.Players_Global_Array][0],
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][1], 
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 2, 3), 
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 5, 3), 
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 8, 2));
				Else;
					Event Player.Player_Title_And_Outline = Array(Global.Titles_And_Outlines[Event Player.Players_Global_Array][0],
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][1], 
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 2, Count Of(Global.Titles_And_Outlines[Event Player.Players_Global_Array])));
				End;
				Start Rule(Give_Custom_Nameplate, Do Nothing);
				Start Rule(Give_Custom_Outline, Do Nothing);
				Event Player.Is_Title_Given = True;
				Abort;
			End;
			Wait(0.020, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Give_Custom_Nameplate;
	}

	actions
	{
		Abort If Condition Is False;
		Disable Nameplates(Event Player, All Players(All Teams));
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow"));
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Event Player.Player_Title_And_Outline[2][Round To Integer(Total Time Elapsed / 30, Down) % Count Of(
				Event Player.Player_Title_And_Outline[2])], Event Player, 0.980, Clip Against Surfaces, Visible To Position and Color,
				Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Visible Never);
		Else If(Event Player.Player_Title_And_Outline[1] == Custom String("Fading"));
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Event Player.Player_Title_And_Outline[4][Round To Integer(Global.Main_Chaser / 6, Down) % Count Of(
				Event Player.Player_Title_And_Outline[4])], Event Player, 0.980, Clip Against Surfaces, Visible To Position and Color,
				Custom Color(Round To Integer((Event Player.Player_Title_And_Outline[2][0] + Event Player.Player_Title_And_Outline[3][0])
				/ 2 + Sine From Radians(Global.Main_Chaser) * ((
				Event Player.Player_Title_And_Outline[2][0] - Event Player.Player_Title_And_Outline[3][0]) / 2), Down), Round To Integer((
				Event Player.Player_Title_And_Outline[2][1] + Event Player.Player_Title_And_Outline[3][1]) / 2 + Sine From Radians(
				Global.Main_Chaser) * ((Event Player.Player_Title_And_Outline[2][1] - Event Player.Player_Title_And_Outline[3][1]) / 2), Down),
				Round To Integer((Event Player.Player_Title_And_Outline[2][2] + Event Player.Player_Title_And_Outline[3][2])
				/ 2 + Sine From Radians(Global.Main_Chaser) * ((
				Event Player.Player_Title_And_Outline[2][2] - Event Player.Player_Title_And_Outline[3][2]) / 2), Down), 255), Visible Never);
		Else;
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Event Player.Player_Title_And_Outline[2][Round To Integer(Total Time Elapsed / 30, Down) % Count Of(
				Event Player.Player_Title_And_Outline[2])], Event Player, 0.980, Clip Against Surfaces, Visible To and Position,
				Event Player.Player_Title_And_Outline[1], Visible Never);
		End;
		Event Player.Player_Nameplates = Last Text ID;
		Wait(30, Abort When False);
		Loop;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Give_Custom_Outline;
	}

	actions
	{
		Abort If Condition Is False;
		Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), !Current Array Element.Outlines_Toggle), False,
			Color(White), Always);
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow"));
			Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), Current Array Element.Outlines_Toggle), True,
				Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Always);
			Wait(0.200, Ignore Condition);
			Loop;
		End;
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Fading"));
			Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), Current Array Element.Outlines_Toggle), True,
				Custom Color(Round To Integer((Event Player.Player_Title_And_Outline[2][0] + Event Player.Player_Title_And_Outline[3][0])
				/ 2 + Sine From Radians(Global.Main_Chaser) * ((
				Event Player.Player_Title_And_Outline[2][0] - Event Player.Player_Title_And_Outline[3][0]) / 2), Down), Round To Integer((
				Event Player.Player_Title_And_Outline[2][1] + Event Player.Player_Title_And_Outline[3][1]) / 2 + Sine From Radians(
				Global.Main_Chaser) * ((Event Player.Player_Title_And_Outline[2][1] - Event Player.Player_Title_And_Outline[3][1]) / 2), Down),
				Round To Integer((Event Player.Player_Title_And_Outline[2][2] + Event Player.Player_Title_And_Outline[3][2])
				/ 2 + Sine From Radians(Global.Main_Chaser) * ((
				Event Player.Player_Title_And_Outline[2][2] - Event Player.Player_Title_And_Outline[3][2]) / 2), Down), 255), Always);
			Wait(0.200, Ignore Condition);
			Loop;
		Else;
			Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), Current Array Element.Outlines_Toggle), True,
				Event Player.Player_Title_And_Outline[1], Always);
			Wait(5, Ignore Condition);
			Loop;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Is_Title_Given || Event Player.Regular_Player_Has_Title) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		Disable Nameplates(Event Player, All Players(All Teams));
		Wait(30, Abort When False);
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Automatic High Rank | to be deprecated "
		Global.High_Rank = Array(Custom String("Moe Szyslak"));
		"Automatic Mod"
		Global.Mod_Rank = Array(
			Custom String("Warloy"), Custom String("kwally"), Custom String("Root"));
		"Warning List"
		Global.Warning_List = Array(Custom String(" --- "));
		"Muted List"
		Global.Muted_List = Array(
			Custom String("DJBASTIOON"), Custom String("DJBastion"), Custom String("Djbastion"), Custom String("DJBASTION!"), Custom String("MrBastion"),
			Custom String("DjBeep"), Custom String("DJBASTION"), Custom String("ĹȄȀƑ"), Custom String("Loxy"), Custom String("rƗkku"),
			Custom String("DjBastion"), Custom String("BeepMatic"), Custom String("royalty"), Custom String("lila"), Custom String("YVL"),
			Custom String("Ghost"), Custom String("NotToxic"), Custom String("River"), Custom String("dethkult"));
		"Demoted List"
		Global.Demoted_List = Array(Custom String("ŖǞƔƐŊǃ"), Custom String("lain"));
		"Automatic Ban"
		Global.Banned_List = Array(Custom String("xMaxuss"), Custom String("HYUA"), Custom String("BebeUwU"), 
			Custom String("HOÑEYBEE"), Custom String("Dead"), Custom String("chii"), Custom String("WÃFFLĚS"), Custom String("CuddleBunny"), 
			Custom String("ǃSHAY"), Custom String("Axem"), Custom String("BlueSky"), Custom String("Leafar"), Custom String("pupi"), 
			Custom String("xhamelly"), Custom String("ǁHafocfugelǁ"), Custom String("NOCTǃS"), Custom String("dior"), Custom String("pearls"),
			Custom String("SKARAB"), Custom String("LUŊAƑREƔA"), Custom String("SĦĨŊSOȔǃ"), Custom String("Nÿx"), Custom String("ŊǾCTIS"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Verification_Key == 0;
		Has Spawned(Event Player) == True;
		(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String("{0}",
			Event Player))) == True;
	}

	actions
	{
		Wait(0.01, Ignore Condition);
		If(Array Contains(Global.Promoted_List, Custom String("{0}", Event Player)));
			Event Player.Promoted_Rank = True;
		End;
		If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)));
			Event Player.High_Rank = True;
			Event Player.Verification_Key = 2;
			If(Event Player != Host Player);
				Skip If(Is Dummy Bot(Event Player), 1);
				Call Subroutine(Hud_Elements);
			End;
		Else If(Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)));
			Skip If(Array Contains(Global.Promoted_List, Event Player) || Event Player.Promoted_Rank || Event Player == Host Player, 1);
			Call Subroutine(Shortener);
			Event Player.Mod_Rank = True;
			Event Player.Verification_Key = 1;
			If(Event Player != Host Player);
				Skip If(Not(Event Player.Promoted_Rank) || Event Player.Restricted[0], 1);
				Big Message(All Players(All Teams), Custom String("{0} got promoted!", Event Player));
				Call Subroutine(Hud_Elements);
			End;
		End;
		If(Event Player.Heaven_Strike_ID[3]);
			Event Player.Verification_Key = 3;
		End;
		Event Player.Is_Menu_Active = True;
		If(Event Player.Is_Flying);
			Event Player.Is_Flying = False;
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;
		Event Player.Player_Modification[0] = 100;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		Event Player.Mode_Cycle = 0;
		Event Player.Mode_Cycle_Default = -1;
		Event Player.Modification_Mode_Selector = 0;
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy HUD Text(Event Player.Mode_Hud_ID);
		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
			Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
			Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color, Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;
		If(Event Player.Promoted_Rank || !(Event Player.High_Rank || Event Player.Mod_Rank));
			Call Subroutine(Info_Page_Default);
		Else;
			Call Subroutine(Info_Page_Mod);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
	}

	actions
	{
		Abort If(Array Contains(Global.Banned_List, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned,
			Custom String("{0}", Event Player)));
		If(!(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String("{0}",
			Event Player))));
			Skip If(Array Contains(Global.Demoted_List, Custom String("{0}", Event Player)) || Array Contains(Global.Muted_List, Custom String(
				"{0}", Event Player)), 3);
			Modify Global Variable(Mod_Rank, Append To Array, Custom String("{0}", Host Player));
			Modify Global Variable(Promoted_List, Append To Array, Custom String("{0}", Host Player));
			Event Player.Promoted_Rank = True;
		End;
		Destroy HUD Text(Event Player.Mod_Name_ID[0]);
		Skip If(Global.Current_Host == Null || Array Contains(Global.Demoted_List, Custom String("{0}", Global.Current_Host))
			|| Array Contains(Global.Muted_List, Custom String("{0}", Global.Current_Host)), 2);
		Global.Current_Host.Mod_Name_ID[1] = True;
		Wait(0.010, Ignore Condition);
		Global.Current_Host = Event Player;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mod_Name_ID[1] == True;
	}

	actions
	{
		Call Subroutine(Hud_Elements);
		Event Player.Mod_Name_ID[1] = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.High_Rank == False;
		Event Player.Mod_Rank == True;
		Event Player.Verification_Key == 1;
		Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)) == False;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} got demoted!", Event Player));
		Event Player.Mod_Rank = False;
		Event Player.Verification_Key = 0;
		Event Player.Is_Menu_Active = True;
		Event Player.Mode_Cycle = -1;
		Event Player.Mode_Cycle_Default = 0;
		If(Event Player.Is_Flying);
			Event Player.Is_Flying = False;
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;
		Event Player.Modification_Mode_Selector = 1;
		Event Player.Player_Modification[0] = 100;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy HUD Text(Event Player.Mode_Hud_ID);
		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(
			Player Closest To Reticle(Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)),
			Event Player.Mode_Headline, Left, 0, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color,
			Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;
		Call Subroutine(Info_Page_Default);
		Destroy HUD Text(Event Player.Mod_Name_ID[0]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 0 || Event Player.Mode_Cycle_Default == 0) == True;
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Melee))) == True;
		Event Player.UNO_Ingame == False;
		Array Contains(Global.UNO_Players, Event Player) == False;
	}

	actions
	{
		Wait(0.750, Abort When False);
		"Menu toggle"
		If(Event Player.Is_Menu_Active);
			Event Player.Is_Menu_Active = False;
			Destroy HUD Text(Event Player.Mode_Description);
			Destroy HUD Text(Event Player.Mode_Hud_ID);
			Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
			Small Message(Event Player, Custom String(" Menu OFF {0}", Icon String(X)));
			Destroy Effect(Event Player.Target_Effect);
			Event Player.Target_Effect = Null;
			Destroy Icon(Event Player.Target_Arrow_ID);
			Event Player.Target_Arrow_ID = Null;
			If(Event Player.High_Rank || Event Player.Mod_Rank);
				Event Player.Mode_Cycle = 0;
			Else;
				Event Player.Mode_Cycle_Default = 0;
			End;
		Else;
			Small Message(Event Player, Custom String(" Menu ON {0}", Icon String(Plus)));
			Event Player.Is_Menu_Active = True;
			Event Player.Mode_Headline = Custom String("Info Page");
			If(Event Player.High_Rank || Event Player.Mod_Rank);
				Event Player.Mode_Cycle = 0;
				Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
					Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
					Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color, Visible Never);
			Else;
				Event Player.Mode_Cycle_Default = 0;
				Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(
					Player Closest To Reticle(Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)),
					Event Player.Mode_Headline, Left, 0, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color,
					Visible Never);
			End;
			Event Player.Mode_Hud_ID = Last Text ID;
			If(Event Player.Promoted_Rank || !(Event Player.High_Rank || Event Player.Mod_Rank));
				Call Subroutine(Info_Page_Default);
			Else;
				Call Subroutine(Info_Page_Mod);
			End;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Set_Flying_At_Position;
	}

	actions 
	{
		Event Player.Restricted[1] = 1;
		Event Player.Bot_CD = 10;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Wait Until(Event Player.Bot_CD == 0, 9999);
		Event Player.Bot_CD = 12;
		Event Player.Restricted[1] = 0;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Wait Until(Event Player.Bot_CD == 0, 9999);
		If(Event Player.Heaven_Strike_ID[100]);
			Enable Text Chat(Event Player);
			Enable Voice Chat(Event Player);
		Else;
			Event Player.Mode_Cycle = 0;
			Event Player.Restricted[1] = 1;
			Event Player.Auto_Respawn = 0;
			Event Player.AddonSkillsToggle[0] = 0;
			Event Player.Last_Position_Facing[0] = Evaluate Once(Position Of(Event Player));
			Disable Built-In Game Mode Respawning(Event Player);
			Start Forcing Player Position(Event Player, Event Player.Last_Position_Facing[0], True);
			Event Player.Player_Title_And_Outline = Empty Array;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Hud_Elements;
	}

	actions
	{
		Destroy HUD Text(Event Player.Mod_Name_ID[0]);
		If(Entity Exists(Event Player));
			Skip If(Event Player.Heaven_Strike_ID[2] || (Event Player.Mod_Rank && !Event Player.Promoted_Rank), 2);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} {2}", Hero Icon String(Hero Of(Event Player)),
				Event Player, Event Player.Promoted_Rank ? Custom String("") : Global.Rank_Icon[Event Player.Verification_Key]), Right,
				Event Player.Promoted_Rank ? -2 : (Event Player.Verification_Key + 2) * -1, Null, Null, Color(White), Visible To and String,
				Default Visibility);
			Event Player.Mod_Name_ID[0] = Last Text ID;
		Else;
			Destroy In-World Text(Event Player.Target_Tag_ID);
			Destroy HUD Text(Event Player.Mod_Name_ID[0]);
			Destroy HUD Text(Event Player.Mode_Hud_ID);
			Destroy HUD Text(Event Player.Mode_Description);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Restricted[0] == False;
		Event Player.Restricted[1] == False;
		Is Alive(Event Player) == True;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Abort If(Is True For Any(
			Array(
			Has Status(Event Player, Knocked Down),
			Has Status(Event Player, Hacked), 
			Has Status(Event Player, Frozen), 
			Has Status(Event Player, Burning), 
			Has Status(Event Player, Stunned)), Current Array Element == Event Player)
			);
		Wait(0.500, Abort When False);
		Cancel Primary Action(Event Player);
		Event Player.Last_Position_Facing[0] = Position Of(Event Player);
		Event Player.Last_Position_Facing[1] = Facing Direction Of(Event Player);
		Detach Players(Event Player);
		Filtered Array(All Players(All Teams), Current Array Element.inAction[1] == True && Array Contains(
			Event Player.playersUnderControl, Current Array Element)).inAction[1] = False;
		Set Player Allowed Heroes(Event Player, Filtered Array(All Heroes, Current Array Element != Hero Of(Event Player)));
		Wait(0.250, Ignore Condition);
		Set Player Allowed Heroes(Event Player, All Heroes);
		Wait Until(Has Spawned(Event Player) == True, 99999);
		Teleport(Event Player, Event Player.Last_Position_Facing[0]);
		Set Facing(Event Player, Event Player.Last_Position_Facing[1], To World);
		Event Player.inAction[1] = False;
		Event Player.playersUnderControl = Empty Array;
		Event Player.Last_Position_Facing[0] = Null;
		Event Player.Last_Position_Facing[1] = Null;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Restricted[0] == False;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Wait(0.500, Abort When False);
		If(Event Player.Protection == False);
			Event Player.Protection = True;
		Else If(Event Player.Protection);
			Event Player.Protection = False;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Protection == True;
	}

	actions
	{
		Abort If(Has Spawned(Event Player) != True);
		Call Subroutine(Protection);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Protection == False;
	}

	actions
	{
		Abort If(Has Spawned(Event Player) != True);
		Call Subroutine(Protection);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Skip If((Event Player.High_Rank || Event Player.Mod_Rank) == False, 4);
		Create Effect(Event Player, Good Aura, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1,
			Visible To Position and Radius);
		Event Player.Target_Effect = Last Created Entity;
		Create Icon(Event Player, Player Closest To Reticle(Event Player, All Teams), Arrow: Down, Visible To and Position, Color(White),
			False);
		Event Player.Target_Arrow_ID = Last Created Entity;
		Event Player.Is_Crouch_On = True;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == False;
	}

	actions
	{
		Destroy Icon(Event Player.Target_Arrow_ID);
		Destroy Effect(Event Player.Target_Effect);
		Event Player.Target_Effect = Null;
		Event Player.Target_Arrow_ID = Null;
		Event Player.Is_Crouch_On = False;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crouch_On == True;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Is_Menu_Active == True;
		Event Player.Is_Flying == False;
		Event Player.UNO_Ingame == False;
		Event Player.Restricted[1] == False;
	}

	actions
	{
		If(Event Player.High_Rank || Event Player.Mod_Rank);
			Event Player.Mode_Cycle_Default = -1;
			If(Is Button Held(Event Player, Button(Interact)));
				If(Event Player.Mode_Cycle >= 36);
					Event Player.Mode_Cycle = 0;
				Else;
					Event Player.Mode_Cycle += 1;
				End;
			Else If(Is Button Held(Event Player, Button(Jump)));
				If(Event Player.Mode_Cycle <= 0);
					Event Player.Mode_Cycle = 36;
				Else;
					Event Player.Mode_Cycle -= 1;
				End;
			End;
		Else;
			Event Player.Mode_Cycle = -1;
			If(Is Button Held(Event Player, Button(Interact)));
				If(Event Player.Mode_Cycle_Default >= 17);
					Event Player.Mode_Cycle_Default = 0;
				Else;
					Event Player.Mode_Cycle_Default += 1;
				End;
			Else If(Is Button Held(Event Player, Button(Jump)));
				If(Event Player.Mode_Cycle_Default <= 0);
					Event Player.Mode_Cycle_Default = 17;
				Else;
					Event Player.Mode_Cycle_Default -= 1;
				End;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crouch_On == True;
		Event Player.Is_Menu_Active == True;
		Event Player.Restricted[1] == False;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(
			Event Player, Button(Reload)) || Is Button Held(Event Player, Button(Ultimate)) || Is Button Held(Event Player, Button(
			Ability 1)) || Is Button Held(Event Player, Button(Ability 2)) || Is Button Held(Event Player, Button(Melee))) == True;
	}

	actions
	{
		Event Player.Signal = True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Mode_Description != Null;
		Event Player.Is_Menu_Active == True;
		Event Player.UNO_Ingame == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
		If(Event Player.Mode_Cycle == 0);
			Event Player.Mode_Headline = Custom String("Info Page");
			If(Event Player.Promoted_Rank);
				Call Subroutine(Info_Page_Default);
			Else;
				Call Subroutine(Info_Page_Mod);
			End;
		Else If(Event Player.Mode_Cycle == 1);
			Event Player.Mode_Headline = Custom String("Heal | Kill | Resurrection");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Heal | Resurrect Target\r\n{1} : Kill Target\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : Kill | Rez Yourself\r\n{1}", Input Binding String(Button(Ultimate)),
				Custom String("{0} : Set Auto-Respawn, yourself\r\n{1}", Input Binding String(Button(Ability 2)), Custom String(
				"Reload : Set Auto-Respawn, Non-mod target\r\n\n{0}", Custom String(
				"Current Auto-Respawn Settings: \r\n[You: {0}, Target: {1}]",
				Event Player.Auto_Respawn ? Global.OffOnString[1] : Global.OffOnString[0], Player Closest To Reticle(Event Player, All Teams)
				.Auto_Respawn ? Global.OffOnString[1] : Global.OffOnString[0])))))), Null, Left, 1, Color(White), Color(White), Color(White),
				String, Visible Never);
		Else If(Event Player.Mode_Cycle == 2);
			Event Player.Mode_Headline = Custom String("Teleport");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Teleport You to Target\r\n{1} : Teleport Target To You\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Teleport Target Back To Spawn\r\n{1} : Target Faces you\r\n\r\n{2}", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Ability 2)), Custom String(
				"Destination Marker for Short Hop is shown\r\n   on this page while crouching.\r\nCrouch + Ability 1 : Short Hop")))), Null,
				Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 3);
			Event Player.Mode_Headline = Custom String("Status Effect");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Apply Status to Target\r\n{1} : Remove Status from Target\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Apply/Remove Status: yourself\r\nReload : Quick Cleanse: Yourself\r\n{1}", Input Binding String(Button(Ability 2)),
				Custom String("{0} : Cycle Status\r\n\nCurrently Selected Status:\r\n[ {1} ]", Input Binding String(Button(Ultimate)),
				Global.Status_String[Event Player.Status_Selector])))), Null, Left, 1, Color(White), Color(White), Color(White), String,
				Visible Never);
		Else If(Event Player.Mode_Cycle == 4);
			Event Player.Mode_Headline = Custom String("Protection");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give Target Immunity\r\n{1} : Revoke Target Immunity\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Toggle Full Protection (self) [{1}]\n{2}", Input Binding String(Button(
				Ultimate)), Event Player.Full_Protection ? Global.OffOnString[1] : Global.OffOnString[0], Custom String("{0} : Grant Full Protection (To target)", Input Binding String(Button(
				Ability 2)))))), Null, Left, 1, Color(White),
				Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 5);
			Event Player.Mode_Headline = Custom String("Outlines & names");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give Outline To Target\r\n{1} : Choose Color\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : Give Outline To Yourself\r\n{1} : Remove Outline from Yourself\r\n{2}",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), Custom String(
				"Reload : Remove Outline from Target\r\nMelee : Toggle Outline Visibility [{0}]",
				Event Player.Outlines_Toggle ? Global.OffOnString[1] : Global.OffOnString[0])))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 6);
			Event Player.Mode_Headline = Custom String("Jumppads");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Create Jumppad With Current Settings\r\n{1} : Delete previous Jumppad\r\n{2}", Input Binding String(Button(
				Primary Fire)), Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Cycle Color of inner ring\r\nUltimate : Cycle Color of outer ring\r\n{1}", Input Binding String(Button(Ability 1)),
				Custom String("{0} : Cycle Jump strength\r\nReload : Cycle Radius\r\n{1}", Input Binding String(Button(Ability 2)),
				Custom String(
				"Melee : Delete All Jumppads\r\n\nCurrent Strength: {0}\r\nOnly placeable on the ground.\r\nCrouch to stop bouncing.", (
				Event Player.Jumppad_Info_Array[3] + 1) * 5))))), Null, Left, 1, Color(White), Color(White), Color(White), String,
				Visible Never);
		Else If(Event Player.Mode_Cycle == 7);
			Event Player.Mode_Headline = Custom String("Flying | Global Gravity");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Space Gravity (Only Host)\r\n{1} : Normal Gravity (Only Host)\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Give | Remove Yourself Flying\r\n{1} : Move Up\r\nCrouch : Move Down", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Jump))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 8);
			Event Player.Mode_Headline = Custom String("DMG | Speed | KB | Grav (Self)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Increase by {1}%\r\n{2}", Input Binding String(Button(Primary Fire)), 10 ^ Event Player.Modification_Scalar_Selector,
				Custom String("{0} : Decrease by {1}%\r\n{2}", Input Binding String(Button(Secondary Fire)),
				10 ^ Event Player.Modification_Scalar_Selector, Custom String("{0} : Cycle Mode [DMG, Speed, KB, Gravity]\r\n{1}",
				Input Binding String(Button(Ultimate)), Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}", Input Binding String(
				Button(Ability 2)), Custom String("Reload : Reset {0}\r\n{1}",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Custom String("Melee : Reset all stats\r\n\n{0}",
				Custom String("Your [{0}] is currently set to: {1}%", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector],
				Event Player.Player_Modification[Event Player.Modification_Mode_Selector])))))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 9);
			Event Player.Mode_Headline = Custom String("DMG | Speed | KB | Grav (Target)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Increase by {1}%\r\n{2}", Input Binding String(Button(Primary Fire)), 10 ^ Event Player.Modification_Scalar_Selector,
				Custom String("{0} : Decrease by {1}%\r\n{2}", Input Binding String(Button(Secondary Fire)),
				10 ^ Event Player.Modification_Scalar_Selector, Custom String("{0} : Cycle Mode [DMG, Speed, KB, Gravity]\r\n{1}",
				Input Binding String(Button(Ultimate)), Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}", Input Binding String(
				Button(Ability 2)), Custom String("Reload : Reset {0}\r\n{1}",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Custom String("Melee : Reset all stats\r\n\n{0}",
				Custom String("Target [{0}] is currently set to: {1}%!",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Player Closest To Reticle(Event Player, All Teams)
				.Player_Modification[Event Player.Modification_Mode_Selector])))))))), Null, Left, 1, Color(White), Color(White), Color(White),
				String, Visible Never);
		Else If(Event Player.Mode_Cycle == 10);
			Event Player.Mode_Headline = Custom String("Carry | Bonk | Unstuck");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Carry Target\r\n{1} : Knockback Push\r\n{2} : Fix and Unstuck", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate)))), Null, Left, 1, Color(White), Color(
				White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 11);
			Create Progress Bar HUD Text(Event Player, Event Player.Scale_Real * 5, Custom String("Destination: {0}% | Current: {1}%",
				Event Player.Scale_Prev * 100, Event Player.Scale_Real * 100), Top, 1, Color(Blue), Color(Gray), Values, Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;
			Event Player.Mode_Headline = Custom String("Growth | Shrink (Yourself)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 12);
			Create Progress Bar HUD Text(Event Player, Event Player.Target_Lock.Scale_Real * 5, Custom String(
				"Destination: {0}% | Current: {1}% | {2}", Event Player.Target_Lock.Scale_Prev * 100,
				Event Player.Target_Lock.Scale_Real * 100, Event Player.Target_Lock), Top, 1, Color(Red), Color(Gray), Values, Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;
			Event Player.Mode_Headline = Custom String("Growth | Shrink (Target)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 13);
			Event Player.Mode_Headline = Custom String("Attach System");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Attach Yourself To Target\r\n{1} : Target Rides You\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Detach Yourself\r\nReload : Detach Target\r\n{1} : Attach Target To You\r\nMelee: Orbit Target", Input Binding String(
				Button(Ultimate)), Input Binding String(Button(Ability 2))))), Null, Left, 1, Color(White), Color(White), Color(White),
				Visible To and String, Visible Never);
		Else If(Event Player.Mode_Cycle == 14);
			Event Player.Mode_Headline = Custom String("Leash Line");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Leash Target\r\n{1} : Remove Leash\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Leash yourself to target", Input Binding String(Button(Ability 2))))), Null, Left, 1,
				Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 15);
			Event Player.Mode_Headline = Custom String("Painting");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Draw\r\n{1} : Choose Effect\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Select Size\r\n{1} : Choose Color\r\n{2}", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Ability 2)), Custom String("Reload : Remove previous effect\r\nMelee : Clear all effects")))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 16);
			Event Player.Mode_Headline = Custom String("Beam Drawing");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Draw Beam\r\n{1} : Choose Beam\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Choose Color\r\n{1} : Remove previous beam\r\nMelee : Clear All Beams",
				Input Binding String(Button(Ability 2)), Input Binding String(Button(Reload))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 17);
			Event Player.Mode_Headline = Custom String("Target Hero Swap");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Make Target To Mercy\r\n{1} : Make Target To D.Va\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Make Target To Widow\r\n{1} : Make Target Same Hero As You",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 18);
			Event Player.Mode_Headline = Custom String("Safezone");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Create/Move Safezone\n{1} : Remove Safezone\n{2}", Input Binding String(Button(Ultimate)), Input Binding String(Button(
				Ability 2)), Custom String("{0} : Increase Size\n{1} : Decrease Size\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("Reload : Give Target Access\nMelee : Revoke Target Access")))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 19);
			Event Player.Mode_Headline = Custom String("Page of Fates");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Coin Toss\r\n{1} : Rocks/Paper/Scissors\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : 6 Sided Die\r\n{1} : 20 Sided Die\r\nReload : Percentage Die",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 20);
			Event Player.Mode_Headline = Custom String("Voice Options");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Moan Spam Target\r\n{1} : Moan Spam Yourself\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : Voice Pitch Up\r\n{1} : Voice Pitch Down\r\nMelee : Wobbly Voice\r\n{2}",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), Custom String(
				"Reload : Back To Normal Voice\r\nCurrent Pitch: [{0}]", Event Player.Voice_Pitch == False ? Custom String("Wobbly")
				: Event Player.Voice_Pitch)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 21);
			Event Player.Mode_Headline = Custom String("Small message to someone");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : LIKE\r\n{1} : LOVE\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Hug\r\n{1} : Cringe", Input Binding String(Button(Ability 2)), Input Binding String(Button(Ultimate))))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 22);
			Event Player.Mode_Headline = Custom String("Heaven");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give Ticket to Heaven\r\n{1} : Send yourself to Heaven", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Ultimate)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 23);
			Event Player.Mode_Headline = Custom String("#icon #yourself");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give icon to yourself\n{1}", Input Binding String(Button(Primary Fire)), Custom String(
				"{0} : Choose Color\n{1} : Choose Icon\n{2}", Input Binding String(Button(Secondary Fire)), Input Binding String(Button(
				Ultimate)), Custom String("{0} : Give Yourself - Heart\nMelee : Give Yourself - Fire\n{1}", Input Binding String(Button(
				Ability 2)), Custom String("Reload : Destroy Your Icons\n"))))), Null, Left, 1, Color(White), Color(White), Color(White),
				String, Visible Never);
		Else If(Event Player.Mode_Cycle == 24);
			Event Player.Mode_Headline = Custom String("#icon #target");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give Icon to Target\n{1}", Input Binding String(Button(Primary Fire)), Custom String(
				"{0} : Choose Color\n{1} : Choose Icon\n{2}", Input Binding String(Button(Secondary Fire)), Input Binding String(Button(
				Ultimate)), Custom String("{0} : Give Target - Heart\nMelee : Give Target - Fire\n{1}", Input Binding String(Button(
				Ability 2)), Custom String("Reload : Destroy Target's Icons"))))), Null, Left, 1, Color(White), Color(White), Color(White),
				String, Visible Never);
		Else If(Event Player.Mode_Cycle == 25);
			Event Player.Mode_Headline = Custom String("Perks Toggle");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Anti-Colission Target [{1}]\r\n{2}", Input Binding String(Button(Primary Fire)), Player Closest To Reticle(Event Player,
				All Teams).Ghost_Mode ? Global.OffOnString[1] : Global.OffOnString[0], Custom String(
				"Melee : Anti-Colission Self [{0}]\r\n{1}", Event Player.Ghost_Mode ? Global.OffOnString[1] : Global.OffOnString[0],
				Custom String("{0} : Slow Projectile [{1}]\r\n{2}", Input Binding String(Button(Reload)),
				Event Player.Slow_Projectile ? Global.OffOnString[1] : Global.OffOnString[0], Custom String(
				"{0} : No CD (Angels+) [{1}]\r\n{2}", Input Binding String(Button(Ability 2)),
				Event Player.No_CD ? Global.OffOnString[1] : Global.OffOnString[0], Custom String("{0} : Full Protection [{1}]",
				Input Binding String(Button(Ultimate)), Event Player.Full_Protection ? Global.OffOnString[1] : Global.OffOnString[0])))))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 26);
			Event Player.Mode_Headline = Custom String("Logging page");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n\n{0}", Custom string(
					"The oldest actions are displayed at the top, the newest at the bottom.\n"
				)), 
				Null, Left, 1, Null, Color(White), Null, String, Visible Never);
		Else If(Event Player.Mode_Cycle == 27);
			Event Player.Mode_Headline = Custom String("Kick/Ban (Only Owner)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Kick Target \r\n{1} : Ban Target Temporarily", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 28);
			Event Player.Mode_Headline = Custom String("Restrict/Mute Player");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Restrict target - Chat & Skills Disabled\r\n{1} : Release target - Chat & Skills Enabled\r\n{2} : Lock / Unlock Yourself",
				Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Input Binding String(Button(
				Ultimate)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 29);
			Event Player.Mode_Headline = Custom String("Assign Rights & Team Swap");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give Target Rights \r\n{1} : Revoke Target Rights \r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Switch Team - Yourself\r\n{1} : Switch Team - Target\r\n{2}", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Ability 2)), Custom String("Reload : Move Yourself to Spectator")))), Null, Left, 1, Color(White),
				Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 30);
			Event Player.Mode_Headline = Custom String("Time (Only Owner/Angels)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Add 5 Min to match time\r\n{1}", Input Binding String(Button(Primary Fire)), Custom String(
				"{0} : Set Match Time To 20 Sec\r\n{1} : Declare Match Draw\r\n\r\nMaximum Match duration is\r\n  capped at 60 minutes.",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 31);
			Event Player.Mode_Headline = Custom String("Special Camera");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Place Camera Without LOS check\r\n{1} : Place Camera With LOS Check\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String(
				"Ultimate : Place static Camera\r\n{0} : Start Cinematic Camera\r\n{1}", Input Binding String(Button(Ability 2)),
				Custom String("Reload : Start Top-down Camera\r\n{0} : Attach Camera to target player\r\n\r\n{1}", Input Binding String(Button(
				Ability 1)), Custom String(
				"Hold button down for 1 sec to\r\n   place cam at eye level.\r\nReminder: Hold Interact to reset Camera."))))), Null, Left, 1,
				Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 32);
			Event Player.Mode_Headline = Custom String("U N O");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("Ultimate : Start UNO Match\r\n\nPlayers in queue: {0}\r\n{1}", Count Of(
				Global.UNO_Players), Custom String("{0} : Show who is in queue\r\nReload (Optional):\r\nPlace/Remove In-world UNO deck",
				Input Binding String(Button(Ability 2)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 33);
			Event Player.Mode_Headline = Custom String("Invisible (Only Host/Angels)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Set Yourself Invisible \r\n{1} : Remove Invisibility from self", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)))), Null, Left, 1, Color(White), Color(White), Color(White), String,
				Visible Never);
		Else If(Event Player.Mode_Cycle == 34);
			Event Player.Mode_Headline = Custom String("Talk with Moe");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"Say to Moe:\r\n{0} : Hello!\n{1} : Goodbye.\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Yes.\nReload : No.\r\n{1}", Input Binding String(Button(Ability 2)), Custom String(
				"Ultimate : Thanks!\n{0} : Sorry...", Input Binding String(Button(Ability 1)))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 35);
			Event Player.Mode_Headline = Custom String("Hero Features");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Toggle All Hero Special Features [{1}]\n{2}", Input Binding String(Button(Ultimate)),
				Event Player.AddonSkillsToggle[0] ? Global.OffOnString[1] : Global.OffOnString[0], Custom String(
				"{0} : Toggle Ring Effect [{1}] \n\nFeatures:\nMoira Ghost Fade, Heart Tags, Widowmaker's Laser pointer, etc",
				Input Binding String(Button(Ability 2)), Event Player.AddonSkillsToggle[1] ? Global.OffOnString[1] : Global.OffOnString[0]))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle == 36);
			Event Player.Mode_Headline = Custom String("Communicate (Angels+)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Use Emote UP \r\n{1} : Use Emote Down \r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Use Emote Left\r\n{1} : Use Emote Right\r\n", Input Binding String(Button(Reload)),
				Input Binding String(Button(Ability 2))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		End;
		Event Player.Mode_Description = Last Text ID;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == False;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Mode_Description != Null;
		Event Player.Is_Menu_Active == True;
		Event Player.UNO_Ingame == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
		If(Event Player.Mode_Cycle_Default == 0);
			Event Player.Mode_Headline = Custom String("Info Page");
			Call Subroutine(Info_Page_Default);
		Else If(Event Player.Mode_Cycle_Default == 1);
			Event Player.Mode_Headline = Custom String("Kill | Resurrection");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Kill | Rez Yourself\r\n{1} : Set Auto-Respawn, yourself\r\n\n{2}", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Ability 2)), Custom String("Current Auto-Respawn Settings: \r\n[You: {0}, Target: {1}]",
				Event Player.Auto_Respawn, Player Closest To Reticle(Event Player, All Teams).Auto_Respawn))), Null, Left, 1, Color(White),
				Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 2);
			Event Player.Mode_Headline = Custom String("Status Effect");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Apply/Remove Status: yourself\r\n{1} : Remove All Status: Yourself\r\n{2}", Input Binding String(Button(Ability 2)),
				Input Binding String(Button(Reload)), Custom String("{0} : Cycle Status\r\n\nCurrently Selected Status:\r\n[ {1} ]",
				Input Binding String(Button(Ultimate)), Global.Status_String[Event Player.Status_Selector]))), Null, Left, 1, Color(White),
				Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 3);
			Event Player.Mode_Headline = Custom String("Outlines & names");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Choose Color\r\n{1}", Input Binding String(Button(Secondary Fire)), Custom String(
				"{0} : Give Outline To Yourself\r\n{1} : Remove Outline from Yourself\r\n{2}", Input Binding String(Button(Ultimate)),
				Input Binding String(Button(Ability 2)), Custom String("Melee : Toggle Outline Visibility [{0}]",
				Event Player.Outlines_Toggle ? Global.OffOnString[1] : Global.OffOnString[0])))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 4);
			Event Player.Mode_Headline = Custom String("Speed | Knockback | Gravity");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Increase by {1}%\r\n{2}", Input Binding String(Button(Primary Fire)), 10 ^ Event Player.Modification_Scalar_Selector,
				Custom String("{0} : Decrease by {1}%\r\n{2}", Input Binding String(Button(Secondary Fire)),
				10 ^ Event Player.Modification_Scalar_Selector, Custom String("{0} : Cycle Mode [Speed, KB, Gravity]\r\n{1}",
				Input Binding String(Button(Ultimate)), Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}", Input Binding String(
				Button(Ability 2)), Custom String("Reload : Reset {0}\r\n{1}",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Custom String("Melee : Reset all stats\r\n\n{0}",
				Custom String("Your [{0}] is currently set to: {1}%!\r\n",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector],
				Event Player.Player_Modification[Event Player.Modification_Mode_Selector])))))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 5);
			Event Player.Mode_Headline = Custom String("Unstuck");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Fix and Unstuck Yourself", Input Binding String(Button(Ultimate)))), Null, Left, 1, Color(White), Color(White), Color(
				White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 6);
			Create Progress Bar HUD Text(Event Player, Event Player.Scale_Real * 5, Custom String("Destination: {0}% | Current: {1}%",
				Event Player.Scale_Prev * 100, Event Player.Scale_Real * 100), Top, 1, Color(Blue), Color(Gray), Values, Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;
			Event Player.Mode_Headline = Custom String("Growth | Shrink (Yourself)");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 7);
			Event Player.Mode_Headline = Custom String("Voice Options");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Voice Pitch Up\r\n{1} : Voice Pitch Down\r\n{2}", Input Binding String(Button(Ultimate)), Input Binding String(Button(
				Ability 2)), Custom String("{0} : Wobbly Voice\r\n{1} : Back To Normal Voice\r\nCurrent Pitch: [{2}]", Input Binding String(
				Button(Melee)), Input Binding String(Button(Reload)), Event Player.Voice_Pitch == False ? Custom String("Wobbly")
				: Event Player.Voice_Pitch))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 8);
			Event Player.Mode_Headline = Custom String("Heaven");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Send yourself to Heaven", Input Binding String(Button(Ultimate)))), Null, Left, 1, Color(White), Color(White), Color(
				White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 9);
			Event Player.Mode_Headline = Custom String("#Icon #yourself");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Give icon to yourself \n{1}", Input Binding String(Button(Primary Fire)), Custom String(
				"{0} : Choose Color\n{1} : Choose Icon\n{2}", Input Binding String(Button(Secondary Fire)), Input Binding String(Button(
				Ultimate)), Custom String("{0} : Give Yourself - Heart\nMelee : Give Yourself - Fire\n{1}", Input Binding String(Button(
				Ability 2)), Custom String("Reload : Destroy Your Icons"))))), Null, Left, 1, Color(White), Color(White), Color(White), String,
				Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 10);
			Event Player.Mode_Headline = Custom String("Perks Toggle");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Slow Projectile [{1}]\r\n{2}", Input Binding String(Button(Reload)),
				Event Player.Slow_Projectile ? Global.OffOnString[1] : Global.OffOnString[0], Custom String(
				"Melee : Anti-Colission Self [{0}]\r\n{1}", Event Player.Ghost_Mode ? Global.OffOnString[1] : Global.OffOnString[0],
				Custom String("{0} : Full Protection [{1}]", Input Binding String(Button(Ultimate)),
				Event Player.Full_Protection ? Global.OffOnString[1] : Global.OffOnString[0])))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 11);
			Event Player.Mode_Headline = Custom String("Team Swap");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Switch Team - Yourself", Input Binding String(Button(Ultimate)))), Null, Left, 1, Color(White), Color(White), Color(
				White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 12);
			Event Player.Mode_Headline = Custom String("Special Camera");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Place Camera Without LOS check\r\n{1} : Place Camera With LOS Check\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Place static Camera\r\n{1} : Start Cinematic Camera\r\n{2}",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), Custom String(
				"Reload : Start Top-down Camera\r\n\n{0}", Custom String(
				"Hold button down for 1 sec to\r\n   place cam at eye level.\r\nReminder: Hold Interact to reset Camera."))))), Null, Left, 1,
				Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 13);
			Event Player.Mode_Headline = Custom String("U N O");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : Start UNO Match\r\n\nPlayers in queue: {1}\r\n{2}", Input Binding String(Button(
				Ultimate)), Count Of(Global.UNO_Players), Custom String(
				"{0} : Show who is in queue\r\nReload : (Optional):\r\nPlace/Remove In-world UNO deck", Input Binding String(Button(
				Ability 2)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 14);
			Event Player.Mode_Headline = Custom String("Page of Fates");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Coin Toss\r\n{1} : Rocks/Paper/Scissors\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : 6 Sided Die\r\n{1} : 20 Sided Die\r\nReload : Percentage Die",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 15);
			Event Player.Mode_Headline = Custom String("Small message to someone");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : LIKE\r\n{1} : LOVE\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Hug\r\n{1} : Cringe", Input Binding String(Button(Ability 2)), Input Binding String(Button(Ultimate))))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 16);
			Event Player.Mode_Headline = Custom String("Talk with Moe");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"Say to Moe:\r\n{0} : Hello!\n{1} : Goodbye.\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)), Custom String("{0} : Yes.\nReload : No.\r\n{1}", Input Binding String(Button(Ability 2)), Custom String(
				"Ultimate : Thanks!\n{0} : Sorry...", Input Binding String(Button(Ability 1)))))), Null, Left, 1, Color(White), Color(White),
				Color(White), String, Visible Never);
		Else If(Event Player.Mode_Cycle_Default == 17);
			Event Player.Mode_Headline = Custom String("Hero Features | Effects");
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Toggle All Hero Special Features [{1}]\n{2}", Input Binding String(Button(Ultimate)),
				Event Player.AddonSkillsToggle[0] ? Global.OffOnString[1] : Global.OffOnString[0], Custom String(
				"{0} : Toggle Ring Effect [{1}] \n\nFeatures:\nMoira Ghost Fade, Heart Tags, Widowmaker's Laser pointer, etc",
				Input Binding String(Button(Ability 2)), Event Player.AddonSkillsToggle[1] ? Global.OffOnString[1] : Global.OffOnString[0]))),
				Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		End;
		Event Player.Mode_Description = Last Text ID;
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == False;
	}

	actions
	{
		If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0]);
			Disable Text Chat(Event Player);
			Disable Voice Chat(Event Player, True, True, True);
		End;
		Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String(
			"{0}", Event Player)) || (Host Player == Event Player && Array Contains(Global.Promoted_List, Custom String("{0}",
			Event Player))) || (Global.Music_Toggle && Event Player == Host Player));
		Abort If(Custom String("{0}", Event Player) == Custom String("Warloy") || Custom String("{0}", Event Player) == Custom String(
			"kwally"));
		Wait(600, Abort When False);
		Big Message(All Players(All Teams), Custom String("{0} Was \"AFK\" Too Long Without Choosing A Hero.", Event Player));
		Wait(0.100, Ignore Condition);
		Move Player to Team(Event Player, Host Player, -1);
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Banned_List, Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		Disable Text Chat(Event Player);
		Disable Voice Chat(Event Player, True, True, True);
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
		Event Player.Full_Protection = True;
		Event Player.Mode_Cycle = -1;
		Event Player.Mode_Cycle_Default = -1;
		Event Player.Is_Menu_Active = False;
		Wait(5, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Null, Top, 5, Color(White), Color(White),
			Color(White), None, Visible Never);
		Create HUD Text(Event Player, Custom String(" You are on the banlist \r\n    and will be removed \r\n from the game shortly... "),
			Null, Null, Top, 10, Color(Red), Color(White), Color(White), None, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String(
			" \r\nPlease Contact bit.ly/ow2friendly (all lowercase!) for further support."), Top, 10, Color(White), Color(
			Yellow), Color(White), None, Visible Never);
		Start Forcing Player To Be Hero(Event Player, Hero(Roadhog));
		Set Status(Event Player, Null, Knocked Down, 9999);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Invisible(Event Player, All);
		Set Aim Speed(Event Player, 0);
		Start Forcing Player Position(Event Player, Vector(0, 50, 0), False);
		Modify Global Variable(Temp_Banned, Append To Array, Custom String("{0}", Event Player));
		Wait(25, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("  {0} is banned.", Event Player));
		Wait(0.500, Ignore Condition);
		Remove Player(Event Player);
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Temp_Banned, Custom String("{0}", Event Player)) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} is banned.", Event Player));
		Wait(0.500, Ignore Condition);
		Remove Player(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == False;
		Is In Setup == False;
		Total Time Elapsed < 10;
	}

	actions
	{
		"Forcing game time to 45 min, because default settings are 10 min maximum"
		Set Match Time(2400);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time == 0;
		Is Assembling Heroes == False;
		Is In Setup == False;
	}

	actions
	{
		Declare Match Draw;
		Wait(26, Ignore Condition);
		Restart Match;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
		Global.Skins_Check[0] == False;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Game Mode != Game Mode(Skirmish);
		(Event Player == Host Player || (Event Player.Mod_Rank && !Event Player.Promoted_Rank) || Event Player.High_Rank) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Wait(7, Abort When False);
		Big Message(All Players(All Teams), Custom String("Skin Swap Started..."));
		Wait(3, Ignore Condition);
		"Used to assign players positions before going to assemble heroes"
		Global.Skins_Check[1] = True;
		Wait(0.125, Ignore Condition);
		Global.matchTime[0] = Evaluate Once(Match Time);
		Go To Assemble Heroes;
		Set Match Time(30);
		Wait Until(!Is Assembling Heroes, 9999);
		Global.Skins_Check[1] = False;
		Wait(0.500, Ignore Condition);
		Set Match Time(Global.matchTime[0]);
		Wait(30, Ignore Condition);
		Start Forcing Player To Be Hero(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), Hero(Soldier: 76));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Skins_Check[1] == True;
	}

	actions
	{
		If(Entity Exists(Event Player) && Has Spawned(Event Player) == True);
			"Teleporting Players to last known position after assembling heroes"
			Event Player.Last_Position_Facing[0] = Position Of(Event Player);
			Event Player.Last_Position_Facing[1] = Facing Direction Of(Event Player);
			Wait Until(Global.Skins_Check[1] == False && Has Spawned(Event Player) == True, 99999);
			Teleport(Event Player, Event Player.Last_Position_Facing[0]);
			Set Facing(Event Player, Event Player.Last_Position_Facing[1], To World);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time <= 20;
		(Is In Setup && Is Assembling Heroes) == False;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Remaining Time: 20 Sec"));
	}
}

disabled rule("")
{
	event
	{
		Ongoing - Global;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Abort When False);
		Event Player.Camera_Info_Array[1] = False;
		Event Player.Camera_Info_Array[0] = False;
		Destroy In-World Text(Event Player.Camera_Info_Array[4]);
		Destroy Effect(Event Player.Camera_Info_Array[5]);
		If(Event Player.Camera >= 4);
			Event Player.Camera = 0;
		Else;
			Event Player.Camera += 1;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 0;
	}

	actions
	{
		Stop Camera(Event Player);
		Small Message(Event Player, Custom String(" Default Camera"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 1;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ -3 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(
			Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" 3rd Person, Far"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 2;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(
			Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" 3rd Person, Close"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 3;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ 3 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(Eye Position(
			Event Player) + -10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" Front View, Far"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 4;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ 1 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(Eye Position(
			Event Player) + -10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" Front View, Close"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 0 || Event Player.Mode_Cycle_Default == 0) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.AFK_Toggle);
				Small Message(Event Player, Custom String("  Already set as afk"));
			Else;
				Event Player.AFK_Toggle = True;
				Small Message(Event Player, Custom String("  Afk-Text appears 5 sec after you stop moving"));
			End;
			Wait(1, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AFK_Toggle == True;
		Is Moving(Event Player) == False;
		Is Crouching(Event Player) == False;
		Has Spawned(Event Player) == True;
		Event Player.Effect_Storage == Null;
	}

	actions
	{
		Wait(5, Abort When False);
		If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String("Warloy"));
			Create Progress Bar In-World Text(All Players(All Teams), Total Time Elapsed * Evaluate Once(Random Real(2, 8)) % 100,
				Custom String("{0}", Event Player) == Custom String("xMaxuss") ? Custom String("Max is coding/afk\r\n") : (Custom String("{0}",
				Event Player) == Custom String("kwally") ? Custom String("AFK | DM if you need me") : (Custom String("{0}", Event Player)
				== Custom String("Warloy") ? Custom String("Warloy is coding/afk\r\n") : Custom String("{0} is afk", Event Player))),
				Event Player, 0.500, Clip Against Surfaces, Event Player.Is_Title_Given ? (
				Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow") ? Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255) : (
				Event Player.Player_Title_And_Outline[1] == Custom String("Fading") ? Custom Color(Round To Integer((
				Event Player.Player_Title_And_Outline[2][0] + Event Player.Player_Title_And_Outline[3][0]) / 2 + Sine From Radians(
				Global.Main_Chaser) * ((Event Player.Player_Title_And_Outline[2][0] - Event Player.Player_Title_And_Outline[3][0]) / 2), Down),
				Round To Integer((Event Player.Player_Title_And_Outline[2][1] + Event Player.Player_Title_And_Outline[3][1])
				/ 2 + Sine From Radians(Global.Main_Chaser) * ((
				Event Player.Player_Title_And_Outline[2][1] - Event Player.Player_Title_And_Outline[3][1]) / 2), Down), Round To Integer((
				Event Player.Player_Title_And_Outline[2][2] + Event Player.Player_Title_And_Outline[3][2]) / 2 + Sine From Radians(
				Global.Main_Chaser) * ((Event Player.Player_Title_And_Outline[2][2] - Event Player.Player_Title_And_Outline[3][2]) / 2), Down),
				255) : Event Player.Player_Title_And_Outline[1])) : (
				Event Player.Regular_Player_Has_Title ? Global.Colors[Event Player.NamesAndOutlines_Colors_Selector] : Evaluate Once(
				Random Value In Array(Global.Colors))), Color(White), Visible To Position Values and Color, Default Visibility);
		Else;
			Create In-World Text(All Players(All Teams), Custom String("{0} {1} is AFK {0}\r\n\r\n", Global.Rotate[Round To Integer(
				Total Time Elapsed * Evaluate Once(Random Real(2, 8)) / 5, Down) % 4], Event Player), Event Player, 0.800,
				Clip Against Surfaces, Visible To Position String and Color, Event Player.Is_Title_Given ? (
				Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow")
				|| Event Player.Player_Title_And_Outline[1] == Custom String("Fading")
				? Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255) : Event Player.Player_Title_And_Outline[1]) : (
				Event Player.Regular_Player_Has_Title ? Global.Colors[Event Player.NamesAndOutlines_Colors_Selector] : Evaluate Once(
				Random Value In Array(Global.Colors))), Visible Never);
		End;
		Event Player.Effect_Storage = Last Text ID;
		Small Message(Event Player, Custom String("  AFK text now active"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AFK_Toggle == True;
		Event Player.Effect_Storage != Null;
		(Is Jumping(Event Player) || Throttle Of(Event Player) != Vector(0, 0, 0) || Is Crouching(Event Player) || !Has Spawned(
			Event Player)) == True;
	}

	actions
	{
		Destroy Progress Bar In-World Text(Event Player.Effect_Storage);
		Destroy In-World Text(Event Player.Effect_Storage);
		Wait(0.100, Ignore Condition);
		Event Player.Effect_Storage = Null;
		Small Message(Event Player, Custom String("  No Longer afk"));
		Event Player.AFK_Toggle = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 1 || Event Player.Mode_Cycle_Default == 1) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Is Alive(Event Player));
				If((Event Player.High_Rank || Event Player.Mod_Rank || Event Player.Spam_Cooldown <= 0) == False);
					Small Message(Event Player, Custom String("  Self-kill is on a {0}sec CD", Event Player.Spam_Cooldown));
					Abort;
				End;
				Event Player.Spam_Cooldown = 3;
				Kill(Event Player, Null);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Else If(Is Dead(Event Player));
				Resurrect(Event Player);
				Heal(Event Player, Null, 12000);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || (Player Closest To Reticle(Event Player, All Teams)
				.Mod_Rank && !Player Closest To Reticle(Event Player, All Teams).Promoted_Rank));
			Resurrect(Player Closest To Reticle(Event Player, All Teams));
			Heal(Player Closest To Reticle(Event Player, All Teams), Null, 12000);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			If(Event Player.Promoted_Rank && Event Player != Host Player);
				Small Message(Event Player, Custom String("  Only for host and angels."));
				Abort;
			End;
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || (Player Closest To Reticle(Event Player, All Teams)
				.Mod_Rank && !Player Closest To Reticle(Event Player, All Teams).Promoted_Rank) || Player Closest To Reticle(Event Player,
				All Teams).Full_Protection);
			Kill(Player Closest To Reticle(Event Player, All Teams), Event Player);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Auto_Respawn);
				Event Player.Auto_Respawn = False;
			Else;
				Event Player.Auto_Respawn = True;
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams)
				.Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Auto_Respawn);
				Player Closest To Reticle(Event Player, All Teams).Auto_Respawn = False;
			Else;
				Player Closest To Reticle(Event Player, All Teams).Auto_Respawn = True;
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.Auto_Respawn == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		"Kanezaka falling out of map hardcoded fix"
		If(Current Map == Map(Kanezaka));
			Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else;
			Wait(1.500, Abort When False);
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)) + Vector(0, 1.500, 0));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Start Forcing Player Position(Event Player, Nearest Walkable Position(Position Of(Event Player)) + Vector(0, 1.500, 0), False);
			Wait(0.100, Ignore Condition);
			Stop Forcing Player Position(Event Player);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 2;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Teleport(Event Player, Position Of(Player Closest To Reticle(Event Player, All Teams)));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
				Resurrect(Player Closest To Reticle(Event Player, All Teams));
			End;
			Teleport(Player Closest To Reticle(Event Player, All Teams), Position Of(Event Player));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
				Resurrect(Player Closest To Reticle(Event Player, All Teams));
			End;
			Teleport(Player Closest To Reticle(Event Player, All Teams), Spawn Points(Team Of(Player Closest To Reticle(Event Player,
				All Teams))));
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Set Facing(Player Closest To Reticle(Event Player, All Teams), 
				Direction Towards(
					Player Closest To Reticle(Event Player, All Teams), 
					Eye Position(Event Player) + Vector(0,-1,0)
					), 
				To World);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 2 || Event Player.Mode_Cycle == 16) == True;
		(Is Button Held(Event Player, Button(Crouch)) || Event Player.Mode_Cycle == 16) == True;
	}

	actions
	{
		If(Event Player.Mode_Cycle == 2);
			Create Effect(Event Player, Sphere, Color(White), Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 12.500), 0.300, Position and Radius);
			Event Player.Drawing_Obj_Info_Array[3] = Last Created Entity;
			Create Effect(Event Player, Ring, Color(White), Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 12.500), 0.750, Position and Radius);
			Event Player.Drawing_Obj_Info_Array[4] = Last Created Entity;
			Wait Until(Event Player.Mode_Cycle != 2 || !Is Button Held(Event Player, Button(Crouch)), 9999);
			Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
			Destroy Effect(Event Player.Drawing_Obj_Info_Array[4]);
		Else;
			Create Effect(Event Player, Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 3,
				All Players(All Teams), Event Player, True)), 0.075, Position Radius and Color);
			Event Player.Beams_Preview_ID[1] = Last Created Entity;
			Wait Until(Event Player.Mode_Cycle != 16, 9999);
			Destroy Effect(Event Player.Beams_Preview_ID[1]);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 3 || Event Player.Mode_Cycle_Default == 2) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Shortcut == Null);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Event Player.Target_Shortcut.UNO_Ingame);
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			If(Event Player.Status_Selector == 0);
				Abort If(Has Status(Event Player.Target_Shortcut, Knocked Down));
				If(Event Player.Target_Shortcut.Protection);
					Clear Status(Event Player.Target_Shortcut, Phased Out);
				End;
				Set Status(Event Player.Target_Shortcut, Null, Knocked Down, 9999);
			Else If(Event Player.Status_Selector == 1);
				Abort If(Has Status(Event Player.Target_Shortcut, Stunned));
				If(Event Player.Target_Shortcut.Protection);
					Clear Status(Event Player.Target_Shortcut, Phased Out);
				End;
				Set Status(Event Player.Target_Shortcut, Null, Stunned, 9999);
			Else If(Event Player.Status_Selector == 2);
				Abort If(Has Status(Event Player.Target_Shortcut, Frozen));
				If(Event Player.Target_Shortcut.Protection);
					Clear Status(Event Player.Target_Shortcut, Phased Out);
				End;
				Set Status(Event Player.Target_Shortcut, Null, Frozen, 9999);
			Else If(Event Player.Status_Selector == 3);
				Abort If(Has Status(Event Player.Target_Shortcut, Burning));
				If(Event Player.Target_Shortcut.Protection);
					Clear Status(Event Player.Target_Shortcut, Phased Out);
				End;
				Set Status(Event Player.Target_Shortcut, Null, Burning, 9999);
				Start Damage Over Time(Event Player.Target_Shortcut, Null, 9999, 20);
				Event Player.Target_Shortcut.DMG_Time = Last Damage Over Time ID;
			Else If(Event Player.Status_Selector == 4);
				Abort If(Has Status(Event Player.Target_Shortcut, Hacked));
				If(Event Player.Target_Shortcut.Protection);
					Clear Status(Event Player.Target_Shortcut, Phased Out);
				End;
				Set Status(Event Player.Target_Shortcut, Null, Hacked, 9999);
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Shortcut, 1);
			If(Event Player.Target_Shortcut.Protection);
				Set Status(Event Player.Target_Shortcut, Null, Phased Out, 9999);
			End;
			Wait(0.100, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			If(Event Player.Status_Selector == 3);
				Stop Damage Over Time(Event Player.Target_Shortcut.DMG_Time);
			End;
			If(Event Player.Target_Shortcut.Protection);
				Clear Status(Event Player.Target_Shortcut, Phased Out);
			End;
			If(Event Player.Status_Selector == 0);
				Clear Status(Event Player.Target_Shortcut, Knocked Down);
			Else If(Event Player.Status_Selector == 1);
				Clear Status(Event Player.Target_Shortcut, Stunned);
			Else If(Event Player.Status_Selector == 2);
				Clear Status(Event Player.Target_Shortcut, Frozen);
			Else If(Event Player.Status_Selector == 3);
				Clear Status(Event Player.Target_Shortcut, Burning);
			Else If(Event Player.Status_Selector == 4);
				Clear Status(Event Player.Target_Shortcut, Hacked);
			End;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			If(Event Player.Target_Shortcut.Protection);
				Set Status(Event Player.Target_Shortcut, Null, Phased Out, 9999);
			End;
			Wait(0.100, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If((Event Player.High_Rank || Event Player.Mod_Rank || Event Player.Spam_Cooldown <= 0) == False);
				Small Message(Event Player, Custom String("  Set/Remove status is on a {0}sec CD", Event Player.Spam_Cooldown));
				Abort;
			End;
			If(Event Player.Protection);
				Clear Status(Event Player, Phased Out);
			End;
			Event Player.Spam_Cooldown = 3;
			If(Event Player.Status_Selector == 0);
				If(Has Status(Event Player, Knocked Down) == False);
					Set Status(Event Player, Null, Knocked Down, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else If(Has Status(Event Player, Knocked Down));
					Clear Status(Event Player, Knocked Down);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 1);
				If(Has Status(Event Player, Stunned) == False);
					Set Status(Event Player, Null, Stunned, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Stunned);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 2);
				If(Has Status(Event Player, Frozen) == False);
					Set Status(Event Player, Null, Frozen, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Frozen);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 3);
				If(Has Status(Event Player, Burning) == False);
					Set Status(Event Player, Null, Burning, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Burning);
					Stop Damage Over Time(Event Player.DMG_Time);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 4);
				If(Has Status(Event Player, Hacked) == False);
					Set Status(Event Player, Null, Hacked, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Hacked);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			End;
			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.Protection);
				Clear Status(Event Player, Phased Out);
			End;
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Burning);
			Clear Status(Event Player, Hacked);
			Stop Damage Over Time(Event Player.DMG_Time);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Status_Selector >= 4);
				Event Player.Status_Selector = 0;
			Else;
				Event Player.Status_Selector += 1;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 4;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Player Closest To Reticle(Event Player, All Teams).Protection = True;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Protection == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Player Closest To Reticle(Event Player, All Teams).Protection = False;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			Modify Global Variable(actionsLog, append to array, custom string("[-] {0}'s immunity is revoked by {1} [page 4]", Evaluate Once(Player Closest To Reticle(Event Player, All Teams)), Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(White), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Call Subroutine(Full_Protection_Toggle);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Player Closest To Reticle(Event Player, All Teams).AddonSkillsToggle[3] = 1;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.AddonSkillsToggle[3] == 1;
	}

	actions
	{
		Call Subroutine(Full_Protection_Toggle);
		Event Player.AddonSkillsToggle[3] = 0;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Protection;
	}

	actions
	{
		If(Event Player.Protection);
			Set Status(Event Player, Null, Phased Out, 9999);
			Big Message(Event Player, Custom String("Protection: ON"));
			Skip If(Event Player.High_Rank || Event Player.Mod_Rank, 1);
			Set Damage Dealt(Event Player, 0);
		Else;
			Clear Status(Event Player, Phased Out);
			Big Message(Event Player, Custom String("Protection: OFF"));
			Skip If(Event Player.High_Rank || Event Player.Mod_Rank, 1);
			Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
			Event Player.Full_Protection = False;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Full_Protection_Toggle;
	}

	actions
	{
		If(Event Player.Full_Protection);
			Event Player.Full_Protection = False;
		Else;
			If(!Event Player.Protection);
				Event Player.Protection = True;
				Wait(0.100, Ignore Condition);
			End;
			Event Player.Full_Protection = True;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 5 || Event Player.Mode_Cycle_Default == 3) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut))
				|| Event Player.Target_Shortcut.Full_Protection);
			Abort If(Is Dummy Bot(Event Player.Target_Shortcut));
			If(Event Player.Target_Shortcut.Is_Title_Given);
				Small Message(Event Player, Custom String("  Can't change outline of {0}", Event Player.Target_Shortcut));
				Abort;
			End;
			Event Player.Target_Shortcut.Regular_Player_Has_Title = True;
			Disable Nameplates(Event Player.Target_Shortcut, All Players(All Teams));
			Destroy In-World Text(Event Player.Target_Shortcut.M32_Players_Nameplate);
			Wait(0.050, Ignore Condition);
			Event Player.Target_Shortcut.NamesAndOutlines_Colors_Selector = Event Player.NamesAndOutlines_Colors_Selector;
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Evaluate Once(
				Event Player.Target_Shortcut).Is_Invisible)), Custom String("{0}", Event Player.Target_Shortcut), Evaluate Once(
				Event Player.Target_Shortcut), 0.980, Clip Against Surfaces, Visible To and Position,
				Global.Colors[Event Player.Target_Shortcut.NamesAndOutlines_Colors_Selector], Visible Never);
			Event Player.Target_Shortcut.M32_Players_Nameplate = Last Text ID;
			Start Forcing Player Outlines(Event Player.Target_Shortcut, Filtered Array(All Players(All Teams),
				Current Array Element.Outlines_Toggle), True, Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Always);
			Wait(0.080, Ignore Condition);
			Small Message(Event Player.Target_Shortcut, Custom String("  {0} changed your name and outline colors!", Event Player));
			Wait(0.250, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut))
				|| Event Player.Target_Shortcut.Full_Protection);
			Abort If(Is Dummy Bot(Event Player.Target_Shortcut));
			If(Event Player.Target_Shortcut.Is_Title_Given);
				Small Message(Event Player, Custom String("  Can't change outline of {0}", Event Player.Target_Shortcut));
				Abort;
			End;
			Event Player.Target_Shortcut.Regular_Player_Has_Title = False;
			Stop Forcing Player Outlines(Event Player.Target_Shortcut, All Players(All Teams));
			Destroy In-World Text(Event Player.Target_Shortcut.M32_Players_Nameplate);
			Event Player.Target_Shortcut.M32_Players_Nameplate = Null;
			Enable Nameplates(Event Player.Target_Shortcut, All Players(All Teams));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Is_Title_Given);
				Small Message(Event Player, Custom String("  Can't change, you have custom title/outline"));
				Abort;
			End;
			Event Player.Regular_Player_Has_Title = True;
			Disable Nameplates(Event Player, All Players(All Teams));
			Destroy In-World Text(Event Player.M32_Players_Nameplate);
			Wait(0.050, Ignore Condition);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Custom String("{0}", Event Player), Event Player, 0.980, Clip Against Surfaces, Visible To Position and Color,
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Visible Never);
			Event Player.M32_Players_Nameplate = Last Text ID;
			Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), Current Array Element.Outlines_Toggle), True,
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Always);
			Wait(0.250, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Is_Title_Given);
				Small Message(Event Player, Custom String("  Can't remove, you have custom title/outline"));
				Abort;
			End;
			Event Player.Regular_Player_Has_Title = False;
			Stop Forcing Player Outlines(Event Player, All Players(All Teams));
			Destroy In-World Text(Event Player.M32_Players_Nameplate);
			Event Player.M32_Players_Nameplate = Null;
			Enable Nameplates(Event Player, All Players(All Teams));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.NamesAndOutlines_Colors_Selector >= 15);
				Event Player.NamesAndOutlines_Colors_Selector = 0;
			Else;
				Event Player.NamesAndOutlines_Colors_Selector += 1;
			End;
			Skip If(!Event Player.Regular_Player_Has_Title, 3);
			Event Player.Regular_Player_Has_Title = False;
			Wait(0.010, Ignore Condition);
			Event Player.Regular_Player_Has_Title = True;
			Small Message(Event Player, Custom String("  {0}", Event Player.NamesAndOutlines_Colors_Selector == 15 ? Custom String("Brown")
				: Global.Colors[Event Player.NamesAndOutlines_Colors_Selector]));
			Wait(0.100, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Event Player.Outlines_Toggle);
				Start Forcing Player Outlines(All Players(All Teams), Event Player, False, Color(White), Always);
				Event Player.Outlines_Toggle = False;
				Small Message(Event Player, Custom String("  Outlines: OFF"));
			Else;
				Stop Forcing Player Outlines(All Players(All Teams), Event Player);
				Event Player.Outlines_Toggle = True;
				Small Message(Event Player, Custom String("  Outlines: On. this takes up to 5 sec"));
			End;
			Wait(0.500, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Regular_Player_Has_Title == True;
	}

	actions
	{
		Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), !Current Array Element.Outlines_Toggle), False,
			Color(White), Always);
		Start Forcing Player Outlines(Event Player, Filtered Array(All Players(All Teams), Current Array Element.Outlines_Toggle), True,
			Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Always);
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 6;
		Event Player.Signal == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			Event Player.Jumppad_Helper = Position Of(Event Player);
			Event Player.Jumppad_Entry[0] = Event Player.Jumppad_Helper;
			Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Jumppad_Info_Array[1]], Event Player.Jumppad_Helper,
				Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]], Visible To);
			Event Player.Jumppad_Entry[1] = Last Created Entity;
			Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Jumppad_Info_Array[0]], Evaluate Once(
				Event Player.Jumppad_Helper), Update Every Frame(Evaluate Once(
				Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2) + Evaluate Once(
				Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] - Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2)
				* Sine From Radians(Total Time Elapsed * 0.700)), Visible To Position and Radius);
			Event Player.Jumppad_Entry[2] = Last Created Entity;
			Event Player.Jumppad_Entry[3] = (Event Player.Jumppad_Info_Array[3] + 1) * 5;
			Event Player.Jumppad_Entry[4] = Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]];
			Modify Global Variable(Jumppad_Storage, Append To Array, Array(Event Player.Jumppad_Entry));
			Small Message(Event Player, Custom String("  Jumppad placed!"));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Global.Jumppad_Storage == Empty Array);
				Small Message(Event Player, Custom String("  No jumppads left to delete!"));
				Abort;
			End;
			Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Last Of(Global.Jumppad_Storage)[0], 1);
			Destroy Effect(Last Of(Global.Jumppad_Storage)[1]);
			Destroy Effect(Last Of(Global.Jumppad_Storage)[2]);
			Global.Jumppad_Storage = Array Slice(Global.Jumppad_Storage, 0, Count Of(Global.Jumppad_Storage) - 1);
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			If(Event Player.Jumppad_Info_Array[0] >= 14);
				Event Player.Jumppad_Info_Array[0] = 0;
			Else;
				Event Player.Jumppad_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  Inside Color: {0}", Global.Colors[Event Player.Jumppad_Info_Array[0]]));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Jumppad_Info_Array[1] >= 14);
				Event Player.Jumppad_Info_Array[1] = 0;
			Else;
				Event Player.Jumppad_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  Outside Color: {0}", Global.Colors[Event Player.Jumppad_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Jumppad_Info_Array[3] >= 7);
				Event Player.Jumppad_Info_Array[3] = 0;
			Else;
				Event Player.Jumppad_Info_Array[3] += 1;
			End;
			Small Message(Event Player, Custom String("  Jump Strength: {0}", (Event Player.Jumppad_Info_Array[3] + 1) * 5));
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.Jumppad_Info_Array[2] >= 3);
				Event Player.Jumppad_Info_Array[2] = 0;
			Else;
				Event Player.Jumppad_Info_Array[2] += 1;
			End;
			Small Message(Event Player, Custom String("  Radius: {0}m", Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]]));
		Else If(Is Button Held(Event Player, Button(Melee)));
			For Player Variable(Event Player, Jumppad_Loop, 0, Count Of(Global.Jumppad_Storage), 1);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Global.Jumppad_Storage[Event Player.Jumppad_Loop][0], 1);
				Destroy Effect(Global.Jumppad_Storage[Event Player.Jumppad_Loop][1]);
				Destroy Effect(Global.Jumppad_Storage[Event Player.Jumppad_Loop][2]);
			End;
			Global.Jumppad_Storage = Empty Array;
			Small Message(All Players(All Teams), Custom String("  All Jumppads have been deleted."));
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 6;
	}

	actions
	{
		Create Effect(Event Player, Ring, Global.Colors[Event Player.Jumppad_Info_Array[1]], Update Every Frame(Position Of(Event Player)),
			Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]], Position Radius and Color);
		Event Player.Jumppad_Preview[0] = Last Created Entity;
		Create Effect(Event Player, Ring, Global.Colors[Event Player.Jumppad_Info_Array[0]], Update Every Frame(Position Of(Event Player)),
			Update Every Frame(Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2 + (
			Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] - Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2)
			* Sine From Radians(Total Time Elapsed * 0.700)), Position Radius and Color);
		Event Player.Jumppad_Preview[1] = Last Created Entity;
		Wait Until(Event Player.Mode_Cycle != 6, 9999);
		Destroy Effect(Event Player.Jumppad_Preview[0]);
		Destroy Effect(Event Player.Jumppad_Preview[1]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.Jumppad_Storage, Distance Between(Current Array Element[0], Event Player)
			<= Current Array Element[4] + 0.200) == True;
		Is On Ground(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Full_Protection == False;
	}

	actions
	{
		Event Player.Jumppad_Helper = Filtered Array(Global.Jumppad_Storage, Distance Between(Current Array Element[0], Event Player)
			<= Current Array Element[4] + 0.300);
		Play Effect(All Players(All Teams), Explosion Sound, Null, Event Player, 30);
		Apply Impulse(Event Player, Vector(0, 1, 0), Event Player.Jumppad_Helper[0][3], To World, Incorporate Contrary Motion);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 7;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Is_Flying == False);
				Event Player.Is_Flying = True;
				Set Gravity(Event Player, 0);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else;
				Event Player.Is_Flying = False;
				If(Global.Gravity_Toggle);
					Set Gravity(Event Player, 10);
				Else;
					Set Gravity(Event Player, Event Player.Player_Modification[3]);
				End;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)) && Global.Gravity_Toggle == False);
			Abort If((Event Player.High_Rank || Event Player == Host Player) == False);
			Global.Gravity_Toggle = True;
			Big Message(All Players(All Teams), Custom String("Fly To The Moon"));
			For Global Variable(Gravity_Helper, 0, Count Of(All Players(All Teams)), 1);
				If(All Players(All Teams)[Global.Gravity_Helper].Is_Flying == False);
					Set Gravity(All Players(All Teams)[Global.Gravity_Helper], 10);
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Global.Gravity_Toggle);
			Abort If((Event Player.High_Rank || Event Player == Host Player) == False);
			Global.Gravity_Toggle = False;
			Big Message(All Players(All Teams), Custom String("Welcome Back On Earth"));
			For Global Variable(Gravity_Helper, 0, Count Of(All Players(All Teams)), 1);
				If(All Players(All Teams)[Global.Gravity_Helper].Is_Flying == False);
					Set Gravity(All Players(All Teams)[Global.Gravity_Helper], All Players(All Teams)[Global.Gravity_Helper].Player_Modification[3]);
				End;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Flying == True;
		(Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump))) == True;
	}

	actions
	{
		While(Is Button Held(Event Player, Button(Jump)));
			Apply Impulse(Event Player, Up, 4, To World, Cancel Contrary Motion);
			Wait(0.250, Ignore Condition);
		End;
		While(Is Button Held(Event Player, Button(Crouch)));
			Apply Impulse(Event Player, Down, 4, To World, Cancel Contrary Motion);
			Wait(0.025, Ignore Condition);
		End;
		Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 8 || Event Player.Mode_Cycle_Default == 4) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Bugtest new grav"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] += 10 ^ Event Player.Modification_Scalar_Selector;
			If(Event Player.Player_Modification[0] > 5000);
				Event Player.Player_Modification[0] = 5000;
				Small Message(Event Player, Custom String("  {0} is at maximum! That's gotta sting...",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[1] > 1000);
				Event Player.Player_Modification[1] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Gotta go fast!",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[2] > 1000);
				Event Player.Player_Modification[2] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Don't launch them into orbit.",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[3] > 500);
				Event Player.Player_Modification[3] = 500;
				Small Message(Event Player, Custom String("  {0} is at maximum! You're grounded, go to your room.",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] -= 10 ^ Event Player.Modification_Scalar_Selector;
			If(Event Player.Player_Modification[3] < 10 && !(Event Player.High_Rank || Event Player.Mod_Rank));
				Event Player.Player_Modification[3] = 10;
				Small Message(Event Player, Custom String("  Gravity minimum for non-angels is 10%."));
			End;
			If(Event Player.Player_Modification[Event Player.Modification_Mode_Selector] < 0);
				Event Player.Player_Modification[Event Player.Modification_Mode_Selector] = 0;
				Small Message(Event Player, Custom String("  {0} is at minimum! Can't go below 0...",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Modification_Mode_Selector >= 3);
				If(Event Player.High_Rank || Event Player.Mod_Rank);
					Event Player.Modification_Mode_Selector = 0;
				Else;
					Event Player.Modification_Mode_Selector = 1;
				End;
			Else;
				Event Player.Modification_Mode_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Modification_Scalar_Selector >= 3);
				Event Player.Modification_Scalar_Selector = 0;
			Else;
				Event Player.Modification_Scalar_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] = 100;
			Small Message(Event Player, Custom String("  {0} of {1} has been reset.",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
			Small Message(Event Player, Custom String("  All stats of {0} have been reset.", Event Player));
		End;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		Set Move Speed(Event Player, Event Player.Player_Modification[1]);
		Set Knockback Dealt(Event Player, Event Player.Player_Modification[2]);
		If(Global.Gravity_Toggle == False);
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 9;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Is Button Held(Event Player, Button(Ability 1)));
		If(!(Is Button Held(Event Player, Button(Ultimate)) || Is Button Held(Event Player, Button(Ability 2))));
			If(Event Player.Target_Shortcut.High_Rank || Event Player.Target_Shortcut.Mod_Rank);
				Small Message(Event Player, Custom String("  Cannot Modify Chillers"));
				Abort;
			End;
		End;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Modification_Mode_Selector >= 3);
				Event Player.Modification_Mode_Selector = 0;
			Else;
				Event Player.Modification_Mode_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Modification_Scalar_Selector >= 3);
				Event Player.Modification_Scalar_Selector = 0;
			Else;
				Event Player.Modification_Scalar_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] += 10 ^ Event Player.Modification_Scalar_Selector;
			If(Event Player.Target_Shortcut.Player_Modification[0] > 5000);
				Event Player.Target_Shortcut.Player_Modification[0] = 5000;
				Small Message(Event Player, Custom String("  {0} is at maximum! That's gotta sting...",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[1] > 1000);
				Event Player.Target_Shortcut.Player_Modification[1] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Gotta go fast!",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[2] > 1000);
				Event Player.Target_Shortcut.Player_Modification[2] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Don't launch them into orbit.",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[3] > 500);
				Event Player.Target_Shortcut.Player_Modification[3] = 500;
				Small Message(Event Player, Custom String("  {0} is at maximum! You're grounded, go to your room.",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] -= 10 ^ Event Player.Modification_Scalar_Selector;
			If(Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] < 0);
				Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] = 0;
				Small Message(Event Player, Custom String("  {0} is at minimum! Can't go below 0...",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] = 100;
			Small Message(Event Player, Custom String("  {0} of {1} has been reset.",
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player.Target_Shortcut));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Target_Shortcut.Player_Modification = Array(100, 100, 100, 100, 100);
			Small Message(Event Player, Custom String("  All stats of {0} have been reset.", Event Player.Target_Shortcut));
		End;
		Set Damage Dealt(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[0]);
		Set Move Speed(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[1]);
		Set Knockback Dealt(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[2]);
		If(Global.Gravity_Toggle == False);
			Set Gravity(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[3]);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 10 || Event Player.Mode_Cycle_Default == 5) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
			Disallow Button(Event Player.Target_Lock, Button(Ultimate));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Lock, 1);
			Start Forcing Player Position(Event Player.Target_Lock, World Vector Of(Vector(X Component Of(Event Player), (
				Vertical Facing Angle Of(Event Player) - Vertical Facing Angle Of(Event Player) * 2) / 10, Z Component Of(Event Player) + 5),
				Event Player, Rotation And Translation), True);
			Event Player.Target_Lock.inAction[0] = True;
			Wait(0.500, Ignore Condition);
			Wait Until((Is Button Held(Event Player, Button(Primary Fire)) && Event Player.Is_Crouch_On == True) || (Is Button Held(
				Event Player, Button(Secondary Fire)) && Event Player.Is_Crouch_On == True) || Event Player.Target_Lock.Full_Protection,
				99999);
			Event Player.Signal = False;
			Stop Forcing Player Position(Event Player.Target_Lock);
			Event Player.Target_Lock.inAction[0] = False;
			If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.Is_Crouch_On == True);
				Apply Impulse(Event Player.Target_Lock, Direction Towards(Event Player, Event Player.Target_Lock), 70, To World,
					Cancel Contrary Motion);
			End;
			Allow Button(Event Player.Target_Lock, Button(Ultimate));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Lock, 1);
			Else If(Is Button Held(Event Player, Button(Ultimate)));
				If((Event Player.High_Rank || Event Player.Mod_Rank || Event Player.Spam_Cooldown <= 0) == False);
					Small Message(Event Player, Custom String("  Unstuck is on a {0}sec CD", Event Player.Spam_Cooldown));
					Abort;
				End;
				Event Player.Spam_Cooldown = 3;
				Stop Forcing Player Position(Event Player);
				Event Player.Target_Lock.inAction[0] = False;
				Detach Players(Event Player);
				Event Player.Target_Lock.inAction[1] = False;
				If(Count Of(Event Player.Leash_To) >= 1);
					For Player Variable(Event Player, Leash_Index, 0, Count Of(Event Player.Leash_To), 1);
						Event Player.Leash_Helper = Index Of Array Value(Event Player.Leash_To[Event Player.Leash_Index].Leash_List, Event Player);
						Destroy Effect(Event Player.Leash_To[Event Player.Leash_Index].Leash_IDs[Event Player.Leash_Helper]);
						Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_List, Remove From Array By Value, Event Player);
						Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_IDs, Remove From Array By Index,
							Event Player.Leash_Helper);
					End;
				End;
				Event Player.Leash_To = Empty Array;
				If(Current Map == Map(Kanezaka));
					Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
				Else;
					Teleport(Event Player, Spawn Points(Team Of(Event Player)));
				End;
				Resurrect(Event Player);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
			End;
			Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 11 || Event Player.Mode_Cycle_Default == 6) == True;
		Event Player.Signal == True;
		Event Player.Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Scale_Prev = 1;
			Event Player.Scale_Real = 1;
			Stop Scaling Player(Event Player);
			Event Player.Player_Modification[4] = Event Player.Scale_Real * 100;
			Set Max Health(Event Player, Event Player.Player_Modification[4]);
			Wait(0.100, Ignore Condition);
			Heal(Event Player, Null, 12000);
			If(!Event Player.Ghost_Mode);
				Enable Movement Collision With Environment(Event Player);
				Enable Movement Collision With Players(Event Player);
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Scale_Prev += 0.100;
				If(Event Player.High_Rank || Event Player.Mod_Rank);
					Modify Player Variable(Event Player, Scale_Prev, Min, 20);
				Else;
					Modify Player Variable(Event Player, Scale_Prev, Min, 2);
				End;
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Scale_Prev -= 0.100;
				If(Event Player.High_Rank || Event Player.Mod_Rank);
					Modify Player Variable(Event Player, Scale_Prev, Max, 0.100);
				Else;
					Modify Player Variable(Event Player, Scale_Prev, Max, 0.200);
				End;
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Call Subroutine(Scale_Progress);
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Scale_Progress;
	}

	actions
	{
		Event Player.Progress_Lock = True;
		If(Event Player.Scale_Prev >= 4 && !Event Player.Ghost_Mode);
			Disable Movement Collision With Environment(Event Player, False);
			Disable Movement Collision With Players(Event Player);
		Else If(Event Player.Scale_Prev < 4 && !Event Player.Ghost_Mode);
			Enable Movement Collision With Environment(Event Player);
			Enable Movement Collision With Players(Event Player);
		End;
		Start Scaling Player(Event Player, Event Player.Scale_Real, True);
		Chase Player Variable Over Time(Event Player, Scale_Real, Event Player.Scale_Prev, 2, None);
		Wait Until(Event Player.Scale_Real == Event Player.Scale_Prev || Event Player.Progress_Stop, 99999);
		Stop Chasing Player Variable(Event Player, Scale_Real);
		Event Player.Player_Modification[4] = Event Player.Scale_Real * 100;
		Set Max Health(Event Player, Event Player.Player_Modification[4]);
		Wait(0.100, Ignore Condition);
		Heal(Event Player, Null, 12000);
		Event Player.Progress_Lock = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 11 || Event Player.Mode_Cycle_Default == 6) == True;
		Event Player.Signal == True;
		Event Player.Progress_Lock == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(
			Event Player, Button(Reload)));
			Event Player.Progress_Stop = True;
			Wait(0.100, Ignore Condition);
			Event Player.Progress_Stop = False;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 12;
		Event Player.Signal == True;
		Player Closest To Reticle(Event Player, All Teams).Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Lock == Null);
		Abort If(Event Player.Target_Lock.Full_Protection);
		If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Target_Lock.Scale_Prev = 1;
			Event Player.Target_Lock.Scale_Real = 1;
			Stop Scaling Player(Event Player.Target_Lock);
			Event Player.Target_Lock.Player_Modification[4] = Event Player.Target_Lock.Scale_Real * 100;
			Set Max Health(Event Player.Target_Lock, Event Player.Target_Lock.Player_Modification[4]);
			Wait(0.100, Ignore Condition);
			Heal(Event Player.Target_Lock, Null, 12000);
			If(!Event Player.Target_Lock.Ghost_Mode);
				Enable Movement Collision With Environment(Event Player.Target_Lock);
				Enable Movement Collision With Players(Event Player.Target_Lock);
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player.Target_Lock, 1);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Target_Lock.Scale_Prev += 0.100;
				Modify Player Variable(Event Player.Target_Lock, Scale_Prev, Min, 20);
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Target_Lock.Scale_Prev -= 0.100;
				Modify Player Variable(Event Player.Target_Lock, Scale_Prev, Max, 0.100);
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.Target_Lock.Remote_Scale = True;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Remote_Scale == True;
		Event Player.Progress_Lock == False;
	}

	actions
	{
		Call Subroutine(Scale_Progress);
		Event Player.Remote_Scale = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 12;
		Event Player.Signal == True;
		Player Closest To Reticle(Event Player, All Teams).Progress_Lock == True;
	}

	actions
	{
		disabled Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Event Player.Target_Lock.Progress_Stop = True;
		Wait(0.100, Ignore Condition);
		Event Player.Target_Lock.Progress_Stop = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 13;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Event Player.Target_Shortcut.playersUnderControl = Append To Array(Event Player.Target_Shortcut.playersUnderControl, Event Player);
			Attach Players(Event Player, Event Player.Target_Shortcut, Vector(0, 2, 0));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Shortcut, 1);
			Event Player.inAction[1] = True;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Attach Players(Event Player.Target_Shortcut, Event Player, Vector(0, 2, 0));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Event Player.playersUnderControl = Append To Array(Event Player.playersUnderControl, Event Player.Target_Shortcut);
			Event Player.Target_Shortcut.inAction[1] = True;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Attach Players(Event Player.Target_Shortcut, Event Player, Vector(0, 0, 0.400));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Event Player.playersUnderControl = Append To Array(Event Player.playersUnderControl, Event Player.Target_Shortcut);
			Event Player.Target_Shortcut.inAction[1] = True;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Detach Players(Event Player);
			Stop Forcing Player Position(Event Player);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Event Player.inAction[1] = False;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Detach Players(Event Player.Target_Shortcut);
			Stop Forcing Player Position(Event Player.Target_Shortcut);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Event Player.Target_Shortcut.inAction[1] = False;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Event Player.Print = Random Real(1, 4);
			Start Forcing Player Position(Event Player, Eye Position(Evaluate Once(Player Closest To Reticle(Event Player, All Teams)))
				+ Vector((2 + Evaluate Once(Event Player.Print) * 0.500) * Cosine From Degrees(Total Time Elapsed * 10 * Evaluate Once(
				Event Player.Print)), 0.300 * Sine From Radians(Total Time Elapsed * 0.500 * Evaluate Once(Random Real(1, 4))), (
				2 + Evaluate Once(Event Player.Print) * 0.500) * Sine From Degrees(Total Time Elapsed * 10 * Evaluate Once(
				Event Player.Print))), True);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		End;
		Event Player.Target_Shortcut = Null;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 14;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Add anti colission to target"
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Shortcut == Null);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Abort If(!Has Spawned(Event Player.Target_Shortcut));
			Abort If(Array Contains(Event Player.Leash_List, Event Player.Target_Shortcut));
			If(Event Player.Promoted_Rank && Event Player != Host Player && Count Of(Event Player.Leash_List) >= 1);
				Small Message(Event Player, Custom String("  Promoted can only leash 1 player"));
				Abort;
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Shortcut, 1);
			Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player.Target_Shortcut), Event Player, Color(Rose),
				Visible To Position and Radius);
			Event Player.Target_Shortcut.inAction[2] = True;
			Modify Player Variable(Event Player, Leash_IDs, Append To Array, Last Created Entity);
			Modify Player Variable(Event Player, Leash_List, Append To Array, Event Player.Target_Shortcut);
			Modify Player Variable(Event Player.Target_Shortcut, Leash_To, Append To Array, Event Player);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Array Contains(Event Player.Leash_List, Event Player.Target_Shortcut));
				Event Player.Leash_Helper = Index Of Array Value(Event Player.Leash_List, Event Player.Target_Shortcut);
				Destroy Effect(Event Player.Leash_IDs[Event Player.Leash_Helper]);
				Wait(0.050, Ignore Condition);
				Modify Player Variable(Event Player, Leash_IDs, Remove From Array By Index, Event Player.Leash_Helper);
				Modify Player Variable(Event Player, Leash_List, Remove From Array By Value, Event Player.Target_Shortcut);
				Modify Player Variable(Event Player.Target_Shortcut, Leash_To, Remove From Array By Value, Event Player);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
				Event Player.Target_Shortcut.inAction[2] = False;
			End;
			If(Array Contains(Event Player.Target_Shortcut.Leash_List, Event Player));
				Event Player.Leash_Helper = Index Of Array Value(Event Player.Target_Shortcut.Leash_List, Event Player);
				Destroy Effect(Event Player.Target_Shortcut.Leash_IDs[Event Player.Leash_Helper]);
				Wait(0.050, Ignore Condition);
				Modify Player Variable(Event Player.Target_Shortcut, Leash_IDs, Remove From Array By Index, Event Player.Leash_Helper);
				Modify Player Variable(Event Player.Target_Shortcut, Leash_List, Remove From Array By Value, Event Player);
				Modify Player Variable(Event Player, Leash_To, Remove From Array By Value, Event Player.Target_Shortcut);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				Event Player.inAction[2] = False;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Event Player.Target_Shortcut.Full_Protection);
			Abort If(!Has Spawned(Event Player.Target_Shortcut));
			Abort If(Array Contains(Event Player.Target_Shortcut.Leash_List, Event Player));
			Event Player.Target_Shortcut.Leash_Spawn = Array(Event Player, Event Player.Target_Shortcut);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Event Player.inAction[2] = True;
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Leash_To != Empty Array;
		Event Player.Leash_To != Null;
	}

	actions
	{
		If(Event Player.Full_Protection);
			For Player Variable(Event Player, Leash_Index, 0, Count Of(Event Player.Leash_To), 1);
				Event Player.Leash_Helper = Index Of Array Value(Event Player.Leash_To[Event Player.Leash_Index].Leash_List, Event Player);
				Destroy Effect(Event Player.Leash_To[Event Player.Leash_Index].Leash_IDs[Event Player.Leash_Helper]);
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_List, Remove From Array By Value, Event Player);
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_IDs, Remove From Array By Index,
					Event Player.Leash_Helper);
			End;
			Event Player.Leash_To = Empty Array;
		Else;
			Event Player.Leash_Index = Random Integer(0, Count Of(Event Player.Leash_To) - 1);
			If(Entity Exists(Event Player.Leash_To[Event Player.Leash_Index]));
				If(Distance Between(Event Player, Position Of(Event Player.Leash_To[Event Player.Leash_Index])) >= 4);
					Apply Impulse(Event Player, Direction Towards(Event Player, Position Of(Event Player.Leash_To[Event Player.Leash_Index])), 20,
						To World, Cancel Contrary Motion);
				End;
			Else;
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_List, Remove From Array By Value, Event Player);
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_IDs, Remove From Array By Index,
					Event Player.Leash_Helper);
			End;
			Wait(0.100, Ignore Condition);
			Loop If Condition Is True;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Leash_Spawn != Null;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player.Leash_Spawn[0]), Evaluate Once(
			Event Player.Leash_Spawn[1]), Color(Rose), Visible To Position and Radius);
		Modify Player Variable(Event Player.Leash_Spawn[1], Leash_IDs, Append To Array, Last Created Entity);
		Modify Player Variable(Event Player.Leash_Spawn[1], Leash_List, Append To Array, Event Player.Leash_Spawn[0]);
		Modify Player Variable(Event Player.Leash_Spawn[0], Leash_To, Append To Array, Event Player.Leash_Spawn[1]);
		Event Player.Leash_Spawn = Null;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Leash_List != Empty Array;
		Event Player.Leash_List != Null;
	}

	actions
	{
		For Player Variable(Event Player, Leash_Index, 0, Count Of(Event Player.Leash_List), 1);
			If(!Entity Exists(Event Player.Leash_List[Event Player.Leash_Index]));
				Destroy Effect(Event Player.Leash_IDs[Event Player.Leash_Index]);
				Modify Player Variable(Event Player, Leash_List, Remove From Array By Index, Event Player.Leash_Index);
				Modify Player Variable(Event Player, Leash_IDs, Remove From Array By Index, Event Player.Leash_Index);
			End;
		End;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crouch_On == False;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		Wait(0.350, Abort When False);
		If(Event Player.inAction[0] == True || Event Player.inAction[1] == True || Event Player.inAction[2] == True);
			Stop Forcing Player Position(Event Player);
			Detach Players(Event Player);
			For Player Variable(Event Player, Leash_Index, 0, Count Of(Event Player.Leash_To), 1);
				Event Player.Leash_Helper = Index Of Array Value(Event Player.Leash_To[Event Player.Leash_Index].Leash_List, Event Player);
				Destroy Effect(Event Player.Leash_To[Event Player.Leash_Index].Leash_IDs[Event Player.Leash_Helper]);
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_List, Remove From Array By Value, Event Player);
				Modify Player Variable(Event Player.Leash_To[Event Player.Leash_Index], Leash_IDs, Remove From Array By Index,
					Event Player.Leash_Helper);
			End;
			Event Player.Leash_To = Empty Array;
			Event Player.inAction[0] = False;
			Event Player.inAction[1] = False;
			Event Player.inAction[2] = False;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 15;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"Draw effects"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sphere"));
				"Sphere"
				While(Is Button Held(Event Player, Button(Primary Fire)));
					If(Entity Count >= 123);
						Small Message(Event Player, Custom String("  Maximum entity count reached!"));
						Abort;
					End;
					Create Effect(All Players(All Teams), Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
						Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
						Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
					Global.Drawing_Obj_Storage = Append To Array(Global.Drawing_Obj_Storage, Last Created Entity);
					Wait(0.120, Ignore Condition);
					Event Player.Signal = False;
				End;
				Abort;
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sparkles"));
				"Sparkles"
				Create Effect(All Players(All Teams), Sparkles, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Light Shaft"));
				"Light Shaft"
				Create Effect(All Players(All Teams), Light Shaft, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 7, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Orb"));
				"Orb"
				Create Effect(All Players(All Teams), Orb, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Ring"));
				"Ring"
				Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Cloud"));
				"Cloud"
				Create Effect(All Players(All Teams), Cloud, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Good Aura"));
				"Good Aura"
				Create Effect(All Players(All Teams), Good Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Bad Aura"));
				"Bad Aura"
				Create Effect(All Players(All Teams), Bad Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Ray Cast Hit Position(
					Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
					Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To);
			End;
			Global.Drawing_Obj_Storage = Append To Array(Global.Drawing_Obj_Storage, Last Created Entity);
		"Remove previous effect"
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.Drawing_Obj_Storage == Empty Array);
				Small Message(Event Player, Custom String("  No effects left to delete!"));
				Abort;
			End;
			Destroy Effect(Last Of(Global.Drawing_Obj_Storage));
			Global.Drawing_Obj_Storage = Array Slice(Global.Drawing_Obj_Storage, 0, Count Of(Global.Drawing_Obj_Storage) - 1);
		"Remove ALL effects"
		Else If(Is Button Held(Event Player, Button(Melee)));
			Destroy Effect(Global.Drawing_Obj_Storage);
			Global.Drawing_Obj_Storage = Empty Array;
			Small Message(All Players(All Teams), Custom String("  All Effects have been Cleared"));
			Modify Global Variable(actionsLog, append to array, custom string("[-] {0} cleared all effects [page 15]", Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(White), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		"Selectors, simple from 0 to specified endpoint"
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Drawing_Obj_Info_Array[1] >= 12);
				Event Player.Drawing_Obj_Info_Array[1] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}m", Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]]));
			Call Subroutine(Drawing_Objects_Preview);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Drawing_Obj_Info_Array[2] >= 7);
				Event Player.Drawing_Obj_Info_Array[2] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[2] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]]));
			Call Subroutine(Drawing_Objects_Preview);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Drawing_Obj_Info_Array[0] >= 14);
				Event Player.Drawing_Obj_Info_Array[0] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Colors[Event Player.Drawing_Obj_Info_Array[0]]));
			Call Subroutine(Drawing_Objects_Preview);
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Drawing_Objects_Preview;
	}

	actions
	{
		Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
		If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sphere"));
			Create Effect(Event Player, Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sparkles"));
			Create Effect(Event Player, Sparkles, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Light Shaft"));
			Create Effect(Event Player, Light Shaft, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 7,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Orb"));
			Create Effect(Event Player, Orb, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(Ray Cast Hit Position(
				Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
				Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Ring"));
			Create Effect(Event Player, Ring, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(Ray Cast Hit Position(
				Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
				Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Cloud"));
			Create Effect(Event Player, Cloud, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(Ray Cast Hit Position(
				Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2, All Players(All Teams),
				Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]], Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Good Aura"));
			Create Effect(Event Player, Good Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Bad Aura"));
			Create Effect(Event Player, Bad Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		End;
		Event Player.Drawing_Obj_Info_Array[3] = Last Created Entity;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle != 15;
	}

	actions
	{
		Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 15;
	}

	actions
	{
		Call Subroutine(Drawing_Objects_Preview);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 16;
		Event Player.Signal == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Drawing_Obj_Info_Array[0] >= 14);
				Event Player.Drawing_Obj_Info_Array[0] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Colors[Event Player.Drawing_Obj_Info_Array[0]]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Beams_Selector >= 2);
				Event Player.Beams_Selector = 0;
			Else;
				Event Player.Beams_Selector += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Beams[Event Player.Beams_Selector]));
			Call Subroutine(Beams_Preview);
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.Drawing_Obj_Storage_Beams == Empty Array);
				Small Message(Event Player, Custom String("  No beams left to delete!"));
				Abort;
			End;
			Destroy Effect(Last Of(Global.Drawing_Obj_Storage_Beams));
			Global.Drawing_Obj_Storage_Beams = Array Slice(Global.Drawing_Obj_Storage_Beams, 0, Count Of(Global.Drawing_Obj_Storage_Beams)
				- 1);
		Else If(Is Button Held(Event Player, Button(Melee)));
			Destroy Effect(Global.Drawing_Obj_Storage_Beams);
			Global.Drawing_Obj_Storage_Beams = Empty Array;
			Small Message(All Players(All Teams), Custom String("   All Beams Are Cleared"));
			Modify Global Variable(actionsLog, append to array, custom string("[-] {0} cleared all beams [page 16]", Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(White), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 16;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			Event Player.Positions_For_Beams[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 2, All Players(All Teams), Event Player, True);
			Call Subroutine(Beams_Preview);
			Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 1);
			Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 30);
			Event Player.Signal = False;
			Event Player.Positions_For_Beams[1] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 2, All Players(All Teams), Event Player, True);
			If(Event Player.Beams_Selector == 0);
				Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			Else If(Event Player.Beams_Selector == 1);
				Create Beam Effect(All Players(All Teams), Bad Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			Else If(Event Player.Beams_Selector == 2);
				Create Beam Effect(All Players(All Teams), Grapple Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			End;
			Global.Drawing_Obj_Storage_Beams = Append To Array(Global.Drawing_Obj_Storage_Beams, Last Created Entity);
			Event Player.Positions_For_Beams[0] = Null;
			Event Player.Positions_For_Beams[1] = Null;
			Destroy Effect(Event Player.Beams_Preview_ID[0]);
			Event Player.Beams_Preview_ID[0] = Null;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Beams_Preview;
	}

	actions
	{
		Abort If(Event Player.Positions_For_Beams[0] == Null);
		Destroy Effect(Event Player.Beams_Preview_ID[0]);
		If(Event Player.Beams_Selector == 0);
			Create Beam Effect(Event Player, Good Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Position Radius and Color);
		Else If(Event Player.Beams_Selector == 1);
			Create Beam Effect(Event Player, Bad Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Position Radius and Color);
		Else If(Event Player.Beams_Selector == 2);
			Create Beam Effect(Event Player, Grapple Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(
				Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
				All Players(All Teams), Event Player, True)), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Position Radius and Color);
		End;
		Event Player.Beams_Preview_ID[0] = Last Created Entity;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 17;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Shortcut == Null);
		Abort If(Event Player.Target_Shortcut.Full_Protection && !Is Dummy Bot(Event Player.Target_Shortcut));
		If(!(Is Button Held(Event Player, Button(Melee)) || Is Button Held(Event Player, Button(Ability 1))));
			Cancel Primary Action(Event Player.Target_Shortcut);
			Destroy Effect(Event Player.Target_Shortcut.ExtraEffect_ID);
			Destroy Icon(Event Player.Target_Shortcut.ExtraEffect_ID);
		End;
		If(Event Player.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(Mercy));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut, Hero Icon String(Hero(
				Mercy))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(D.Va));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut, Hero Icon String(Hero(
				D.Va))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(Widowmaker));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut, Hero Icon String(Hero(
				Widowmaker))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero Of(Event Player));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut, Hero Icon String(Hero Of(
				Event Player))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		End;
		Wait(0.100, Ignore Condition);
		Stop Forcing Player To Be Hero(Event Player.Target_Shortcut);
		Stop Forcing Player To Be Hero(Event Player);
		Event Player.Bot_CD = 3;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 18;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Event Player.safezone_Info_Array[2] == Null);
			Abort If(Event Player.safezone_Info_Array[1] >= 4 && !Current Map == Map(Paris));
			Abort If(Event Player.safezone_Info_Array[1] >= 10 && Current Map == Map(Paris));
			If(Is True For Any(All Players(All Teams), Current Array Element != Event Player && ((!Array Contains(Event Player.safezone_List,
				Current Array Element) && Distance Between(Current Array Element, Event Player.safezone_Info_Array[0])
				<= Event Player.safezone_Info_Array[1] + 0.700) || (Current Array Element.safezone_Info_Array[2] != Null && Distance Between(
				Current Array Element.safezone_Info_Array[0], Event Player.safezone_Info_Array[0])
				<= Event Player.safezone_Info_Array[1] + 0.700 + Current Array Element.safezone_Info_Array[1]))));
				Small Message(Event Player, Custom String("  Too close to untrusted player or other safezone!"));
				Wait(0.500, Ignore Condition);
				Abort;
			End;
			If(Current Map == Map(Paris));
				Event Player.safezone_Info_Array[1] = Min(10, Event Player.safezone_Info_Array[1] + 0.500);
			Else;
				Event Player.safezone_Info_Array[1] = Min(4, Event Player.safezone_Info_Array[1] + 0.500);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Event Player.safezone_Info_Array[2] == Null);
			Event Player.safezone_Info_Array[1] = Max(1, Event Player.safezone_Info_Array[1] - 0.500);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(!Is On Ground(Event Player));
				Small Message(Event Player, Custom String("  Cannot place in mid-air"));
				Abort;
			End;
			If(Is True For Any(All Players(All Teams), Current Array Element != Event Player && ((!Array Contains(Event Player.safezone_List,
				Current Array Element) && Distance Between(Current Array Element, Event Player) <= Event Player.safezone_Info_Array[1] + 0.200)
				|| (Current Array Element.safezone_Info_Array[2] != Null && Distance Between(Current Array Element.safezone_Info_Array[0],
				Event Player) <= Event Player.safezone_Info_Array[1] + 0.200 + Current Array Element.safezone_Info_Array[1]))));
				Small Message(Event Player, Custom String("  Too close to untrusted player or other safezone!"));
				Wait(0.500, Ignore Condition);
				Abort;
			End;
			Event Player.safezone_Info_Array[0] = Position Of(Event Player);
			Destroy Effect(Event Player.safezone_Info_Array[2]);
			Destroy In-World Text(Event Player.safezone_Info_Array[3]);
			Create Effect(All Players(All Teams), Ring, Distance Between(Event Player, Event Player.safezone_Info_Array[0])
				<= Event Player.safezone_Info_Array[1] - 0.100 ? Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255) : Color(Gray), Event Player.safezone_Info_Array[0],
				Event Player.safezone_Info_Array[1], Visible To Position Radius and Color);
			Event Player.safezone_Info_Array[2] = Last Created Entity;
			Create In-World Text(All Players(All Teams), Custom String("Safezone of {0}\n", Event Player), Event Player.safezone_Info_Array[0],
				1.100, Clip Against Surfaces, Visible To Position and Color, Distance Between(Event Player,
				Event Player.safezone_Info_Array[0]) <= Event Player.safezone_Info_Array[1] - 0.100 ? Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255) : Color(Gray),
				Default Visibility);
			Event Player.safezone_Info_Array[3] = Last Text ID;
			Small Message(Event Player, Custom String("  Safezone created/moved"));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.safezone_Info_Array[2] == Null);
				Small Message(Event Player, Custom String("  No Safezone to remove!"));
				Abort;
			End;
			Destroy Effect(Event Player.safezone_Info_Array[2]);
			Destroy In-World Text(Event Player.safezone_Info_Array[3]);
			Event Player.safezone_Info_Array[2] = Null;
			Event Player.safezone_Info_Array[3] = Null;
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Event Player.safezone_Info_Array[0], 1);
			Small Message(Event Player, Custom String("  safezone erased"));
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(!Array Contains(Event Player.safezone_List, Player Closest To Reticle(Event Player, All Teams)));
				Modify Player Variable(Event Player, safezone_List, Append To Array, Player Closest To Reticle(Event Player, All Teams));
				Small Message(Event Player, Custom String("  {0} was added to your safezone", Player Closest To Reticle(Event Player, All Teams)));
				Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("  {0} added you to their safezone",
					Event Player));
			Else;
				Small Message(Event Player, Custom String("  {0} is already in your safezone", Player Closest To Reticle(Event Player,
					All Teams)));
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Distance Between(Player Closest To Reticle(Event Player, All Teams), Event Player.safezone_Info_Array[0])
				<= Event Player.safezone_Info_Array[1] + 0.200 && Event Player.safezone_Info_Array[2] != Null);
				Small Message(Event Player, Custom String("  Cannot perform on players within safezone"));
				Abort;
			End;
			If(Array Contains(Event Player.safezone_List, Player Closest To Reticle(Event Player, All Teams)));
				Modify Player Variable(Event Player, safezone_List, Remove From Array By Value, Player Closest To Reticle(Event Player,
					All Teams));
				Small Message(Event Player, Custom String("  {0} was removed from your safezone", Player Closest To Reticle(Event Player,
					All Teams)));
				Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("  {0} removed you from their safezone",
					Event Player));
			Else;
				Small Message(Event Player, Custom String("  {0} is not in your safezone", Player Closest To Reticle(Event Player, All Teams)));
			End;
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.safezone_Info_Array[2] != Null;
		Distance Between(Event Player, Event Player.safezone_Info_Array[0]) <= Event Player.safezone_Info_Array[1] - 0.100;
	}

	actions
	{
		Event Player.safezone_Helper = Players Within Radius(Event Player.safezone_Info_Array[0], Event Player.safezone_Info_Array[1],
			All Teams, Off);
		For Player Variable(Event Player, safezone_Index, 0, Count Of(Event Player.safezone_Helper), 1);
			If(Array Contains(Event Player.safezone_List, Event Player.safezone_Helper[Event Player.safezone_Index]));
				Event Player.safezone_Index += 1;
				Continue;
			End;
			Apply Impulse(Event Player.safezone_Helper[Event Player.safezone_Index], Up, 20, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player.safezone_Helper[Event Player.safezone_Index], Direction Towards(Event Player.safezone_Info_Array[0],
				Event Player.safezone_Helper[Event Player.safezone_Index]), 50, To World, Cancel Contrary Motion);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 19 || Event Player.Mode_Cycle_Default == 14) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Big Message(Event Player, Custom String("Coin Toss: {0}", Global.Dice_String[Random Integer(0, 1)]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Big Message(Event Player, Custom String("Rock Paper Scissors: {0}", Global.Dice_String[Random Integer(2, 4)]));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Big Message(Event Player, Custom String("6-Sided-Dice Roll: {0}", Random Integer(1, 6)));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Big Message(Event Player, Custom String("20-Sided-Dice Roll: {0}", Random Integer(1, 20)));
		Else If(Is Button Held(Event Player, Button(Reload)));
			Big Message(Event Player, Custom String("%-Dice Roll: {0}%", Random Integer(1, 10) * 10));
		End;
		If(!Is Button Held(Event Player, Button(Ability 1)));
			Wait(3, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 20 || Event Player.Mode_Cycle_Default == 7) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.Voice_Pitch = Min(1.500, Event Player.Voice_Pitch + 0.250);
			Start Modifying Hero Voice Lines(Event Player, Event Player.Voice_Pitch, False);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Voice_Pitch = Max(0.500, Event Player.Voice_Pitch - 0.250);
			Start Modifying Hero Voice Lines(Event Player, Event Player.Voice_Pitch, False);
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Voice_Pitch = False;
			Start Modifying Hero Voice Lines(Event Player, Sine From Radians(Total Time Elapsed * 2) / 1.700 + 1, True);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Voice_Pitch = 1;
			Stop Modifying Hero Voice Lines(Event Player);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection || Player Closest To Reticle(Event Player, All Teams)
				.High_Rank);
			Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Stunned, 1);
				Wait(0.020, Ignore Condition);
			End;
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Abort If(!Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)));
				Wait Until(!(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))), 3);
				Abort If(!(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))));
				Skip If(Hero Of(Event Player) == Hero(Bastion), 1);
				Event Player.Heaven_Strike_ID[101] = True;
			End;
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Clear Status(Event Player, Phased Out);
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Set Status(Event Player, Null, Stunned, 1);
				Wait(0.020, Ignore Condition);
			End;
			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 21 || Event Player.Mode_Cycle_Default == 15) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Lock.Full_Protection);
		Abort If(Is Button Held(Event Player, Button(Reload)) || Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(
			Event Player, Button(Melee)));
		If(Event Player.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Big Message(Event Player.Target_Lock, Custom String("{0} Likes you :з", Event Player));
			Small Message(Event Player, Custom String("  Like has been sent to {0}", Event Player.Target_Lock));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Big Message(Event Player.Target_Lock, Custom String(" {1} {0} Loves you {1}", Event Player, Icon String(Heart)));
			Small Message(Event Player, Custom String("  Love for... {0}", Event Player.Target_Lock));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Big Message(Event Player.Target_Lock, Custom String("  {0} Dies of cringe from you {1}", Event Player, Icon String(Skull)));
			Small Message(Event Player, Custom String("  Dies of cringe sent to {0}", Event Player.Target_Lock));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Big Message(Event Player.Target_Lock, Custom String("  {0} sends you a hug {1}", Event Player, Ability Icon String(Hero(Doomfist),
				Button(Ability 2))));
			Small Message(Event Player, Custom String("  Hug sent to {0}", Event Player.Target_Lock));
		End;
		If(Event Player.High_Rank || Event Player.Mod_Rank);
			Event Player.Bot_CD = 3;
		Else;
			Event Player.Bot_CD = 15;
		End;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 22 || Event Player.Mode_Cycle_Default == 8) == True;
		Event Player.Signal == True;
		Event Player.Target_Select.Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))), 3);
			Abort If(Not(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))));
			Abort If(Not(Custom String("Unte{0}{1}e{2}t", Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 0), Char In String(Custom String("{0}", Event Player), 3)) == Custom String("UnterWelt") ||
				Custom String("{0}oa{2}{1}", Char In String(Custom String("{0}", Event Player), 0), Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 3)) == Custom String("koala") ||
				Custom String("{1}utlas{0}", Char In String(Custom String("{0}", Event Player), 3), Char In String(Custom String("{0}", Event Player), 1), 
				Char In String(Custom String("{0}", Event Player), 3)) == Custom String("outlast")));
			Destroy HUD Text(Event Player.Mod_Name_ID[0]);
			Event Player.Heaven_Strike_ID[100] = True;
		End;
		Abort If((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Ultimate))) == False);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams)
				.Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			Event Player.Target_Select = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Select == Null);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.Target_Select = Event Player;
		End;
		Event Player.Target_Select.Progress_Lock = True;
		Set Status(Event Player.Target_Select, Null, Rooted, 9999);
		Big Message(All Players(All Teams), Custom String("{0} is going to Heaven.", Event Player.Target_Select));
		"Intro"
		Event Player.Target_Select.Heaven_Strike_Radius = 3;
		Create Effect(All Players(All Teams), Light Shaft, Color(Sky Blue), Position Of(Event Player.Target_Select),
			Event Player.Target_Select.Heaven_Strike_Radius, Position and Radius);
		Event Player.Target_Select.Heaven_Strike_ID[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Red), Position Of(Event Player.Target_Select),
			Event Player.Target_Select.Heaven_Strike_Radius, Position and Radius);
		Event Player.Target_Select.Heaven_Strike_ID[1] = Last Created Entity;
		Chase Player Variable Over Time(Event Player.Target_Select, Heaven_Strike_Radius, 0.075, 5, Destination and Duration);
		Wait(5, Ignore Condition);
		Stop Chasing Player Variable(Event Player.Target_Select, Heaven_Strike_Radius);
		Destroy Effect(Event Player.Target_Select.Heaven_Strike_ID[0]);
		Destroy Effect(Event Player.Target_Select.Heaven_Strike_ID[1]);
		"Explosion"
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Event Player.Target_Select), 3);
		Play Effect(All Players(All Teams), Explosion Sound, Null, Position Of(Event Player.Target_Select), 200);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Position Of(Event Player.Target_Select), 3);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player.Target_Select), 3);
		"Outro"
		Teleport(Event Player.Target_Select, Vector(0, 1000, 0));
		Set Facing(Event Player.Target_Select, Down, To World);
		Set Gravity(Event Player.Target_Select, 0);
		Wait(5, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Kill(Event Player.Target_Select, Event Player);
		If(Is Alive(Event Player.Target_Select));
			Wait(1, Ignore Condition);
			Kill(Event Player.Target_Select, Event Player);
		End;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		Set Gravity(Event Player.Target_Select, Event Player.Player_Modification[3]);
		Clear Status(Event Player.Target_Select, Rooted);
		Event Player.Target_Select.Progress_Lock = False;
		Event Player.Target_Select = Custom String("--- No Target ---");
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 23 || Event Player.Mode_Cycle_Default == 9) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			"Simple validator for icons, if player has > 2 icons: abort"
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Array[2] = 0;
			Event Player.Icons_Signal = True;
			Small Message(Event Player, Custom String("  You gave yourself an icon: {0}",
				Global.Icons_List_For_Menu[Event Player.Icons_Info_Array[0]]));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Array[2] = 1;
			Event Player.Icons_Signal = True;
			Small Message(Event Player, Custom String("You gave yourself an icon: {0}", Icon String(Heart)));
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Array[2] = 2;
			Event Player.Icons_Signal = True;
			Small Message(Event Player, Custom String("You gave yourself an icon: {0}", Icon String(Fire)));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			"Simple selectors, same as drawing, from 0 to endpoint"
			If(Event Player.Icons_Info_Array[0] >= 16);
				Event Player.Icons_Info_Array[0] = 0;
			Else;
				Event Player.Icons_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Info_Array[0]],
				Event Player.Icons_Info_Array[1] == 15 ? Custom String("Brown") : Global.Colors[Event Player.Icons_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Icons_Info_Array[1] >= 15);
				Event Player.Icons_Info_Array[1] = 0;
			Else;
				Event Player.Icons_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Event Player.Icons_Info_Array[1] == 15 ? Custom String("Brown")
				: Global.Colors[Event Player.Icons_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Reload)));
			"Remove icons from player"
			Destroy Icon(Event Player.Icon_ID[0]);
			Destroy Icon(Event Player.Icon_ID[1]);
			Destroy Icon(Event Player.Icon_ID[2]);
			Destroy Icon(Event Player.Icon_ID[3]);
			Destroy Icon(Event Player.Icon_ID[4]);
			Destroy Icon(Event Player.Icon_ID[5]);
			"Set validator back to default, so you can add two new icons"
			Event Player.Icon_ID = Empty Array;
			Small Message(Event Player, Custom String("  Icons removed"));
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 24;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			"Simple validator for icons, if player has > 2 icons: abort"
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && !Is Dummy Bot(Player Closest To Reticle(
				Event Player, All Teams)));
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Copy = Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array[2] = 0;
			Player Closest To Reticle(Event Player, All Teams).Icons_Signal = True;
			Wait(0.010, Ignore Condition);
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Copy;
			Event Player.Icons_Info_Copy = Array(0, 0, 0);
			Small Message(All Players(All Teams), Custom String("  {0} gave {1} to {2}", Event Player,
				Global.Icons_List_For_Menu[Event Player.Icons_Info_Array[0]], Player Closest To Reticle(Event Player, All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && !Is Dummy Bot(Player Closest To Reticle(
				Event Player, All Teams)));
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Copy = Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array[2] = 1;
			Player Closest To Reticle(Event Player, All Teams).Icons_Signal = True;
			Wait(0.010, Ignore Condition);
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Copy;
			Event Player.Icons_Info_Copy = Array(0, 0, 0);
			Small Message(All Players(All Teams), Custom String("  {0} gave {1} to {2}", Event Player, Icon String(Heart),
				Player Closest To Reticle(Event Player, All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Melee)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && !Is Dummy Bot(Player Closest To Reticle(
				Event Player, All Teams)));
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			Event Player.Icons_Info_Copy = Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Array;
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array[2] = 2;
			Player Closest To Reticle(Event Player, All Teams).Icons_Signal = True;
			Wait(0.010, Ignore Condition);
			Player Closest To Reticle(Event Player, All Teams).Icons_Info_Array = Event Player.Icons_Info_Copy;
			Event Player.Icons_Info_Copy = Array(0, 0, 0);
			Small Message(All Players(All Teams), Custom String("  {0} gave {1} to {2}", Event Player, Icon String(Fire),
				Player Closest To Reticle(Event Player, All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			"Simple selectors, same as drawing, from 0 to endpoint"
			If(Event Player.Icons_Info_Array[0] >= 16);
				Event Player.Icons_Info_Array[0] = 0;
			Else;
				Event Player.Icons_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Info_Array[0]],
				Event Player.Icons_Info_Array[1] == 15 ? Custom String("Brown") : Global.Colors[Event Player.Icons_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Icons_Info_Array[1] >= 15);
				Event Player.Icons_Info_Array[1] = 0;
			Else;
				Event Player.Icons_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Event Player.Icons_Info_Array[1] == 15 ? Custom String("Brown")
				: Global.Colors[Event Player.Icons_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && !Is Dummy Bot(Player Closest To Reticle(
				Event Player, All Teams)));
			"Remove first icons from player"
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[0]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[2]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[3]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[4]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[5]);
			"Set validator back to default, so you can add two new icons"
			Player Closest To Reticle(Event Player, All Teams).Icon_ID = Empty Array;
			Small Message(Event Player, Custom String("  Icons removed from {0}", Player Closest To Reticle(Event Player, All Teams)));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("  {0} removed icons from you", Event Player));
			Wait(0.300, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Icons_Signal == True;
	}

	actions
	{
		If(Event Player.Icons_Info_Array[2] == 0);
			If(Event Player.Icons_Info_Array[0] == 0);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Bolt, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 1);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Happy, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 2);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Moon, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 3);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Halo, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 4);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Trashcan, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 5);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Dizzy, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 6);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Sad, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 7);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Poison 2, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 8);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Warning, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 9);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Stop, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 10);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Spiral, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 11);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Radioactive, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 12);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Skull, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 13);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Recycle, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 14);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, No, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 15);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Eye, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			Else If(Event Player.Icons_Info_Array[0] == 16);
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
					Event Player, Asterisk, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
			End;
		Else If(Event Player.Icons_Info_Array[2] == 1);
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Event Player, Heart, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
		Else;
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)),
				Event Player, Fire, Visible To, Global.Colors[Event Player.Icons_Info_Array[1]], False);
		End;
		Event Player.Icon_ID = Append To Array(Event Player.Icon_ID, Last Created Entity);
		Event Player.Icons_Signal = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 23 || Event Player.Mode_Cycle == 24 || Event Player.Mode_Cycle_Default == 9) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Info_Array[0]],
			Global.Colors[Event Player.Icons_Info_Array[1]]));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 25 || Event Player.Mode_Cycle_Default == 10) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams)
				.Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Ghost_Mode);
				Player Closest To Reticle(Event Player, All Teams).Ghost_Mode = False;
				Enable Movement Collision With Environment(Player Closest To Reticle(Event Player, All Teams));
				Enable Movement Collision With Players(Player Closest To Reticle(Event Player, All Teams));
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1);
			Else;
				Player Closest To Reticle(Event Player, All Teams).Ghost_Mode = True;
				Disable Movement Collision With Environment(Player Closest To Reticle(Event Player, All Teams), False);
				Disable Movement Collision With Players(Player Closest To Reticle(Event Player, All Teams));
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Event Player.Ghost_Mode == False);
				Event Player.Ghost_Mode = True;
				Disable Movement Collision With Environment(Event Player, False);
				Disable Movement Collision With Players(Event Player);
			Else;
				Event Player.Ghost_Mode = False;
				Enable Movement Collision With Environment(Event Player);
				Enable Movement Collision With Players(Event Player);
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.Slow_Projectile == False);
				Event Player.Slow_Projectile = True;
				If(Event Player.High_Rank || Event Player.Mod_Rank);
					Set Projectile Speed(Event Player, 1);
				Else;
					Set Projectile Speed(Event Player, 50);
				End;
				Set Projectile Gravity(Event Player, 0);
			Else If(Event Player.Slow_Projectile);
				Event Player.Slow_Projectile = False;
				Set Projectile Speed(Event Player, 100);
				Set Projectile Gravity(Event Player, 100);
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Event Player.Promoted_Rank && Event Player != Host Player);
			If(Event Player.No_CD);
				Event Player.No_CD = False;
			Else;
				Event Player.No_CD = True;
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Call Subroutine(Full_Protection_Toggle);
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 27;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == False);
		"Permission Check"
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Lock == Null);
		Abort If(Not(Event Player.High_Rank || (Event Player.Mod_Rank && !Event Player.Promoted_Rank) || Event Player == Host Player));
		If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Lock)) || (Event Player.High_Rank && Not(Event Player.Heaven_Strike_ID[2]) && Event Player != Host Player) ||
			(Event Player == Host Player && Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Lock)) && Event Player.Promoted_Rank && 
			Not(Event Player.Target_Lock.Promoted_Rank)));
			Small Message(Event Player, Custom String("   You lack authorization to kick/ban this target."));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("{0} {1} - tried to kick/ban you {0}", Icon String(Exclamation Mark), Event Player));
			Abort;
		End;
		"Authorization Accepted"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If((Event Player.Mod_Rank && !Event Player.Promoted_Rank) 
				&& (Event Player.Target_Lock == Host Player 
				&& Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Lock)) && Event Player.Target_Lock.Promoted_Rank));
				Wait Until(Is Button Held(Event Player, Button(Ability 2)) && Is Button Held(Event Player, Button(Crouch)) && Player Closest To Reticle(Event Player, All Teams) == Host Player && Event Player.Mode_Cycle == 27, 9999);

				Small Message(All Players(All Teams), Custom String("{0} is kicked by {1}", Event Player.Target_Lock, Event Player));
				Wait(0.5, Ignore Condition);
				Remove Player(Event Player.Target_Lock);
			End;
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(Not(Event Player.High_Rank || Event Player == Host Player));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Lock, 1);
			Small Message(All Players(All Teams), Custom String("{0} is kicked by {1}", Event Player.Target_Lock, Event Player));
			Wait(0.5, Ignore Condition);
			Remove Player(Event Player.Target_Lock);
			
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(Not(Event Player.High_Rank || Event Player == Host Player));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			Small Message(All Players(All Teams), Custom String("{0} is banned by {1}", Event Player.Target_Lock, Event Player));
			Modify Global Variable(Temp_Banned, Append To Array, Custom String("{0}", Event Player.Target_Lock));
			Remove Player(Event Player.Target_Lock);
		End;
		Wait(1, Ignore Condition);
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 28;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Event Player.Bot_CD > 0);
				Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Bot_CD));
				Abort;
			End;
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(!Event Player.Promoted_Rank);
			Abort If(Event Player.Target_Shortcut == Null);
			Abort If(Is Dummy Bot(Event Player.Target_Shortcut));
			Abort If(Event Player.Target_Shortcut.Restricted[0]);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut)));
			Abort If(Event Player.Target_Shortcut.UNO_Ingame);
			Abort If(Event Player.Target_Shortcut == Host Player && Event Player.Mod_Rank);
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Shortcut))
				&& Event Player.Mod_Rank && !Array Contains(Global.Promoted_List, Custom String("{0}", Event Player.Target_Shortcut)));
			If(!Has Spawned(Event Player.Target_Shortcut));
				Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(Soldier: 76));
				Wait(0.010, Ignore Condition);
				Stop Forcing Player To Be Hero(Event Player.Target_Shortcut);
			End;
			If(Is Dead(Event Player.Target_Shortcut));
				Teleport(Event Player.Target_Shortcut, Nearest Walkable Position(Position Of(Event Player.Target_Shortcut)));
				Resurrect(Event Player.Target_Shortcut);
			End;
			Teleport(Event Player.Target_Shortcut, Event Player);
			Wait(0.010, Ignore Condition);
			Event Player.Target_Shortcut.Restricted[0] = True;
			Event Player.Target_Shortcut.Restricted[1] = True;
			If(Event Player.Target_Shortcut.Protection);
				Clear Status(Event Player.Target_Shortcut, Phased Out);
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Shortcut, 1);
			Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Event Player), 3.500, Visible To);
			Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Event Player.Target_Shortcut));
			Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
			Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Event Player));
			Global.Jail_List[3] = Append To Array(Global.Jail_List[3], True);
			"Disable text and voice chats"
			Disable Text Chat(Event Player.Target_Shortcut);
			Disable Voice Chat(Event Player.Target_Shortcut, True, True, True);
			"Disable all skills and meele"
			Set Ability 1 Enabled(Event Player.Target_Shortcut, False);
			Set Ability 2 Enabled(Event Player.Target_Shortcut, False);
			Set Melee Enabled(Event Player.Target_Shortcut, False);
			Set Primary Fire Enabled(Event Player.Target_Shortcut, False);
			Set Secondary Fire Enabled(Event Player.Target_Shortcut, False); 
			Set Ultimate Ability Enabled(Event Player.Target_Shortcut, False);
			Event Player.Target_Shortcut.Last_Position_Facing[0] = Position Of(Event Player);
			Wait(0.010, Ignore Condition);
			Disable Text Chat(Event Player.Target_Shortcut);
			Disable Voice Chat(Event Player.Target_Shortcut, True, True, True);
			Modify Global Variable(actionsLog, append to array, custom string("[-] {0} is restricted by {1} [page 28]", Evaluate Once(Event Player.Target_Shortcut), Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(Orange), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Shortcut == Null);
			Abort If(Event Player.Target_Shortcut.Restricted[0] == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut)));
			Abort If(Event Player.Target_Shortcut == Host Player && Event Player.Mod_Rank);
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Shortcut))
				&& Event Player.Mod_Rank && !Array Contains(Global.Promoted_List, Custom String("{0}", Event Player.Target_Shortcut)));
			Event Player.Target_Shortcut.Restricted[0] = False;
			Event Player.Target_Shortcut.Restricted[1] = False;
			If(Event Player.Target_Shortcut.Protection);
				Set Status(Event Player.Target_Shortcut, Null, Phased Out, 9999);
			End;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player.Target_Shortcut));
			Destroy Effect(Global.Jail_List[1][Event Player.Index_Help]);
			Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);
			"Enable text and voice chats"
			Skip If(Array Contains(Global.Muted_List, Custom String("{0}", Event Player.Target_Shortcut)), 2);
			Enable Text Chat(Event Player.Target_Shortcut);
			Enable Voice Chat(Event Player.Target_Shortcut);
			"Enable skills and meele"
			Set Ability 1 Enabled(Event Player.Target_Shortcut, True);
			Set Ability 2 Enabled(Event Player.Target_Shortcut, True);
			Set Melee Enabled(Event Player.Target_Shortcut, True);
			Set Primary Fire Enabled(Event Player.Target_Shortcut, True);
			Set Secondary Fire Enabled(Event Player.Target_Shortcut, True);
			Set Ultimate Ability Enabled(Event Player.Target_Shortcut, True);
			Event Player.Target_Shortcut.Last_Position_Facing[0] = Null;
			Wait(0.010, Ignore Condition);
			Skip If(Array Contains(Global.Muted_List, Custom String("{0}", Event Player.Target_Shortcut)), 2);
			Enable Text Chat(Event Player.Target_Shortcut);
			Enable Voice Chat(Event Player.Target_Shortcut);
			Modify Global Variable(actionsLog, append to array, custom string("[+] {0} is released by {1} [page 28]", Evaluate Once(Event Player.Target_Shortcut), Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(Orange), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Restricted[0] == False);
				Event Player.Restricted[0] = True;
				Event Player.Restricted[1] = False;
				If(Event Player.Protection);
					Clear Status(Event Player, Phased Out);
				End;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Event Player), 3.500, Visible To);
				Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Event Player));
				Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
				Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Event Player));
				Global.Jail_List[3] = Append To Array(Global.Jail_List[3], False);
				Disable Text Chat(Event Player);
				Disable Voice Chat(Event Player, True, True, True);
				Set Ability 1 Enabled(Event Player, False);
				Set Ability 2 Enabled(Event Player, False);
				Set Melee Enabled(Event Player, False);
				Set Primary Fire Enabled(Event Player, False);
				Set Secondary Fire Enabled(Event Player, False);
				Set Ultimate Ability Enabled(Event Player, False);
				Event Player.Last_Position_Facing[0] = Position Of(Event Player);
			Else;
				If(Event Player.Restricted[1]);
					Small Message(Event Player, Custom String("  Cannot unlock yourself - jailed by somebody else!"));
					Abort;
				End;
				Event Player.Restricted[0] = False;
				Event Player.Restricted[1] = False;
				If(Event Player.Protection);
					Set Status(Event Player, Null, Phased Out, 9999);
				End;
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
				Destroy Effect(Global.Jail_List[1][Event Player.Index_Help]);
				Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);
				Skip If(Array Contains(Global.Muted_List, Custom String("{0}", Event Player)), 2);
				Enable Text Chat(Event Player);
				Enable Voice Chat(Event Player);
				Set Ability 1 Enabled(Event Player, True);
				Set Ability 2 Enabled(Event Player, True);
				Set Melee Enabled(Event Player, True);
				Set Primary Fire Enabled(Event Player, True);
				Set Secondary Fire Enabled(Event Player, True);
				Set Ultimate Ability Enabled(Event Player, True);
				Event Player.Last_Position_Facing[0] = Null;
			End;
		End;
		Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0], 2);
		Event Player.Bot_CD = 2;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Wait(0.100, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Restricted[0] == True;
		Distance Between(Event Player, Event Player.Last_Position_Facing[0]) > 3;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.Last_Position_Facing[0]), 20, To World,
			Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		If(Distance Between(Event Player, Event Player.Last_Position_Facing[0]) > 5);
			Cancel Primary Action(Event Player);
			Teleport(Event Player, Event Player.Last_Position_Facing[0]);
		End;
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(5, Ignore Condition);
		For Global Variable(Jail_Helper, 0, Count Of(Global.Jail_List[0]), 1);
			If(Array Contains(Mapped Array(All Players(All Teams), Custom String("{0}", Current Array Element)),
				Global.Jail_List[0][Global.Jail_Helper]) == False);
				Destroy Effect(Global.Jail_List[1][Global.Jail_Helper]);
			End;
		End;
		Loop;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Jail_Leaver;
	}

	actions
	{
		Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
		Wait(0.020, Ignore Condition);
		Teleport(Event Player, Global.Jail_List[2][Event Player.Index_Help]);
		Wait(0.020, Ignore Condition);
		Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);
		If(Event Player.Protection);
			Clear Status(Event Player, Phased Out);
		End;
		Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Event Player), 3.500, Visible To);
		Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Event Player));
		Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
		Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Event Player));
		Global.Jail_List[3] = Append To Array(Global.Jail_List[3], Event Player.Restricted[1]);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.Last_Position_Facing[0] = Position Of(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 29 || Event Player.Mode_Cycle_Default == 11) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Discuss that highrank can demote auto-angel, Check for bugs, check abusive teamswap"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(!(Event Player.High_Rank || Event Player == Host Player || (Event Player.Mod_Rank && !Event Player.Promoted_Rank)));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Shortcut == Null);
			If(Array Contains(Global.Demoted_List, Custom String("{0}", Event Player.Target_Shortcut)) || Array Contains(Global.Muted_List,
				Custom String("{0}", Event Player.Target_Shortcut)));
				Small Message(Event Player, Custom String("  Can't promote {0}, please contact team for support.", Event Player.Target_Shortcut));
				Abort;
			End;
			Abort If(Event Player.Target_Shortcut.UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut)) || (Array Contains(Global.Mod_Rank,
				Custom String("{0}", Event Player.Target_Shortcut)) && !Event Player.Target_Shortcut.Promoted_Rank) || (
				Event Player.Target_Shortcut == Host Player && !Event Player.Heaven_Strike_ID[2])
				|| Event Player.Target_Shortcut.Promoted_Rank);
				Small Message(Event Player, Custom String("  Can't promote {0}.", Event Player.Target_Shortcut));
				Abort;
			End;
			Event Player.Target_Shortcut.Promoted_Rank = True;
			Modify Global Variable(Promoted_List, Append To Array, Custom String("{0}", Event Player.Target_Shortcut));
			Modify Global Variable(Mod_Rank, Append To Array, Custom String("{0}", Event Player.Target_Shortcut));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Modify Global Variable(actionsLog, append to array, custom string("[+] {0} is promoted by {1} [page 29]", Evaluate Once(Event Player.Target_Shortcut), Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(Turquoise), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(!(Event Player.High_Rank || Event Player == Host Player || (Event Player.Mod_Rank && !Event Player.Promoted_Rank)));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Shortcut == Null);
			Abort If(Event Player.Target_Shortcut.UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut)) || (Array Contains(Global.Mod_Rank,
				Custom String("{0}", Event Player.Target_Shortcut))
				&& !Event Player.Target_Shortcut.Promoted_Rank && !Event Player.Heaven_Strike_ID[2]) || (
				Event Player.Target_Shortcut == Host Player && !Event Player.Heaven_Strike_ID[2]));
				Small Message(Event Player, Custom String("  Cannot demote {0}.", Event Player.Target_Shortcut));
				Small Message(Event Player.Target_Shortcut, Custom String(" Note: {0} tried to demote you.", Event Player));
				Abort;
			End;
			Event Player.Target_Shortcut.Promoted_Rank = False;
			Modify Global Variable(Promoted_List, Remove From Array By Value, Custom String("{0}", Event Player.Target_Shortcut));
			Modify Global Variable(Mod_Rank, Remove From Array By Value, Custom String("{0}", Event Player.Target_Shortcut));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Shortcut, 1);
			Modify Global Variable(actionsLog, append to array, custom string("[-] {0} is demoted by {1} [page 29]", Evaluate Once(Event Player.Target_Shortcut), Event Player));
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("{0}", Evaluate Once(Last Of(Global.actionsLog))),
				Null, Left, Global.Main_Chaser + 2, Null, Color(Turquoise), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, Last Text Id);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Team Of(Event Player) == Team 1);
				If(Count Of(Filtered Array(All Players(Team 2), !Is Dummy Bot(Current Array Element))) <= 5);
					Move Player to Team(Event Player, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player, Team 2, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
					Abort;
				End;
			Else If(Team Of(Event Player) == Team 2);
				If(Count Of(Filtered Array(All Players(Team 1), !Is Dummy Bot(Current Array Element))) <= 5);
					Move Player to Team(Event Player, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player, Team 1, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
					Abort;
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Shortcut == Null);
			If(!(Event Player.High_Rank || Event Player == Host Player || (Event Player.Mod_Rank && !Event Player.Promoted_Rank)));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			Abort If(Event Player.Target_Shortcut.UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Shortcut)) || (Array Contains(Global.Mod_Rank,
				Custom String("{0}", Event Player.Target_Shortcut))
				&& !Event Player.Target_Shortcut.Promoted_Rank && !Event Player.Heaven_Strike_ID[2]) || (
				Event Player.Target_Shortcut == Host Player && !Event Player.Heaven_Strike_ID[2]));
				Small Message(Event Player, Custom String("  Cannot Switch Team of {0}.", Event Player.Target_Shortcut));
				Abort;
			End;
			If(Team Of(Event Player.Target_Shortcut) == Team 1);
				If(Number Of Players(Team 2) <= 5);
					Move Player to Team(Event Player.Target_Shortcut, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player.Target_Shortcut, Team 2, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
				End;
			Else If(Team Of(Event Player.Target_Shortcut) == Team 2);
				If(Number Of Players(Team 1) <= 5);
					Move Player to Team(Event Player.Target_Shortcut, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player.Target_Shortcut, Team 1, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Move Player to Team(Event Player, Host Player, -1);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 30;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If(Event Player.Promoted_Rank && Event Player != Host Player);
		If(Is Button Held(Event Player, Button(Primary Fire)));
		"set match time to be added 3 times, if more -> abort"
			If(Global.matchTime[1] == 3);
				Small Message(Event Player, Custom String(" Remaining time is extended to maximum. "));
				Abort;
			Else;
				Global.matchTime[1] += 1;
				Set Match Time(Match Time + 300);
				Small Message(All Players(All Teams), Custom String(" {0} added 5 min to match time. ", Event Player));
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(!Event Player.Promoted_Rank);
			If(Total Time Elapsed >= 3580);
				Small Message(Event Player, Custom String(" Cannot extend time further! "));
				Abort;
			End;
			Set Match Time(20);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Skip If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[0][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[1][0] || Custom String("{0}", Event Player) == Global.Titles_And_Outlines[32][0], 1);
			Abort If(!Event Player.Promoted_Rank);
			Declare Match Draw;
			Wait(27, Ignore Condition);
			Restart Match;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 31 || Event Player.Mode_Cycle_Default == 12) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(!Is Button Held(Event Player, Button(Melee)));
			Destroy Effect(Event Player.Camera_Info_Array[5]);
			Destroy In-World Text(Event Player.Camera_Info_Array[4]);
			Event Player.Camera_Info_Array[0] = False;
			Event Player.Camera_Info_Array[1] = False;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 1);
			If(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Camera_Position = Eye Position(Event Player) + Vector(0, 0.500, 0);
			Else;
				Event Player.Camera_Position = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True) - Vector(0.300, 0.300, 0.300)
					* Event Player.Scale_Real * Facing Direction Of(Event Player);
			End;
			Start Camera(Event Player, Event Player.Camera_Position, Update Every Frame(Eye Position(Event Player)), 200);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
				"Cam following {0}\r\n", Event Player), Event Player.Camera_Position, 0.100, Clip Against Surfaces, Visible To, Color(White),
				Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White),
				Event Player.Camera_Position, 0.100, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			Event Player.Camera = 5;
			Small Message(Event Player, Custom String("  Camera: Look at player, no LOS"));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 1);
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Camera_Position = Eye Position(Event Player) + Vector(0, 0.500, 0);
			Else;
				Event Player.Camera_Position = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True) - Vector(0.300, 0.300, 0.300)
					* Event Player.Scale_Real * Facing Direction Of(Event Player);
			End;
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
				"Cam with LOS check of {0}\r\n", Event Player), Event Player.Camera_Position, 0.100, Clip Against Surfaces, Visible To, Color(
				White), Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White),
				Event Player.Camera_Position, 0.100, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			Event Player.Camera = 6;
			Small Message(Event Player, Custom String("  Camera: Look at player, with LOS"));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(
				Eye Position(Event Player) + 10 * Event Player.Scale_Real * Facing Direction Of(Event Player)), 200);
			Wait(0.100, Ignore Condition);
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(
				Eye Position(Event Player) + 2 * Event Player.Scale_Real * Facing Direction Of(Event Player)), 0.500);
			Event Player.Camera = 7;
			Small Message(Event Player, Custom String(" Camera: Cinematic"));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(!Is Button Held(Event Player, Button(Ultimate)), 1);
			If(Is Button Held(Event Player, Button(Ultimate)));
				Event Player.Camera_Position = Eye Position(Event Player) + 0.050 * Facing Direction Of(Event Player) * -1 + Vector(0, 0.500, 0);
				Event Player.Camera_Info_Array[6] = Eye Position(Event Player) + Vector(0, 0.500, 0);
			Else;
				Event Player.Camera_Position = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
					+ 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True) - Vector(0.300, 0.300, 0.300)
					* Event Player.Scale_Real * Facing Direction Of(Event Player);
				Event Player.Camera_Info_Array[6] = Eye Position(Event Player);
			End;
			Start Camera(Event Player, Event Player.Camera_Position, Event Player.Camera_Info_Array[6], 200);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String(
				"Static Cam of {0}\r\n", Event Player), Event Player.Camera_Position, 0.100, Clip Against Surfaces, Visible To, Color(White),
				Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White),
				Event Player.Camera_Position, 0.100, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Event Player.Camera = 8;
			Small Message(Event Player, Custom String("  Camera: Static"));
		Else If(Is Button Held(Event Player, Button(Reload)));
			Start Camera(Event Player, Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 15, 0), Event Player,
				Rotation And Translation), Null, Event Player, True) - Vector(0.300, 0.300, 0.300) * Direction Towards(Eye Position(
				Event Player), World Vector Of(Vector(0, 15, 0), Event Player, Rotation And Translation)), Update Every Frame(Eye Position(
				Event Player)), 200);
			Event Player.Camera = 9;
			Small Message(Event Player, Custom String("  Camera: Top-Down"));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Event Player.Camera_Info_Array[3] = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Camera_Info_Array[3] == Null || !Has Spawned(Event Player.Camera_Info_Array[3]));
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player.Camera_Info_Array[3]), Eye Position(
				Event Player.Camera_Info_Array[3]) + -3 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player),
				Null, Event Player.Camera_Info_Array[3], True)), Update Every Frame(Eye Position(Event Player.Camera_Info_Array[3])
				+ 10 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player)), 200);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("Camera of {0}",
				Event Player), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player.Camera_Info_Array[3]), Eye Position(
				Event Player.Camera_Info_Array[3]) + -3 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player),
				Null, Event Player.Camera_Info_Array[3], True)), 0.100, Clip Against Surfaces, Visible To and Position, Color(White),
				Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Event Player.Camera = 10;
			Small Message(Event Player, Custom String("  Camera: Follow {0}", Player Closest To Reticle(Event Player, All Teams)));
		End;
		Destroy Effect(Event Player.Camera_Info_Array[2]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 31 || Event Player.Mode_Cycle_Default == 12) == True;
		Event Player.Camera <= 4;
	}

	actions
	{
		Create Effect(Event Player, Sphere, Color(White), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)
			- Vector(0.300, 0.300, 0.300) * Event Player.Scale_Real * Facing Direction Of(Event Player)), 0.100, Position and Radius);
		Event Player.Camera_Info_Array[2] = Last Created Entity;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle != 31;
		Event Player.Mode_Cycle_Default != 12;
	}

	actions
	{
		Destroy Effect(Event Player.Camera_Info_Array[2]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 6;
		Is In Line of Sight(Event Player.Camera_Position, Eye Position(Event Player), Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Event Player.Camera_Smooth = 0.100;
		Start Camera(Event Player, Event Player.Camera_Position, Update Every Frame(Eye Position(Event Player)),
			Event Player.Camera_Smooth);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 6;
		Is In Line of Sight(Event Player.Camera_Position, Eye Position(Event Player), Barriers Do Not Block LOS) == False;
	}

	actions
	{
		Event Player.Camera_Smooth = 0.100;
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), Null, Event Player, True)), Update Every Frame(
			Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), Event Player.Camera_Smooth);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 32 || Event Player.Mode_Cycle_Default == 13) == True;
		Event Player.UNO_Ingame == False;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Ingame interaction with other functions"
		If(Is Button Held(Event Player, Button(Primary Fire)) );
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Array Contains(Global.UNO_Players, Event Player));
				Small Message(Event Player, Custom String("  Already in queue"));
				Abort;
			Else;
				Modify Global Variable(UNO_Players, Append To Array, Event Player);
				Small Message(All Players(All Teams), Custom String("  {0} has entered UNO queue", Event Player));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Array Contains(Global.UNO_Players, Event Player));
				Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
				Small Message(All Players(ALl Teams), Custom String("  {0} has left UNO queue", Event Player));
			Else;
				Small Message(Event Player, Custom String("  Not in queue"));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(Is Button Held(Event Player, Button(Ultimate)) == False, 9999);
			If(Count Of(Global.UNO_Players) < 2);
				Small Message(Event Player, Custom String("  Minimum 2 players"));
				Abort;
			End;
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Not(Array Contains(Global.UNO_Players, Event Player)));
				Small Message(Event Player, Custom String("  Can only start if in queue"));
				Abort;
			End;
			Big Message(All Players(All Teams), Custom String("  UNO Match started!"));
			Global.UNO_Timer = 100;
			Global.UNO_Started = True;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Global.UNO_Inworld[0]);
				Global.UNO_Inworld[0] = False;
				Global.UNO_Inworld[1] = Null;
				Destroy In-World Text(Global.UNO_Inworld[2]);
				Destroy In-World Text(Global.UNO_Inworld[3]);
				Small Message(Event Player, Custom String("  In-World UNO deck removed"));
			Else;
				Global.UNO_Inworld[1] = Add(Ray Cast Hit Position(Eye Position(Event Player), 
					Eye Position(Event Player) + 5 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
					Null, Event Player, True), Vector(0,1,0));
				Create In-World Text(All Players(All Teams), Custom String("UNO"), Global.UNO_Inworld[1], 1.8, 
					Clip Against Surfaces, Visible To String and Color, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
				Create In-World Text(All Players(All Teams), Custom String("Current player Display\r\nNext Player Display\r\n"), Global.UNO_Inworld[1], 1.2, 
					Clip Against Surfaces, Visible To and String, Color(White), Visible Never);
				Global.UNO_Inworld[3] = Last Text ID;
				Global.UNO_Inworld[0] = True;
				Small Message(Event Player, Custom String("  In-World UNO deck placed"));
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Count Of(Global.UNO_Players) < 1);
				Small Message(Event Player, Custom String("   No Players in queue"));
				Abort;
			End;
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game in progress. Players:"));
			Else;
				Small Message(Event Player, Custom String("  Players In Queue:"));
			End;
			For Player Variable(Event Player, Print, 0, Count Of(Global.UNO_Players), 1);
				Small Message(Event Player, Custom String("  {0}: {1}", Event Player.Print + 1, Global.UNO_Players[Event Player.Print]));
				Wait(0.1, Ignore Condition);
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UNO_Started == True;
	}

	actions
	{
		"credit to: @xMaxuss"
		For Global Variable(UNO_Looper, 0, Count Of(Global.UNO_Players), 1);
			Destroy Progress Bar HUD Text(Global.UNO_Players[Global.UNO_Looper].Scale_Hud_ID);
			Destroy HUD Text(Global.UNO_Players[Global.UNO_Looper].Mode_Hud_ID);
			Destroy HUD Text(Global.UNO_Players[Global.UNO_Looper].Mode_Description);
			Global.UNO_Players[Global.UNO_Looper].UNO_Hand = Empty Array;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[1] = 7;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[3] = False;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[0] = 0;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[4] = False;
			Global.UNO_Players[Global.UNO_Looper].Is_Flying = False;
			Global.UNO_Players[Global.UNO_Looper].UNO_Ingame = True;
			If(Global.UNO_Players[Global.UNO_Looper].High_Rank || Global.UNO_Players[Global.UNO_Looper].Mod_Rank);
				Global.UNO_Players[Global.UNO_Looper].Mode_Cycle = 32;
			Else;
				Global.UNO_Players[Global.UNO_Looper].Mode_Cycle_Default = 13;
			End;
			Create HUD Text(Evaluate Once(Global.UNO_Players[Global.UNO_Looper]), Null, Custom String("UNO Instructions:"), Custom String(
				"Crouch must be held for all inputs.\r\n{0}/{1} : Cycle Cards.\r\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Play Selected Card.\r\nReload : Draw Card.\r\n{1}",
				Input Binding String(Button(Ultimate)), Custom String(
				"{0} : End Turn.\r\nMelee : Hold for 5 sec to leave match.\r\nUNO is called automatically.", Input Binding String(Button(
				Ability 2))))), Left, 0, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To and String, Visible Never);
			Global.UNO_Players[Global.UNO_Looper].Mode_Description = Last Text ID;
		End;
		Global.UNO_Help = First Of(Global.UNO_Players);
		Global.UNO_Help.UNO_Info_Array[3] = True;
		Destroy HUD Text(Global.UNO_Deck[2]);
		Destroy Progress Bar HUD Text(Global.UNO_Deck[3]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
			Destroy In-World Text(Global.UNO_Inworld[3]);
			Create In-World Text(All Players(All Teams), Custom String("Current Player: {0}\r\nNext Player: {1}\r\n", Global.UNO_Players[0],
				Global.UNO_Players[1]), Global.UNO_Inworld[1], 1.200, Clip Against Surfaces, Visible To and String, Color(White),
				Visible Never);
			Global.UNO_Inworld[3] = Last Text ID;
		End;
		Chase Global Variable Over Time(UNO_Timer, 0, 45, None);
		Create Progress Bar HUD Text(Global.UNO_Players, Global.UNO_Timer, Custom String(
			" \r\nCurrent Player: {0}\r\nNext Player: {1}\r\n", Global.UNO_Players[0], Global.UNO_Players[1]), Top, 1, Color(Blue), Color(
			White), Visible To and Values, Visible Never);
		Global.UNO_Deck[3] = Last Text ID;
		Create HUD Text(Global.UNO_Players, Null, Custom String("UNO Cards:"), Custom String(
			"{0} : Next player skipped.\r\n +  : Next player +2 cards/skipped.\r\n{1}", Icon String(No), Custom String(
			"{0} : Reverse Play direction.\r\n{1} : Pick Color.\r\n{2}", Icon String(Recycle), Ability Icon String(Hero(Sombra), Button(
			Ability 2)), Custom String("{0} : Pick color. Next player \r\n   +4 cards/skipped.", Ability Icon String(Hero(Baptiste),
			Button(Ability 1))))), Right, 5, Color(White), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(White), Visible To, Visible Never);
		Global.UNO_Info = Last Text ID;
		Global.UNO_Deck[0] = Random Integer(1, 4);
		Global.UNO_Deck[1] = Random Integer(0, 9);
		If(Global.UNO_Deck[1] == 0);
			Global.UNO_Deck[1] = Random Integer(0, 9);
		End;
		Call Subroutine(UNO_Update_Deck);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Ingame == True;
		Event Player.UNO_Info_Array[6] == False;
		Event Player.Signal == True;
	}

	actions
	{
		"credit to: @xMaxuss"
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.UNO_Info_Array[0] += 1;
			If(Event Player.UNO_Info_Array[0] >= Count Of(Event Player.UNO_Hand));
				Event Player.UNO_Info_Array[0] = 0;
			End;
			For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
				Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0],
					Event Player.UNO_Hand[Event Player.UNO_Loop][1], Event Player.UNO_Hand[Event Player.UNO_Loop][2], Custom String(""));
			End;
			Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]] = Array(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0],
				Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1], Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2],
				Custom String("{0}", Icon String(Arrow: Left)));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.UNO_Info_Array[0] -= 1;
			If(Event Player.UNO_Info_Array[0] <= -1);
				Event Player.UNO_Info_Array[0] = Count Of(Event Player.UNO_Hand) - 1;
			End;
			For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
				Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0],
					Event Player.UNO_Hand[Event Player.UNO_Loop][1], Event Player.UNO_Hand[Event Player.UNO_Loop][2], Custom String(""));
			End;
			Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]] = Array(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0],
				Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1], Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2],
				Custom String("{0}", Icon String(Arrow: Left)));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(!Is Button Held(Event Player, Button(Ultimate)), 9999);
			If(!Event Player.UNO_Info_Array[3]);
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			If(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0] == 0);
				If(Count Of(Event Player.UNO_Hand) == 1);
					Big Message(All Players(All Teams), Custom String("{0} has won in UNO!", Event Player));
					Call Subroutine(UNO_End);
					Abort;
				End;
				Event Player.UNO_Info_Array[2] = 1;
				Create HUD Text(Event Player, Custom String("   {0}   ", Global.UNO_Colorblind[Event Player.UNO_Info_Array[2]]), Null,
					Custom String("{0} : Cycle Color\r\n{1} : Select\r\n{2} : Abort", Input Binding String(Button(Ultimate)), Input Binding String(
					Button(Primary Fire)), Input Binding String(Button(Secondary Fire))), Top, 3,
					Global.Card_Colors[Event Player.UNO_Info_Array[2]], Color(White), Color(White), String and Color, Visible Never);
				Event Player.UNO_Info_Array[7] = Last Text ID;
				Event Player.UNO_Info_Array[6] = True;
			Else If(
					Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0] == Global.UNO_Deck[0] || Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1] == Global.UNO_Deck[1]);
				Global.UNO_Deck[0] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0];
				Global.UNO_Deck[1] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1];
				Call Subroutine(UNO_Update_Deck);
				Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2]);
				Modify Player Variable(Event Player, UNO_Hand, Remove From Array By Index, Event Player.UNO_Info_Array[0]);
				If(Event Player.UNO_Hand == Empty Array);
					Big Message(All Players(All Teams), Custom String("{0} has won in UNO!", Event Player));
					Call Subroutine(UNO_End);
					Abort;
				End;
				If(Count Of(Event Player.UNO_Hand) == 1);
					Big Message(Global.UNO_Players, Custom String("{0}: UNO!", Event Player));
				End;
				Event Player.UNO_Info_Array[3] = False;
				Event Player.UNO_Info_Array[4] = False;
				Call Subroutine(UNO_Update_Hand);
				If(Global.UNO_Deck[1] == 10 || Global.UNO_Deck[1] == 12);
					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
					If(Global.UNO_Deck[1] == 12);
						Global.UNO_Help = First Of(Global.UNO_Players);
						Global.UNO_Help.UNO_Info_Array[1] = 2;
						Small Message(Global.UNO_Players, Custom String("  {0} gave +2 to {1}", Event Player, Global.UNO_Players[1]));
					Else;
						Small Message(Global.UNO_Players, Custom String("  {0} skipped {1}", Event Player, Global.UNO_Players[1]));
					End;
					Global.UNO_Help = First Of(Global.UNO_Players);
					Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Else If(Global.UNO_Deck[1] == 11);
					If(Count Of(Global.UNO_Players) == 2);
						Global.UNO_Help = Last Of(Global.UNO_Players);
						Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
					Else;
						Global.UNO_Players = Sorted Array(Global.UNO_Players, Current Array Index * -1);
					End;
					Small Message(Global.UNO_Players, Custom String("  {0} reversed direction", Event Player));
				Else;
					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				End;
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[3] = True;
				Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
				Global.UNO_Timer = 100;
			Else;
				Small Message(Event Player, Custom String("  Cannot play this card."));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(!Event Player.UNO_Info_Array[3]);
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			If(Event Player.UNO_Info_Array[4]);
				Small Message(Event Player, Custom String("  You have already drawn a card."));
				Abort;
			Else;
				Call Subroutine(UNO_Draw);
				Call Subroutine(UNO_Update_Hand);
				Small Message(Global.UNO_Players, Custom String("  {0} draws a card", Event Player));
				Event Player.UNO_Info_Array[4] = True;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(!Event Player.UNO_Info_Array[3]);
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			If(Event Player.UNO_Info_Array[4]);
				Event Player.UNO_Info_Array[3] = False;
				Event Player.UNO_Info_Array[4] = False;
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[3] = True;
				Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
				Small Message(Global.UNO_Players, Custom String("  {0} ends turn", Event Player));
				Global.UNO_Timer = 100;
			Else;
				Small Message(Event Player, Custom String("  You must have drawn a card to end turn."));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Wait Until(!Is Button Held(Event Player, Button(Melee)), 5);
			If(Is Button Held(Event Player, Button(Melee)));
				If(Count Of(Global.UNO_Players) == 2);
					If(Event Player.UNO_Info_Array[3]);
						Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, Last Of(Global.UNO_Players)));
					Else;
						Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, First Of(Global.UNO_Players)));
					End;
					Call Subroutine(UNO_End);
				Else;
					Big Message(Global.UNO_Players, Custom String("{0} has left the match!", Event Player));
					Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
					If(Event Player.UNO_Info_Array[3]);
						Global.UNO_Help = First Of(Global.UNO_Players);
						Global.UNO_Help.UNO_Info_Array[3] = True;
					End;
					Event Player.UNO_Info_Array[5] = True;
				End;
			Else;
				Small Message(Event Player, Custom String("  Hold {0} for 5 sec to leave the match.", Input Binding String(Button(Melee))));
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Info_Array[6] == True;
		Event Player.Signal == True;
	}

	actions
	{
		"credit to: @xMaxuss"
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.UNO_Info_Array[2] += 1;
			If(Event Player.UNO_Info_Array[2] >= 5);
				Event Player.UNO_Info_Array[2] = 1;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 9999);
			Abort If(!Event Player.UNO_Info_Array[6]);
			Small Message(Event Player, Custom String("  Aborted black card placement"));
			Destroy HUD Text(Event Player.UNO_Info_Array[7]);
			Event Player.UNO_Info_Array[6] = False;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 9999);
			Abort If(!Event Player.UNO_Info_Array[6]);
			Event Player.UNO_Info_Array[3] = False;
			Global.UNO_Deck[0] = Event Player.UNO_Info_Array[2];
			Global.UNO_Deck[1] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1];
			Call Subroutine(UNO_Update_Deck);
			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2]);
			Modify Player Variable(Event Player, UNO_Hand, Remove From Array By Index, Event Player.UNO_Info_Array[0]);
			Call Subroutine(UNO_Update_Hand);
			If(Global.UNO_Deck[1] == 14);
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Small Message(Global.UNO_Players, Custom String("  {0} changed color and gave +4 to {1}", Event Player, Global.UNO_Players[1]));
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[1] = 4;
				Global.UNO_Help = First Of(Global.UNO_Players);
				Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
			Else;
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Small Message(Global.UNO_Players, Custom String("  {0} changed color", Event Player));
			End;
			Event Player.UNO_Info_Array[4] = False;
			Global.UNO_Help = First Of(Global.UNO_Players);
			Global.UNO_Help.UNO_Info_Array[3] = True;
			Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
			Destroy HUD Text(Event Player.UNO_Info_Array[7]);
			If(Count Of(Event Player.UNO_Hand) == 1);
				Big Message(Global.UNO_Players, Custom String("{0}: UNO!", Event Player));
			End;
			Global.UNO_Timer = 100;
			Event Player.UNO_Info_Array[6] = False;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Info_Array[1] > 0;
	}

	actions
	{
		"credit to: @xMaxuss"
		While(Event Player.UNO_Info_Array[1] > 0);
			Call Subroutine(UNO_Draw);
			Event Player.UNO_Info_Array[1] -= 1;
		End;
		Call Subroutine(UNO_Update_Hand);
		Event Player.UNO_Info_Array[1] = 0;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Info_Array[5] == True;
	}

	actions
	{
		"credit to: @xMaxuss"
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Loop][2]);
		End;
		Event Player.UNO_Ingame = False;
		Event Player.UNO_Hand = Empty Array;
		Event Player.UNO_Info_Array[3] = False;
		Event Player.UNO_Info_Array[0] = 0;
		Event Player.UNO_Info_Array[4] = False;
		Destroy HUD Text(Event Player.Mode_Description);
		Event Player.Mode_Headline = Custom String("U N O");
		If(Event Player.High_Rank || Event Player.Mod_Rank);
			Event Player.Mode_Cycle = 32;
			Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
				Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
				Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color, Visible Never);
			Event Player.Mode_Hud_ID = Last Text ID;
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("Ultimate : Start UNO Match\r\n\nPlayers in queue: {0}\r\n{1}", Count Of(
				Global.UNO_Players), Custom String("{0} : Show who is in queue\r\nReload (Optional):\r\nPlace/Remove In-world UNO deck",
				Input Binding String(Button(Ability 2)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Event Player.Mode_Description = Last Text ID;
		Else;
			Event Player.Mode_Cycle_Default = 13;
			Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(
				Player Closest To Reticle(Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)),
				Event Player.Mode_Headline, Left, 0, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Color(Yellow), Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), String and Color,
				Visible Never);
			Event Player.Mode_Hud_ID = Last Text ID;
			Create HUD Text(Event Player, Null, Custom String(
				"| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}", Custom String(
				"{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
				Button(Secondary Fire)), Custom String("{0} : Start UNO Match\r\n\nPlayers in queue: {1}\r\n{2}", Input Binding String(Button(
				Ultimate)), Count Of(Global.UNO_Players), Custom String(
				"{0} : Show who is in queue\r\nReload : (Optional):\r\nPlace/Remove In-world UNO deck", Input Binding String(Button(
				Ability 2)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Event Player.Mode_Description = Last Text ID;
		End;
		Event Player.UNO_Info_Array[5] = False;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UNO_Started == True;
		Global.UNO_Timer == 0;
	}

	actions
	{
		"credit to: @xMaxuss"
		Global.UNO_Help = First Of(Global.UNO_Players);
		Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
		If(Global.UNO_Help.UNO_Info_Array[4]);
			Global.UNO_Help.UNO_Info_Array[4] = False;
			Small Message(Global.UNO_Players, Custom String("  {0} ends turn", Global.UNO_Help));
		Else;
			Global.UNO_Help.UNO_Info_Array[1] = 1;
			Small Message(Global.UNO_Players, Custom String("  {0} didn't play a card", Global.UNO_Help));
		End;
		Destroy HUD Text(Global.UNO_Help.UNO_Info_Array[7]);
		Global.UNO_Help.UNO_Info_Array[3] = False;
		Global.UNO_Help.UNO_Info_Array[6] = False;
		Wait(0.010, Ignore Condition);
		Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
		Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
		Global.UNO_Help = First Of(Global.UNO_Players);
		Global.UNO_Help.UNO_Info_Array[3] = True;
		Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
		Global.UNO_Timer = 100;
	}
}

rule("")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.UNO_Players, Event Player) == True;
	}

	actions
	{
		"credit to: @xMaxuss"
		If(Global.UNO_Started && Array Contains(Global.UNO_Players, Event Player));
			Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
			If(Count Of(Global.UNO_Players) == 1);
				Global.UNO_Help = First Of(Global.UNO_Players);
				Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, Global.UNO_Help));
				Call Subroutine(UNO_End);
			Else;
				Big Message(Global.UNO_Players, Custom String("{0} has left the match!", Event Player));
				If(!Is True For Any(Global.UNO_Players, Current Array Element.UNO_Info_Array[3]));
					Global.UNO_Help = First Of(Global.UNO_Players);
					Global.UNO_Help.UNO_Info_Array[3] = True;
				End;
			End;
		Else;
			Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
			Small Message(All Players(All Teams), Custom String("  {0} was removed from UNO queue", Event Player));
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		UNO_Draw;
	}

	actions
	{
		"Uno Cards colors: 1=red, 2=green, 3=blue, 4=yellow, 0=blackUno Cards meaning: 0-9=normal, 10=skip, 11=reverse, 12=draw2, 13=pick, 14=draw4"
		Event Player.UNO_Helper = Array(Null, Null, Null, Null);
		Event Player.UNO_Helper[0] = Random Value In Array(Global.UNO_Random);
		If(Event Player.UNO_Helper[0] == 0);
			Event Player.UNO_Helper[1] = Random Integer(13, 14);
		Else;
			Event Player.UNO_Helper[1] = Random Integer(0, 12);
			If(Event Player.UNO_Helper[1] == 0);
				Event Player.UNO_Helper[1] = Random Integer(0, 12);
			End;
		End;
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Array(Event Player.UNO_Helper));
	}
}

rule("")
{
	event
	{
		Subroutine;
		UNO_Update_Hand;
	}

	actions
	{
		"credit to: @xMaxuss"
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Loop][2]);
		End;
		Event Player.UNO_Sorter[0] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 0),
			Current Array Element[1]);
		Event Player.UNO_Sorter[1] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 1),
			Current Array Element[1]);
		Event Player.UNO_Sorter[2] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 2),
			Current Array Element[1]);
		Event Player.UNO_Sorter[3] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 3),
			Current Array Element[1]);
		Event Player.UNO_Sorter[4] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 4),
			Current Array Element[1]);
		Event Player.UNO_Hand = Empty Array;
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[0]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[1]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[2]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[3]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[4]);
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 13);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} D ", Ability Icon String(Hero(Sombra), Button(Ability 2)))), Null,
					Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, Color(Black), Color(White),
					Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 14);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} D ", Ability Icon String(Hero(Baptiste), Button(Ability 1)))),
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, Color(Black), Color(
					White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 10);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(No),
					Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), Null, Event Player.UNO_Hand[Evaluate Once(
					Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5,
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 11);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(Recycle),
					Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), Null, Event Player.UNO_Hand[Evaluate Once(
					Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5,
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 12);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(Plus),
					Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), Null, Event Player.UNO_Hand[Evaluate Once(
					Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5,
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else;
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Event Player.UNO_Hand[Event Player.UNO_Loop][1],
					Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), Null, Event Player.UNO_Hand[Evaluate Once(
					Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5,
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			End;
			Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0],
				Event Player.UNO_Hand[Event Player.UNO_Loop][1], Last Text ID, Custom String(""));
		End;
		Event Player.UNO_Info_Array[0] = 0;
		Event Player.UNO_Hand[0] = Array(Event Player.UNO_Hand[0][0], Event Player.UNO_Hand[0][1], Event Player.UNO_Hand[0][2],
			Custom String("{0}", Icon String(Arrow: Left)));
	}
}

rule("")
{
	event
	{
		Subroutine;
		UNO_Update_Deck;
	}

	actions
	{
		"credit to: @xMaxuss"
		Destroy HUD Text(Global.UNO_Deck[2]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
		End;
		If(Global.UNO_Deck[1] == 13);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Ability Icon String(Hero(Sombra), Button(Ability 2)),
				Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(
				White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Ability Icon String(Hero(Sombra), Button(Ability 2)),
					Global.UNO_Colorblind[Global.UNO_Deck[0]]), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color,
					Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 14);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Ability Icon String(Hero(Baptiste), Button(
				Ability 1)), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(
				White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Ability Icon String(Hero(Baptiste), Button(Ability 1)),
					Global.UNO_Colorblind[Global.UNO_Deck[0]]), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color,
					Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 10);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Icon String(No),
				Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(
				White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(No), Global.UNO_Colorblind[Global.UNO_Deck[0]]),
					Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]],
					Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 11);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}  \r\n ", Icon String(Recycle),
				Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(
				White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(Recycle),
					Global.UNO_Colorblind[Global.UNO_Deck[0]]), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color,
					Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 12);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Icon String(Plus),
				Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(
				White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(Plus),
					Global.UNO_Colorblind[Global.UNO_Deck[0]]), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color,
					Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else;
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Global.UNO_Deck[1],
				Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(
				White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Global.UNO_Deck[1],
					Global.UNO_Colorblind[Global.UNO_Deck[0]]), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces, Visible To String and Color,
					Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		UNO_End;
	}

	actions
	{
		"credit to: @xMaxuss"
		Destroy HUD Text(Global.UNO_Info);
		Global.UNO_Started = False;
		Destroy HUD Text(Global.UNO_Deck[2]);
		Destroy Progress Bar HUD Text(Global.UNO_Deck[3]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
			Destroy In-World Text(Global.UNO_Inworld[3]);
			Create In-World Text(All Players(All Teams), Custom String("UNO"), Global.UNO_Inworld[1], 1.800, Clip Against Surfaces,
				Visible To String and Color, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Visible Never);
			Global.UNO_Inworld[2] = Last Text ID;
			Create In-World Text(All Players(All Teams), Custom String("Current player Display\r\nNext Player Display\r\n"),
				Global.UNO_Inworld[1], 1.200, Clip Against Surfaces, Visible To String and Color, Color(White), Visible Never);
			Global.UNO_Inworld[3] = Last Text ID;
		End;
		Global.UNO_Deck = Array(Null, Null, Null, Null);
		For Global Variable(UNO_Looper, 0, Count Of(Global.UNO_Players), 1);
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[5] = True;
		End;
		Global.UNO_Players = Empty Array;
	}
}

rule("") 
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UNO_Started == True;
		Match Time <= 60;
		Is Assembling Heroes == False;
		Is In Setup == False;
	}

	actions
	{
		If(Global.matchTime[1] == 5);
			Big Message(All Players(All Teams), Custom String("UNO is in progress, but time extended to maximum, shutting down"));
			Abort;
		Else; 
			Global.matchTime[1] += 1;
			Big Message(All Players(All Teams), Custom String("Exception: UNO is in progress, adding 5 minutes"));
			Set Match Time(Match Time + 300);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle_Default == 0 || Event Player.Mode_Cycle == 0) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Communicating Any Emote(Event Player) == True;
		Event Player.Is_Crouch_On == False;
	}

	actions
	{
		If(Filtered Array(Players On Hero(Hero Of(Event Player), All Teams), Array Contains(Players Within Radius(Event Player, 8,
			All Teams, Off), Current Array Element) && Current Array Element.Bot_CD > 0));
			Small Message(Event Player, Custom String(" Not ready"));
			Abort;
		End;
		Filtered Array(Players On Hero(Hero Of(Event Player), All Teams), Array Contains(Players Within Radius(Event Player, 8, All Teams,
			Off), Current Array Element) && Is Communicating Any Emote(Current Array Element) && !Current Array Element.Full_Protection)
			.Is_Communicating = True;
		Event Player.Bot_CD = 4;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Communicating == True;
	}

	actions
	{
		Event Player.Is_Communicating = False;
		If(Event Player.Protection);
			Clear Status(Event Player, Phased Out);
		End;
		Wait(0.150, Ignore Condition);
		If(Is Communicating(Event Player, Emote Up));
			Set Status(Event Player, Null, Stunned, 0.007);
			Communicate(Event Player, Emote Up);
		Else If(Is Communicating(Event Player, Emote Left));
			Set Status(Event Player, Null, Stunned, 0.007);
			Communicate(Event Player, Emote Left);
		Else If(Is Communicating(Event Player, Emote Right));
			Set Status(Event Player, Null, Stunned, 0.007);
			Communicate(Event Player, Emote Right);
		Else If(Is Communicating(Event Player, Emote Down));
			Set Status(Event Player, Null, Stunned, 0.007);
			Communicate(Event Player, Emote Down);
		End;
		Wait(0.100, Ignore Condition);
		If(Event Player.Protection);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 33;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If(Event Player.Promoted_Rank && Event Player != Host Player);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Is_Invisible = True;
			Set Invisible(Event Player, All);
			Small Message(Event Player, Custom String("Invisible On"));
			Wait(1, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Set Invisible(Event Player, None);
			Small Message(Event Player, Custom String("Invisible Off"));
			Event Player.Is_Invisible = False;
			Wait(1, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 34 || Event Player.Mode_Cycle_Default == 16) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Comms_Target = Player Closest To Reticle(Event Player, All Teams);
		Abort If(!Is Dummy Bot(Event Player.Comms_Target));
		If(Event Player.Comms_Target.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Comms_Target.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Communicate(Event Player, Hello);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, Hello);
			Small Message(Event Player, Custom String("   Moe says: {0}!", String("Hello")));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Communicate(Event Player, Goodbye);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, Goodbye);
			Small Message(Event Player, Custom String("   Moe says: {0}.", String("Goodbye")));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Communicate(Event Player, Yes);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, Thanks);
			Small Message(Event Player, Custom String("   Moe says: {0}!", String("Thanks")));
		Else If(Is Button Held(Event Player, Button(Reload)));
			Communicate(Event Player, No);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, Sorry);
			Small Message(Event Player, Custom String("   Moe says: {0}...", String("Sorry")));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Communicate(Event Player, Thanks);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, Yes);
			Small Message(Event Player, Custom String("   Moe says: {0}!", String("Yes")));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Communicate(Event Player, Sorry);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.900, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
				Event Player))), 300, To World, Direction and Turn Rate);
			Wait(0.200, Ignore Condition);
			Communicate(Event Player.Comms_Target, No);
			Small Message(Event Player, Custom String("   Moe says: {0}.", String("No")));
		End;
		Wait(1, Ignore Condition);
		Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), Eye Position(
			Closest Player To(Event Player.Comms_Target, All Teams)))), 300, To World, Direction and Turn Rate);
	}
}

disabled rule("")
{
	event
	{
		Ongoing - Global;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Meleeing(Event Player) == True;
		Distance Between(Position Of(Event Player), Position Of(Closest Player To(Event Player, All Teams))) <= 2;
	}

	actions
	{
		Abort If(Closest Player To(Event Player, All Teams).Protection);
		Apply Impulse(Closest Player To(Event Player, All Teams), Vector(0, 1, 0), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Closest Player To(Event Player, All Teams), Direction Towards(Position Of(Event Player), Position Of(
			Closest Player To(Event Player, All Teams))), 200, To World, Incorporate Contrary Motion);
		Set Status(Closest Player To(Event Player, All Teams), Event Player, Knocked Down, 4);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Is Dead(Event Player);
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Abort If(Event Player.Restricted[1]);
		"Kanezaka falling out of map hardcoded fix"
		If(Current Map == Map(Kanezaka));
			Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else;
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) && Is Button Held(Event Player, Button(Crouch))) == True;
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Alive(Event Player) == True;
		Event Player.Mode_Cycle != 6;
		Event Player.Mode_Cycle != 31;
		Event Player.Mode_Cycle != 34;
	}

	actions
	{
		Cancel Primary Action(Event Player);
		Detach Players(Event Player);
		Event Player.inAction[1] = False;
		Play Effect(Event Player, Good Explosion, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Position Of(Event Player), 0.750);
		Teleport(Event Player, Position Of(Event Player) + Facing Direction Of(Event Player) * 12.500);
		Wait(0.100, Ignore Condition);
		Play Effect(Event Player, Good Explosion, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Position Of(Event Player), 0.750);
		Apply Impulse(Event Player, Up, 2, To World, Cancel Contrary Motion);
	}
}

rule("")
{
	event
	{
		Player Dealt Damage;
		All;
		Mercy;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Event Ability == Button(Primary Fire);
		Is Dummy Bot(Event Player) == False;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Asleep, 4);
		Heal(Victim, Null, 50);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.High_Rank || (Event Player.Mod_Rank && !Event Player.Promoted_Rank) || Event Player == Host Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.Restricted[0] == False;
		Hero Of(Event Player) != Hero(Ashe);
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Using Ultimate(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.Player_Modification[1] + 50);
		Disable Movement Collision With Environment(Event Player, True);
		Wait Until(!Is Using Ultimate(Event Player) || Hero Of(Event Player) != Hero(Mercy), 9999);
		Set Move Speed(Event Player, Event Player.Player_Modification[1]);
		If(Event Player.Ghost_Mode);
			Disable Movement Collision With Environment(Event Player, False);
		Else;
			Enable Movement Collision With Environment(Event Player);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Ultimate), Button(
			Interact), Button(Jump), Button(Crouch), Button(Melee), Button(Reload)), Is Button Held(Event Player, Current Array Element))
			== True;
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Has Spawned(Event Player) == True;
		Event Player.No_CD == True;
	}

	actions
	{
		If(Event Player.Protection);
			Clear Status(Event Player, Phased Out);
		End;
		"Cooldown only when press the button >"
		If(Is Button Held(Event Player, Button(Ability 1)));
			If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String("Warloy"));
				Press Button(Event Player, Button(Ability 1));
				Press Button(Event Player, Button(Ability 1));
				Wait(0.002, Ignore Condition);
				Set Status(Event Player, Null, Knocked Down, 0.010);
				Wait(0.002, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 1), 0);
				Set Ability Cooldown(Event Player, Button(Ability 1), 0);
				Set Ability Charge(Event Player, Button(Ability 1), 3);
				Set Ability Resource(Event Player, Button(Ability 1), 100);
				Wait(0.002, Ignore Condition);
			Else;
				Set Ability Cooldown(Event Player, Button(Ability 1), 0);
				Set Ability Charge(Event Player, Button(Ability 1), 3);
				Set Ability Charge(Event Player, Button(Ability 1), 3);
				Set Ability Resource(Event Player, Button(Ability 1), 3);
			End;
		End;
		If(Is Button Held(Event Player, Button(Ability 2)));
			If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String("Warloy"));
				Press Button(Event Player, Button(Ability 2));
				Wait(0.002, Ignore Condition);
				Set Status(Event Player, Null, Knocked Down, 0.010);
				Wait(0.002, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
				Set Ability Charge(Event Player, Button(Ability 2), 3);
				Set Ability Resource(Event Player, Button(Ability 2), 100);
				Wait(0.002, Ignore Condition);
			Else;
				Set Ability Cooldown(Event Player, Button(Ability 2), 0);
				Set Ability Charge(Event Player, Button(Ability 2), 3);
				Set Ability Charge(Event Player, Button(Ability 2), 3);
				Set Ability Resource(Event Player, Button(Ability 2), 3);
			End;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
		End;
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String("Warloy"));
				Press Button(Event Player, Button(Secondary Fire));
				Wait(0.002, Ignore Condition);
				Cancel Primary Action(Event Player);
				Set Status(Event Player, Null, Stunned, 0.010);
				Wait(0.002, Ignore Condition);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
				Wait(0.020, Ignore Condition);
			Else;
				Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
			End;
		End;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String("Warloy"));
				Press Button(Event Player, Button(Ultimate));
				Wait(0.002, Ignore Condition);
				Cancel Primary Action(Event Player);
				Set Status(Event Player, Null, Knocked Down, 0.010);
				Wait(0.002, Ignore Condition);
				Set Ultimate Charge(Event Player, 100);
				Wait(0.020, Ignore Condition);
			Else;
				Set Ability Cooldown(Event Player, Button(Ultimate), 0);
			End;
		End;
		If(Is Button Held(Event Player, Button(Jump)));
			Set Ability Cooldown(Event Player, Button(Jump), 0);
		End;
		If(Is Button Held(Event Player, Button(Crouch)));
			Set Ability Cooldown(Event Player, Button(Crouch), 0);
		End;
		If(Event Player.Protection);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Ramattra) || Hero Of(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sigma)
			|| Hero Of(Event Player) == Hero(Moira)) == True;
		Is Firing Secondary(Event Player) == True;
		Is In Alternate Form(Event Player) == False;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Create Icon(All Players(All Teams), Update Every Frame(Eye Position(Event Player) + World Vector Of(Vector(Hero Of(Event Player)
			== Hero(Moira) ? -0.080 : 0.180, Hero Of(Event Player) == Hero(Moira) ? -0.400 : -0.250, 0), Event Player, Rotation)
			+ Event Player.Scale_Real * Facing Direction Of(Event Player) * (Hero Of(Event Player) == Hero(Sombra) ? 0.600 : 1)), Heart,
			Visible To and Position, Color(Red), False);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait Until(!Is Firing Secondary(Event Player) || Is In Alternate Form(Event Player), 9999);
		Destroy Icon(Event Player.ExtraEffect_ID);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Using Ability 2(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Event Player.Extra10_Player = Closest Player To(Event Player, All Teams);
		Abort If((Event Player.Extra10_Player.Full_Protection && !Is Dummy Bot(Event Player.Extra10_Player)) || Has Status(
			Event Player.Extra10_Player, Knocked Down));
		Abort If(Distance Between(Event Player, Event Player.Extra10_Player) >= 1.500 || !Is In View Angle(Event Player,
			Event Player.Extra10_Player, 120));
		Attach Players(Event Player.Extra10_Player, Event Player, Vector(0, 0.300, 0.600));
		If(Event Player.Extra10_Player.Protection);
			Clear Status(Event Player.Extra10_Player, Phased Out);
		End;
		Set Status(Event Player.Extra10_Player, Event Player, Stunned, 10);
		If(Event Player.Extra10_Player.Protection);
			Set Status(Event Player.Extra10_Player, Null, Phased Out, 9999);
		End;
		Wait(0.010, Ignore Condition);
		Set Facing(Event Player.Extra10_Player, Direction Towards(Eye Position(Event Player.Extra10_Player), Eye Position(Event Player)),
			To World);
		Disallow Button(Event Player.Extra10_Player, Button(Ultimate));
		Wait Until(!Is Using Ability 2(Event Player), 4);
		If(Is Using Ability 1(Event Player));
			Wait Until(!Is Using Ability 1(Event Player), 9999);
			Clear Status(Event Player.Extra10_Player, Stunned);
			Wait(0.010, Ignore Condition);
			If(Event Player.Extra10_Player.Protection);
				Clear Status(Event Player.Extra10_Player, Phased Out);
			End;
			Set Status(Event Player.Extra10_Player, Event Player, Knocked Down, 2.600);
			If(Event Player.Extra10_Player.Protection);
				Set Status(Event Player.Extra10_Player, Null, Phased Out, 9999);
			End;
		End;
		Detach Players(Event Player.Extra10_Player);
		Allow Button(Event Player.Extra10_Player, Button(Ultimate));
		Clear Status(Event Player.Extra10_Player, Stunned);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Start Accelerating(Event Player, Throttle Of(Event Player) * -1, 300, Throttle Of(Event Player) == Vector(0, 0, 0) ? 0 : 4,
			To Player, Direction Rate and Max Speed);
		Wait(0.500, Ignore Condition);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Stop Accelerating(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.Is_Crouch_On == False;
	}

	actions
	{
		Abort If(Ultimate Charge Percent(Event Player) != 0 && !(Event Player.High_Rank || Event Player.Mod_Rank));
		Cancel Primary Action(Event Player);
		Set Ultimate Charge(Event Player, 2);
		Set Max Health(Event Player, 20);
		Wait(0.010, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Wait(0.010, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		If(Is Dummy Bot(Event Player));
			Set Max Health(Event Player, 10000);
		Else;
			Set Max Health(Event Player, Event Player.Player_Modification[4]);
		End;
		Wait(0.010, Ignore Condition);
		Heal(Event Player, Null, 10000);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Destroy Effect(Event Player.ExtraEffect_ID);
		Wait(0.400, Abort When False);
		Create Beam Effect(Filtered Array(All Players(All Teams), !(
			Current Array Element == Event Player && Current Array Element.Camera <= 5) && (Hero Of(Current Array Element) != Hero(
			Widowmaker) || Current Array Element == Event Player)), Good Beam, Update Every Frame(Update Every Frame(Eye Position(
			Event Player)) + 0.400 * Event Player.Scale_Real * Update Every Frame(Facing Direction Of(Event Player))), Update Every Frame(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ 150 * Event Player.Scale_Real * Facing Direction Of(Event Player), All Players(All Teams), Event Player, False)), Color(Red),
			Visible To Position and Radius);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait Until(!Is Firing Secondary(Event Player) || Hero Of(Event Player) != Hero(Widowmaker), 9999);
		Destroy Effect(Event Player.ExtraEffect_ID);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Start Scaling Barriers(Event Player, Sine From Radians(Total Time Elapsed * 0.500) * 1.200 + 1.400, True);
		Wait Until(!(Is Firing Secondary(Event Player) || Hero Of(Event Player) != Hero(Brigitte)), 9999);
		Stop Scaling Barriers(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Wait(0.160, Ignore Condition);
		Event Player.Extra17_Pos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ 21 * Event Player.Scale_Real * Facing Direction Of(Event Player), All Players(All Teams), Event Player, False);
		Abort If(Distance Between(Event Player, Event Player.Extra17_Pos) > 20.500);
		Wait(0.140, Ignore Condition);
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.Extra17_Pos), Distance Between(Event Player,
			Event Player.Extra17_Pos) * 3 * Event Player.Scale_Real, To World, Cancel Contrary Motion XYZ);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Update Every Frame(Position Of(Event Player) + World Vector Of(Throttle Of(
			Event Player) * Vector(0.100, 0, 0.100), Event Player, Rotation) + (Is Button Held(Event Player, Button(Jump)) ? Vector(0,
			0.100, 0) : Vector(0, 0, 0)) + (Is Button Held(Event Player, Button(Crouch)) ? Vector(0, -0.100, 0) : Vector(0, 0, 0))), True);
		Wait Until(!Is Using Ultimate(Event Player), 9999);
		Stop Forcing Player Position(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		While(Is Using Ability 2(Event Player));
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 1, To World, Incorporate Contrary Motion);
			Wait(0.050, Ignore Condition);
		End;
		Set Gravity(Event Player, Event Player.Player_Modification[3]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Set Gravity(Event Player, 10);
		Disable Movement Collision With Environment(Event Player, False);
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		Enable Movement Collision With Environment(Event Player);
		Set Gravity(Event Player, Event Player.Player_Modification[3]);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Lifeweaver);
		(Event Player.High_Rank || (Event Player.Mod_Rank && !Event Player.Promoted_Rank) || Event Player == Host Player) == False;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Wait Until(Hero Of(Event Player) != Hero(Lifeweaver), 9999);
		Wait Until(Hero Of(Event Player) != Hero(Mei), 9999);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		(Event Player.High_Rank || (Event Player.Mod_Rank && !Event Player.Promoted_Rank) || Event Player == Host Player) == False;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Wait Until(Hero Of(Event Player) != Hero(Mei), 9999);
		Wait Until(Hero Of(Event Player) != Hero(Lifeweaver), 9999);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is In Alternate Form(Event Player) == True;
		Is On Ground(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1, 0), 20, To World, Incorporate Contrary Motion);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.Full_Protection == False;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Create Icon(All Players(All Teams), Update Every Frame(Eye Position(Event Player) - Vector(0, 0.500, 0)
			+ Event Player.Scale_Real * Facing Direction Of(Event Player) * (Total Time Elapsed * 0.250 * Distance Between(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* 16 * Event Player.Scale_Real, All Players(All Teams), Event Player, True), Eye Position(Event Player))
			* 5 % Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 16 * Event Player.Scale_Real, All Players(All Teams), Event Player, True), Eye Position(Event Player)))),
			Heart, Visible To and Position, Color(Red), False);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait Until(!Is Using Ability 2(Event Player) || Hero Of(Event Player) != Hero(Echo), 9999);
		Destroy Icon(Event Player.ExtraEffect_ID);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Firing Primary(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Abort If(!Hero Of(Event Player) == Hero(Soldier: 76));
		Event Player.Spam_Cooldown = 1;
		Create Icon(All Players(All Teams), Update Every Frame(Eye Position(Event Player) - Vector(0, 0.500, 0)
			+ Event Player.Scale_Real * (Is In View Angle(Event Player, Player Closest To Reticle(Event Player, All Teams), 25)
			&& Eye Position(Player Closest To Reticle(Event Player, All Teams)) != Null ? Direction Towards(Eye Position(Event Player),
			Eye Position(Player Closest To Reticle(Event Player, All Teams)) - Vector(0, 0.500, 0)) : Facing Direction Of(Event Player))
			* -1 * (Event Player.Spam_Cooldown - 1) * 50), Heart, Visible To and Position, Color(Red), False);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait(0.250, Ignore Condition);
		Destroy Icon(Event Player.ExtraEffect_ID);
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Current Map == Map(Paris) || Current Map == Map(Circuit royal)) == False;
		(Hero Of(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Symmetra)) == True;
		Is Firing Primary(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Abort If(Is Firing Primary(Event Player) && !(Hero Of(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Symmetra)));
		Create Icon(All Players(All Teams), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * (Hero Of(Event Player) == Hero(Symmetra) ? 12 : 15) * Event Player.Scale_Real,
			All Players(All Teams), Event Player, True) - Vector(0, 0.500, 0)), Heart, Visible To and Position, Color(Red), False);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait Until(!Is Firing Primary(Event Player), 9999);
		Destroy Icon(Event Player.ExtraEffect_ID);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		Illari;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.AddonSkillsToggle == True;
	}

	actions
	{
		Abort If(Current Map == Map(Paris));
		Create Icon(All Players(All Teams), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 15 * Event Player.Scale_Real, All Players(All Teams), Event Player, True) - Vector(0,
			0.500, 0)), Heart, Visible To and Position, Color(Red), False);
		Event Player.ExtraEffect_ID = Last Created Entity;
		Wait Until(!(Is Firing Secondary(Event Player) || Hero Of(Event Player) != Hero(Illari)), 9999);
		Destroy Icon(Event Player.ExtraEffect_ID);
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Moe_Position = Vector(0, 100, 0);
		Global.Moe_Force = False;
		Global.TP_Help = False;

		Global.teleportsAndMoePosition = Array(
			Array(Map(Nepal Shrine), Vector(-18.350, 13, 0)), 
			Array(Map(Nepal Village), Vector(-211.550, -88, -2.400)),
			Array(Map(Paris), Vector(-36.900, 11.990, 26.200)), 
			Array(Map(Blizzard World Winter), Vector(-131.340, 1.740, 107.870)),
			Array(Map(Busan Downtown Lunar New Year), Vector(51.900, 21.400, -127.300)),
			Array(Map(Busan Sanctuary Lunar New Year), Vector(-328.900, 8.070, 179.330)),
			Array(
				Map(Hanaoka), 
				Vector(-57.07, 42.91, 107.97)
				),
			Array(
				Map(Throne of Anubis), 
				Vector(-1.03, 4.33, 89.10)
				),
			Array(
				Map(New Queen Street), 
				Vector(-53, 2, -5.250),

				Vector(-33.850, 4, 15.310), 
				Vector(-30.050, -4, 75.280),

				Vector(-29.960, -4, 78.370), 
				Vector(-31.700, 4, 11.370)
				),
			Array(Map(Esperança), Vector(0, 0, 19.650)),
			Array(Map(Château Guillard), Vector(206.500, 0.600, 89.700)),
			Array(Map(Château Guillard Halloween), Vector(206.500, 0.600, 89.700)),
			Array(Map(Black Forest), Vector(3.700, 15.560, -10.070)),
			Array(Map(Black Forest Winter), Vector(3.700, 15.560, -10.070)),
			Array(Map(Castillo), Vector(-121.140, 34.570, 71.820)),
			Array(Map(Watchpoint: Gibraltar), Vector(57.870, 9.440, -117.950)),
			Array(Map(Malevento), Vector(-34.360, -1, 25.200)), 
			Array(Map(Necropolis), Vector(2.750, 3, -26.850)),
			Array(Map(Petra), Vector(-17.380, -8.080, 28.850)),
			Array(Map(Hollywood), Vector(-11.100, 0.010, 41)),
			Array(Map(Eichenwalde), Vector(125.600, 14.730, -18.600)),
			Array(Map(Eichenwalde Halloween), Vector(125.600, 14.730, -18.600)), 
			Array(
				Map(Ilios), 
				Vector(358.480, 23.410, -51.670),

				Vector(-190, 1.050, -3.050), 
				Vector(-195.100, 1.050, 2.050), 
				Vector(20.100, 61.400, -142.500), 
				Vector(316.600, -23.700, -38.200),

				Vector(20.100, 61.400, -145.500), 
				Vector(318.600, -23.700, -40.200), 
				Vector(-192, 1.050, -5.050),
				Vector(-197.100, 1.050, 0.050)
				),
			Array(Map(Ilios Lighthouse), Vector(358.480, 23.410, -51.670)),
			Array(Map(Ilios Ruins), Vector(41.600, 69, -163.700)),
			Array(Map(Ilios Well), Vector(-184.300, 1, -22.650)),
			Array(Map(Oasis City Center), Vector(114.040, 0.800, 218.040)),
			Array(Map(Oasis Gardens), Vector(129.900, 15.300, -236.150)),
			Array(Map(Route 66), Vector(-33.220, 3.210, -11.760)),
			Array(Map(Shambali Monastery), Vector(-27.950, 73.790, 195.380)),
			Array(Map(Temple of Anubis), Vector(15.860, 10.040, 11.820)),
			Array(
				Map(Lijiang Tower), 
				Vector(-17.300, 270, 330.700),

				Vector(2.700, 94, 187.800), 
				Vector(-2.700, 94, 187.800), 
				Vector(5, 0, -14), 
				Vector(5.700, 267.170, 290),

				Vector(1.100, 0, -14), 
				Vector(5.700, 267.330, 285), 
				Vector(2.700, 94, 184.800), 
				Vector(-2.700, 94, 184.800)
				),				
			Array(Map(Lijiang Control Center), Vector(-17.300, 270, 330.700)),
			Array(
				Map(Lijiang Tower Lunar New Year), 
				Vector(-17.300, 270, 330.700),

				Vector(2.700, 94, 187.800), 
				Vector(-2.700, 94, 187.800), 
				Vector(5, 0, -14), 
				Vector(5.700, 267.170, 290),

				Vector(1.100, 0, -14), 
				Vector(5.700, 267.330, 285), 
				Vector(2.700, 94, 184.800), 
				Vector(-2.700, 94, 184.800)
				),
			Array(Map(Lijiang Control Center Lunar New Year), Vector(-17.300, 270, 330.700)),
			Array(Map(Lijiang Night Market), Vector(0, 95.300, 129.800)),
			Array(Map(Lijiang Night Market Lunar New Year), Vector(0, 95.300, 129.800)), 
			Array(
				Map(Ayutthaya), 
				Vector(16, 1, 50.640),

				Vector(4.750, 21, 26.500), 
				Vector(29.750, 0.110, -28),
				
				Vector(29.750, 0.110, -25), 
				Vector(4.750, 21, 29.500)
				),
			Array(Map(Volskaya Industries), Vector(-8.200, -4.230, 39.750)),
			Array(
				Map(Havana), 
				Vector(-58.300, 3.950, -30.860),

				Vector(-39.470, 6, -28.170), 
				Vector(-17.710, 5.950, -18.280), 
				Vector(24.920, 5.950,-33.410),

				Vector(40.780, 8, 10.420), 
				Vector(-34.180, 5.840, -33.220), 
				Vector(-34.180, 5.840, -33.220)
				), 
			Array(Map(Suravasa), Vector(182.180, 0.780, 63.410)),
			Array(Map(New Junk City), Vector(4.780, 3.840, -67.620)),
			Array(Map(Midtown), Vector(62, 8.110, 13.900)),
			Array(
				Map(Samoa), 
				Vector(257.500, 5.750, -283.800),

				Vector(275, 8.300, -250.800), 
				Vector(193, 8.300, -250.800), 
				Vector(-328.200, 3.050, -121.300), 
				Vector(27.600, 333.600, 366.600), 
				Vector(-344.200, 3, -132.200), 
				Vector(-322.500, -2.800, -189),

				Vector(-330, 3.050, -118.500), 
				Vector(27.600, 333.600, 363.600), 
				Vector(272, 8.300, -250.800), 
				Vector(196, 8.300, -250.800), 
				Vector(-324.100, -3.100, -196.300), 
				Vector(-341.700, 3, -130.200)
				),
			Array(Map(Kanezaka), Vector(6.500, 6, 14)),
			Array(
				Map(Hanamura), 
				Vector(49.400, -1, -0.200),

				Vector(57.64, -1.87, 31.40),
				Vector(62.50, -2.12, 42.77),

				Vector(64.19, -2.30, 47.10),
				Vector(63.86, -2.00, 30.32)
				),
			Array(
				Map(Hanamura Winter), 
				Vector(49.400, -1, -0.200),

				Vector(57.64, -1.87, 31.40),
				Vector(62.50, -2.12, 42.77),

				Vector(64.19, -2.30, 47.10),
				Vector(63.86, -2.00, 30.32)
			),
			Array(Map(King's Row), Vector(-76.800, 0.500, -37)), 
			Array(Map(King's Row Winter), Vector(-76.800, 0.500, -37)),
			Array(Map(Dorado), Vector(71.600, 7, -30.270)),
			Array(
				Map(Nepal), 
				Vector(72.200, 84, -11.260),

				Vector(-20, 13, -2), 
				Vector(-20, 13, 2), 
				Vector(90, 128, -10), 
				Vector(-209, -94.100, -16),
				Vector(79, 84, 11), 
				Vector(68.750, 128.530, -60.770),

				Vector(87, 128, -10), 
				Vector(-209, -94.100, -13), 
				Vector(-23, 13, -2), 
				Vector(-23, 13, 2),
				Vector(66.050, 127.800, -62.750), 
				Vector(79.250, 84, 11)
				),
			Array(Map(Nepal Sanctum), Vector(89.900, 132.910, -45)),
			Array(
				Map(Busan), 
				Vector(223.500, 10, 211.500),

				Vector(-331.900, 14.100, 176.800), 
				Vector(-325.200, 14.100, 176.800), 
				Vector(51.900, 6.050, -100.200), 
				Vector(208.350, 17.200, 208.800),

				Vector(51.900, 6.050, -96.200), 
				Vector(209.850, 17.200, 212.800), 
				Vector(-331.900, 14.100, 179.800), 
				Vector(-325.200, 14.100, 179.800)
				),
			Array(Map(Numbani), Vector(19.950, 0.250, 4.400)), 
			Array(Map(Colosseo), Vector(-11.300, 2, -10.200)),
			Array(Map(Ecopoint: Antarctica), Vector(26, 9.250, 0)), 
			Array(Map(Ecopoint: Antarctica Winter), Vector(26, 9.250, 0)), 
			Array(Map(Hollywood Halloween), Vector(0.400, 6.400, -104.920)),
			Array(Map(Horizon Lunar Colony), Vector(86.300, 6.620, -60.850)),
			Array(Map(Junkertown), Vector(-22.870, 4.760, -53.750)),
			Array(
				Map(Oasis), 
				Vector(-128, 11.100, 0), 

				Vector(128.850, 2.500, -207.500), 
				Vector(101.600, 2.500, -235.450), 
				Vector(120.700, 1, 230.700), 
				Vector(-184.600, 9, 0),

				Vector(118.700, 1, 232.700), 
				Vector(-181.900, 9.100, 0), 
				Vector(126.850, 2.500, -205.500),
				Vector(99.600, 2.500, -233.450)
				),

			Array(Map(Oasis University), Vector(-128, 11.100, 0)), 
			Array(
				Map(Rialto), 
				Vector(10.950, -0.450, -85.870), 

				Vector(50.350, -1.250, 4.500), 
				Vector(-11.920, -1.250, -21.900), 
				Vector(0.750, -1.250,35.670), 
				Vector(34, -1.250, 66.400), 
				Vector(66.800, 50.450, 70.500),

				Vector(5.420, -1.250, 20.590), 
				Vector(52.720, -1.250, -9.320), 
				Vector(52.720, -1.250, -9.320),
				Vector(63.700, 48.750, 66), 
				Vector(35, -1.250, 70)
				),
			Array(
				Map(Antarctic Peninsula), 
				Vector(318.400, -27, -132.200), 

				Vector(276.900, -10.950, -261), 
				Vector(291.390, -10.950, -261), 
				Vector(270, 41.300, 144.700),
				Vector(-125.300, -152.500, 60),

				Vector(270, 41.300, 147.700), 
				Vector(-125.300, -152.500, 56), 
				Vector(280.900, -10.950, -261),
				Vector(287.390, -10.950, -261)				
				),
			Array(
				Map(Paraíso), 
				Vector(-39.500, -2, 65.800),

				Vector(-27.020, -2.150, 51.540), 
				Vector(-19.790, -2.150, 51.720),

				Vector(-16.780, -2.150, 52.180), 
				Vector(-30.920, -2.140, 53.340)
				),
			Array(
				Map(Runasapi), 
				Vector(27.00, 0.00, 1.22)
				)
		);

		Wait(15, Ignore Condition);

		If(String Length(Global.Credits[0]) != 28 || String Length(Global.Credits[1]) != 34 || Custom String("Ex{0}{1}t", Char In String(
			Global.Credits[0], 20), Char In String(Global.Credits[0], 18)) != Custom String("Exort"));
			For Global Variable(Drawing_Obj_Storage, 0, 128, 1);
				Global.Drawing_Obj_Storage -= 1;
			End;
		End;
		If(Custom String("{0}", Char In String(Global.Banned_List[1], 2)) != Custom String("U") || String Length(Global.Banned_List[1])
			!= 4);
			For Global Variable(Gravity_Helper, 0, 12, 1);
				Global.Gravity_Helper -= 1;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
        for Global Variable(TP_Help, 0, Count of(Global.teleportsAndMoePosition), 1);
            If(Global.teleportsAndMoePosition[Global.TP_Help][0] == Current Map);
				"Get teleport coordinates"
                Global.teleportsForCurrentMap = Array(
					Array Slice(Global.teleportsAndMoePosition[Global.TP_Help], 2, (Count Of(Global.teleportsAndMoePosition[Global.TP_Help]) - 2) / 2), 
                	Array Slice(Global.teleportsAndMoePosition[Global.TP_Help], Count Of(Global.teleportsAndMoePosition[Global.TP_Help]) / 2 + 1, Count Of(Global.teleportsAndMoePosition[Global.TP_Help])));
				Global.Moe_Position = Global.teleportsAndMoePosition[Global.TP_Help][1];
				"Get position of the current Map and set Moe status to be forced"
				If(Index Of Array Value(Global.teleportsAndMoePosition, Global.teleportsAndMoePosition[Global.TP_Help]) > 86);
					Global.Moe_Force = True;
				End;
                Break;
            End;
			Wait(0.020, Ignore Condition);
        End;

		If(Global.teleportsForCurrentMap[1] != 0);
			For Global Variable(TP_Help, 0, Count Of(Global.teleportsForCurrentMap[0]), 1);
				Create Effect(All Players(All Teams), Ring, Color(Rose), Global.teleportsForCurrentMap[0][Global.TP_Help], 1.100, Visible To);
				Wait(0.020, Ignore Condition);
			End;
			Global.TP_Help = True;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.TP_Help == True;
		Is True For Any(Global.teleportsForCurrentMap[0], Distance Between(Current Array Element, Event Player) <= 1.100) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		For Player Variable(Event Player, TP_Index, 0, Count Of(Global.teleportsForCurrentMap[0]), 1);
			If(Distance Between(Global.teleportsForCurrentMap[0][Event Player.TP_Index], Event Player) <= 1.100);
				Teleport(Event Player, Global.teleportsForCurrentMap[1][Event Player.TP_Index]);
				Set Status(Event Player, Null, Rooted, 0.600);
				Break;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Custom String("Moe Szyslak") == Custom String("{0}", Current Array Element)) == False;
		Count Of(All Players(All Teams)) < 12;
	}

	actions
	{
		Wait(3, Abort When False);
		If(Count Of(All Players(Team 1)) < 6);
			Create Dummy Bot(Hero(Soldier: 76), Team 1, -1, Vector(0, 100, 0), Vector(0, 0, 1));
		Else;
			Create Dummy Bot(Hero(Soldier: 76), Team 2, -1, Vector(0, 100, 0), Vector(0, 0, 1));
		End;
		Start Forcing Dummy Bot Name(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), Custom String(
			"Moe Szyslak"));
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
			Event Player, All Teams)))), 300, To World, Direction and Turn Rate);
		Event Player.Scale_Real = 1;
		Chase Player Variable At Rate(Event Player, Spam_Cooldown, 0, 1, None);
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Stop Modifying Hero Voice Lines(Event Player);
		Set Max Health(Event Player, 10000);
		Set Knockback Received(Event Player, 0);
		Start Heal Over Time(Event Player, Null, 9999, 500);
		If(Global.Moe_Force);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		End;
		Event Player.Auto_Respawn = False;
		Wait(0.100, Ignore Condition);
		If(Current Map == Map(Colosseo) || Current Map == Map(Runasapi));
			Disable Movement Collision With Environment(Event Player, False);
		Else If(Current Map == Map(Rialto));
			Disable Movement Collision With Environment(Event Player, True);
		End;
		Wait(0.100, Ignore Condition);
		Teleport(Event Player, Global.Moe_Position);
	}
}

rule("")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Custom String("{0}", Event Player) == Custom String("Moe Szyslak");
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 9999);
		Wait(1, Ignore Condition);
		Teleport(Event Player, Global.Moe_Position);
		If(Global.Moe_Force);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		End;
	}
}

rule("")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Event Player.Bot_CD == 0);
			Event Player.Bot_CD = 2;
			Wait(0.200, Ignore Condition);
			Communicate(Event Player, Thanks);
		End;
		Event Player.Bot_Aggro += Event Damage;
		If(Event Player.Bot_Aggro >= 5000);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Press Button(Event Player, Button(Primary Fire));
			Set Weapon(Event Player, 2);
			Wait(0.010, Ignore Condition);
			Start Holding Button(Event Player, Button(Primary Fire));
			While(Is Using Ultimate(Event Player));
				Wait(0.010, Ignore Condition);
				Set Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Eye Position(Random Value In Array(
					Filtered Array(All Players(All Teams), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
					Barriers Do Not Block LOS)))))), To World);
				Event Player.Bot_No += 1;
				If(Event Player.Bot_No >= 60);
					Communicate(Event Player, No);
					Event Player.Bot_No = 0;
				End;
			End;
			Event Player.Bot_Aggro = 0;
			Event Player.Bot_No = 0;
			Stop Holding Button(Event Player, Button(Primary Fire));
			Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
				Event Player, All Teams)))), 300, To World, Direction and Turn Rate);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Objective(Event Player) == True;
	}

	actions
	{
		Create Icon(All Players(All Teams), Eye Position(Event Player) + Vector(0.500 * Cosine From Degrees(Total Time Elapsed * 30),
			0.200 * Sine From Radians(Total Time Elapsed * 0.500) - 0.500, 0.500 * Sine From Degrees(Total Time Elapsed * 30)), Heart,
			Visible To Position and Color, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), False);
		Event Player.Midtown_Bonus = Last Created Entity;
		Wait Until(!Is On Objective(Event Player), 9999);
		Destroy Icon(Event Player.Midtown_Bonus);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 35 || Event Player.Mode_Cycle_Default == 17) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.AddonSkillsToggle[0] == 0);
				Small Message(Event Player, Custom String(" Hero Features ON"));
				Event Player.AddonSkillsToggle[0] = 1;
			Else;
				Small Message(Event Player, Custom String(" Hero Features OFF"));
				Event Player.AddonSkillsToggle[0] = 0;
			End;
		End;
		If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.AddonSkillsToggle[1] == 0);
				Small Message(Event Player, Custom String(" Ring Effect is ON"));
				Event Player.AddonSkillsToggle[1] = 1;
			Else;
				Small Message(Event Player, Custom String(" Ring Effect is OFF"));
				Event Player.AddonSkillsToggle[1] = 0;
			End;
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		Shortener;
	}

	actions
	{
		Wait Until(
			Has Spawned(Event Player) && 
			Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 10, All Players(All Teams), Event Player, True), Position Of(Event Player)) <= 0.04,
			9999
		);
		Wait Until(
			Event Player.Heaven_Strike_ID[101], 9999
		);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		If(Custom String("{0}", Event Player) == Custom String("kwally"));
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Position Of(Event Player) + Vector(X Component Of(Event Player),
				0.022, Z Component Of(Event Player)), 1.300);
			Wait(0.050, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		(Is Button Held(Event Player, Button(Jump)) || Is Button Held(Event Player, Button(Crouch))) == True;
		Event Player.AddonSkillsToggle[1] == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		Abort If(Custom String("{0}", Event Player) == Custom String("kwally") || Custom String("{0}", Event Player) == Custom String(
			"Warloy"));
		Play Effect(All Players(All Teams), Ring Explosion, Custom Color(X Component Of(Global.RGB_Vector), Y Component Of(
				Global.RGB_Vector), Z Component Of(Global.RGB_Vector), 255), Position Of(Event Player) + Vector(0, 0.800, 0), 1.750);
		Wait(0.070, Ignore Condition);
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 36;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
		Abort If((Event Player.Promoted_Rank && Event Player.Mod_Rank) == True);
		Abort If(Event Player.Target_Shortcut.Full_Protection);
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		If(Event Player.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Call Subroutine(Clear_Status);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Communicate(Event Player.Target_Shortcut, Emote Up);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Call Subroutine(Clear_Status);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Communicate(Event Player.Target_Shortcut, Emote Down);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Call Subroutine(Clear_Status);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Communicate(Event Player.Target_Shortcut, Emote Left);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Call Subroutine(Clear_Status);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
			Communicate(Event Player.Target_Shortcut, Emote Right);
		End;
		If(Event Player.High_Rank || Event Player.Mod_Rank);
			Event Player.Bot_CD = 4;
		End;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("")
{
	event
	{
		Subroutine;
		Clear_Status;
	}

	actions
	{
		If(Event Player.Target_Shortcut.Protection);
			Clear Status(Event Player.Target_Shortcut, Phased Out);
			Set Status(Event Player.Target_Shortcut, Null, Stunned, 0.001);
			Set Status(Event Player.Target_Shortcut, Null, Phased Out, 9999);
		End;
	}
}

rule("")
{
	event
	{
		Subroutine;
		ClearLog;
	}

	actions
	{
		If(Count of(Global.actionsLog) == 0);
			Create HUD Text(Filtered Array(All Players (All Teams), (Current Array Element == Host Player || (Current Array Element.Mod_Rank && !Current Array Element.Promoted_Rank)) && Current Array Element.Mode_Cycle == 26), Null, Custom String("No logs here... yet."),
				Null, Left, Global.Main_Chaser + 2, Null, Color(White), Null, Visible To, Visible Never);
			Modify Global Variable(actionsLogIndexer, append to array, last text id);
			Wait Until(Count of(Global.actionsLog) > 0, 9999);
			Destroy Hud Text(Global.actionsLogIndexer[0]);
			Modify Global Variable(actionsLogIndexer, remove from array by index, 0);
		End;
		If(Count of(Global.actionsLog) >= 15);
			Destroy Hud Text(Global.actionsLogIndexer[0]);
			Wait(0.1, Ignore Condition);
			Modify Global Variable(actionsLog, remove from array by index, 0);
			Modify Global Variable(actionsLogIndexer, remove from array by index, 0);
		End;
		Wait(1.2, Ignore Condition);
		Loop;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
	}
}

rule("")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Array(Game Mode(Skirmish), Game Mode(Assault)), Current Array Element == Current Game Mode) == True;
	}

	actions
	{
		"Reduce player travel time at the start of matches and increase concentration of players in a centralized area"
		Wait Until(Has Spawned(Event Player), 9999);
		If(Is True For Any(Array(Map(Colosseo), Map(New Queen Street), Map(Esperança), Map(Runasapi)), Current Array Element == Current Map));
			Teleport(Event Player, Nearest Walkable Position(Payload Position + Vector(Random Real(-2.0, 3.0), 0, Random Real(-2.0, 3.0))));
		Else;
			Teleport(Event Player, Nearest Walkable Position(Objective Position(0) + Vector(Random Real(-2.0, 3.0), 0, Random Real(-2.0, 3.0))));
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any(Event Player) == True;
		Team Of(Player Closest To Reticle(Event Player, All Teams)) != Team Of(Event Player);
	}

	actions
	{
		If(Is Communicating(Event Player, Acknowledge));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Understood.", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, Group Up));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Group Up", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, You Are Welcome));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: You Are Welcome", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, With You));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: I'm with You ~", Hero Icon String(Hero Of(Event Player)), Event Player)); 
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, Incoming));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Incoming!", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, Going In)); 
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Going In ~", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, Push Forward));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Push Forward!", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		Else If(Is Communicating(Event Player, Ready));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" {0} {1}: Ready!", Hero Icon String(Hero Of(Event Player)), Event Player));
			Wait(4, Ignore Condition);
		End;
	}
}

rule("")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Hazard)) == True;
		!(Event Player.Mod_Rank && !Event Player.Promoted_Rank) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 90);
	}
}
